
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c8  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fcc  08005fcc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fcc  08005fcc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000276c8  2000005c  08006030  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20027724  08006030  00027724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140f2  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002978  00000000  00000000  00034236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00036bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3b  00000000  00000000  00037d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b15e  00000000  00000000  00038a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013057  00000000  00000000  00063ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a505  00000000  00000000  00076c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c44  00000000  00000000  00181108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00185d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00185dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00185ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005770 	.word	0x08005770

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08005770 	.word	0x08005770

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr

0800080c <__aeabi_d2f>:
 800080c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000814:	bf24      	itt	cs
 8000816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800081a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800081e:	d90d      	bls.n	800083c <__aeabi_d2f+0x30>
 8000820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800082c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000834:	bf08      	it	eq
 8000836:	f020 0001 	biceq.w	r0, r0, #1
 800083a:	4770      	bx	lr
 800083c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000840:	d121      	bne.n	8000886 <__aeabi_d2f+0x7a>
 8000842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000846:	bfbc      	itt	lt
 8000848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800084c:	4770      	bxlt	lr
 800084e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000852:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000856:	f1c2 0218 	rsb	r2, r2, #24
 800085a:	f1c2 0c20 	rsb	ip, r2, #32
 800085e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	bf18      	it	ne
 8000868:	f040 0001 	orrne.w	r0, r0, #1
 800086c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000874:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000878:	ea40 000c 	orr.w	r0, r0, ip
 800087c:	fa23 f302 	lsr.w	r3, r3, r2
 8000880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000884:	e7cc      	b.n	8000820 <__aeabi_d2f+0x14>
 8000886:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800088a:	d107      	bne.n	800089c <__aeabi_d2f+0x90>
 800088c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000890:	bf1e      	ittt	ne
 8000892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800089a:	4770      	bxne	lr
 800089c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b0:	f000 ffa3 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b4:	f000 f84c 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b8:	f000 fa6a 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 80008bc:	f000 fa2e 	bl	8000d1c <MX_DMA_Init>
  MX_DAC1_Init();
 80008c0:	f000 f898 	bl	80009f4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80008c4:	f000 f93e 	bl	8000b44 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80008c8:	f000 f8d6 	bl	8000a78 <MX_DFSDM1_Init>
  MX_TIM4_Init();
 80008cc:	f000 f9d8 	bl	8000c80 <MX_TIM4_Init>
  MX_TIM3_Init();
 80008d0:	f000 f986 	bl	8000be0 <MX_TIM3_Init>
   * Part 2
   */
  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine, SIZE, DAC_ALIGN_12B_R);

  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim4);
 80008d4:	4817      	ldr	r0, [pc, #92]	; (8000934 <main+0x88>)
 80008d6:	f004 f9a1 	bl	8004c1c <HAL_TIM_Base_Start_IT>

  gen_sine();
 80008da:	f000 fbd5 	bl	8001088 <gen_sine>

  *note_0 = gen_notes(SIZE);
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 fc26 	bl	8001130 <gen_notes>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <main+0x8c>)
 80008ea:	801a      	strh	r2, [r3, #0]
  *note_1 = gen_notes(SIZE*2);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f000 fc1f 	bl	8001130 <gen_notes>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <main+0x90>)
 80008f8:	801a      	strh	r2, [r3, #0]
  *note_2 = gen_notes(SIZE*4);
 80008fa:	200c      	movs	r0, #12
 80008fc:	f000 fc18 	bl	8001130 <gen_notes>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <main+0x94>)
 8000906:	801a      	strh	r2, [r3, #0]
  *note_3 = gen_notes(SIZE*8);
 8000908:	2018      	movs	r0, #24
 800090a:	f000 fc11 	bl	8001130 <gen_notes>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <main+0x98>)
 8000914:	801a      	strh	r2, [r3, #0]
  *note_4 = gen_notes(SIZE*16);
 8000916:	2030      	movs	r0, #48	; 0x30
 8000918:	f000 fc0a 	bl	8001130 <gen_notes>
 800091c:	4603      	mov	r3, r0
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <main+0x9c>)
 8000922:	801a      	strh	r2, [r3, #0]
  *note_5 = gen_notes(SIZE*32);
 8000924:	2060      	movs	r0, #96	; 0x60
 8000926:	f000 fc03 	bl	8001130 <gen_notes>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <main+0xa0>)
 8000930:	801a      	strh	r2, [r3, #0]
  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_0, SIZE, DAC_ALIGN_12B_R);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000932:	e7fe      	b.n	8000932 <main+0x86>
 8000934:	200002d0 	.word	0x200002d0
 8000938:	2002742c 	.word	0x2002742c
 800093c:	20027434 	.word	0x20027434
 8000940:	20027440 	.word	0x20027440
 8000944:	20027458 	.word	0x20027458
 8000948:	20027488 	.word	0x20027488
 800094c:	200274e8 	.word	0x200274e8

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2244      	movs	r2, #68	; 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fec2 	bl	80056e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f002 fc92 	bl	800329c <HAL_PWREx_ControlVoltageScaling>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800097e:	f000 fc31 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000982:	2310      	movs	r3, #16
 8000984:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000996:	2301      	movs	r3, #1
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800099e:	233c      	movs	r3, #60	; 0x3c
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fd16 	bl	80033e4 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009be:	f000 fc11 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	2105      	movs	r1, #5
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f91c 	bl	8003c18 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 fbfd 	bl	80011e4 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3758      	adds	r7, #88	; 0x58
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2228      	movs	r2, #40	; 0x28
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fe71 	bl	80056e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_DAC1_Init+0x7c>)
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <MX_DAC1_Init+0x80>)
 8000a0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a0c:	4818      	ldr	r0, [pc, #96]	; (8000a70 <MX_DAC1_Init+0x7c>)
 8000a0e:	f001 f89e 	bl	8001b4e <HAL_DAC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 fbe4 	bl	80011e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000a20:	230a      	movs	r3, #10
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a28:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_DAC1_Init+0x7c>)
 8000a3e:	f001 f9d9 	bl	8001df4 <HAL_DAC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 fbcc 	bl	80011e4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000a4c:	230e      	movs	r3, #14
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	2210      	movs	r2, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_DAC1_Init+0x7c>)
 8000a58:	f001 f9cc 	bl	8001df4 <HAL_DAC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8000a62:	f000 fbbf 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000078 	.word	0x20000078
 8000a74:	40007400 	.word	0x40007400

08000a78 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <MX_DFSDM1_Init+0xbc>)
 8000a80:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a9a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000a9e:	2264      	movs	r2, #100	; 0x64
 8000aa0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000aaa:	f001 fc39 	bl	8002320 <HAL_DFSDM_FilterInit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000ab4:	f000 fb96 	bl	80011e4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <MX_DFSDM1_Init+0xc4>)
 8000abc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 60;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000acc:	223c      	movs	r2, #60	; 0x3c
 8000ace:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_DFSDM1_Init+0xc0>)
 8000b08:	f001 fb4a 	bl	80021a0 <HAL_DFSDM_ChannelInit>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000b12:	f000 fb67 	bl	80011e4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000b16:	2201      	movs	r2, #1
 8000b18:	4909      	ldr	r1, [pc, #36]	; (8000b40 <MX_DFSDM1_Init+0xc8>)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_DFSDM1_Init+0xb8>)
 8000b1c:	f001 fcda 	bl	80024d4 <HAL_DFSDM_FilterConfigRegChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000b26:	f000 fb5d 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	40016100 	.word	0x40016100
 8000b38:	200001a0 	.word	0x200001a0
 8000b3c:	40016040 	.word	0x40016040
 8000b40:	00020004 	.word	0x00020004

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b6c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000b8e:	f003 ffed 	bl	8004b6c <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 fb24 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000baa:	f004 f9d8 	bl	8004f5e <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000bb4:	f000 fb16 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM2_Init+0x98>)
 8000bc6:	f004 fbef 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fb08 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000238 	.word	0x20000238

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <MX_TIM3_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c06:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c14:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c28:	f003 ffa0 	bl	8004b6c <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c32:	f000 fad7 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c44:	f004 f98b 	bl	8004f5e <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000c4e:	f000 fac9 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c52:	2320      	movs	r3, #32
 8000c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c60:	f004 fba2 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c6a:	f000 fabb 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000284 	.word	0x20000284
 8000c7c:	40000400 	.word	0x40000400

08000c80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <MX_TIM4_Init+0x98>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6000;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cb2:	f241 7270 	movw	r2, #6000	; 0x1770
 8000cb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cc6:	f003 ff51 	bl	8004b6c <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 fa88 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000ce2:	f004 f93c 	bl	8004f5e <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 fa7a 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM4_Init+0x94>)
 8000cfe:	f004 fb53 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fa6c 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002d0 	.word	0x200002d0
 8000d18:	40000800 	.word	0x40000800

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6493      	str	r3, [r2, #72]	; 0x48
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_DMA_Init+0x70>)
 8000d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	200b      	movs	r0, #11
 8000d58:	f000 fec3 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f000 fedc 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	200c      	movs	r0, #12
 8000d68:	f000 febb 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d6c:	200c      	movs	r0, #12
 8000d6e:	f000 fed4 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200d      	movs	r0, #13
 8000d78:	f000 feb3 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d7c:	200d      	movs	r0, #13
 8000d7e:	f000 fecc 	bl	8001b1a <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0c:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000e0e:	f002 f9db 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB_Pin */
  GPIO_InitStruct.Pin = PB_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <MX_GPIO_Init+0xdc>)
 8000e2a:	f002 f83b 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000e48:	f002 f82c 	bl	8002ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f000 fe46 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f000 fe5f 	bl	8001b1a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800

08000e70 <HAL_GPIO_EXTI_Callback>:

}
*/

// Part 4
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	song_index = 0;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e82:	f003 ff3b 	bl	8004cfc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);				// Start timer 3 for LED
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e88:	f003 fec8 	bl	8004c1c <HAL_TIM_Base_Start_IT>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);	// Stop playing looped audio
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e90:	f000 ff4c 	bl	8001d2c <HAL_DAC_Stop_DMA>
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, audio, AUDIO_SIZE);	// Start recording
 8000e94:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e9c:	f001 fb60 	bl	8002560 <HAL_DFSDM_FilterRegularStart_DMA>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20027428 	.word	0x20027428
 8000eac:	20000238 	.word	0x20000238
 8000eb0:	20000284 	.word	0x20000284
 8000eb4:	20000078 	.word	0x20000078
 8000eb8:	20000324 	.word	0x20000324
 8000ebc:	2000014c 	.word	0x2000014c

08000ec0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);			// Stop recording
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <HAL_DFSDM_FilterRegConvCpltCallback+0x7c>)
 8000eca:	f001 fbcb 	bl	8002664 <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_TIM_Base_Stop_IT(&htim3);								// Stop timer for led
 8000ece:	481c      	ldr	r0, [pc, #112]	; (8000f40 <HAL_DFSDM_FilterRegConvCpltCallback+0x80>)
 8000ed0:	f003 ff14 	bl	8004cfc <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);	// Turn on Led
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	481a      	ldr	r0, [pc, #104]	; (8000f44 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>)
 8000edc:	f002 f974 	bl	80031c8 <HAL_GPIO_WritePin>

	// Scale audio
	for (int i = 0; i<AUDIO_SIZE; i++){
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e01e      	b.n	8000f24 <HAL_DFSDM_FilterRegConvCpltCallback+0x64>
		val = (uint32_t)(audio[i]/256 + pow(2, 23)/pow(2,12));
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fbf1 	bl	80006d8 <__aeabi_ui2d>
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 8000efc:	f7ff fab0 	bl	8000460 <__adddf3>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fc60 	bl	80007cc <__aeabi_d2uiz>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 8000f10:	6013      	str	r3, [r2, #0]
		audio[i]= val;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	490c      	ldr	r1, [pc, #48]	; (8000f48 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<AUDIO_SIZE; i++){
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	dddb      	ble.n	8000ee6 <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8000f30:	f003 fe74 	bl	8004c1c <HAL_TIM_Base_Start_IT>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000014c 	.word	0x2000014c
 8000f40:	20000284 	.word	0x20000284
 8000f44:	48000400 	.word	0x48000400
 8000f48:	20000324 	.word	0x20000324
 8000f4c:	40a00000 	.word	0x40a00000
 8000f50:	20027424 	.word	0x20027424
 8000f54:	20000238 	.word	0x20000238

08000f58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d104      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6c:	4839      	ldr	r0, [pc, #228]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f6e:	f002 f943 	bl	80031f8 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim2){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a38      	ldr	r2, [pc, #224]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d166      	bne.n	8001048 <HAL_TIM_PeriodElapsedCallback+0xf0>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);	// Stop playing looped audio
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4837      	ldr	r0, [pc, #220]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000f7e:	f000 fed5 	bl	8001d2c <HAL_DAC_Stop_DMA>
		switch(song_index) {
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	d844      	bhi.n	8001014 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08001003 	.word	0x08001003
 8000f94:	08000ff1 	.word	0x08000ff1
 8000f98:	08000fdf 	.word	0x08000fdf
 8000f9c:	08000fcd 	.word	0x08000fcd
 8000fa0:	08000fbb 	.word	0x08000fbb
 8000fa4:	08000fa9 	.word	0x08000fa9
			case 5:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_0, SIZE, DAC_ALIGN_12B_R);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2303      	movs	r3, #3
 8000fae:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	482a      	ldr	r0, [pc, #168]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fb4:	f000 fdee 	bl	8001b94 <HAL_DAC_Start_DMA>
			     break;
 8000fb8:	e035      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			case 4:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_1, SIZE*2, DAC_ALIGN_12B_R);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	4a29      	ldr	r2, [pc, #164]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	4825      	ldr	r0, [pc, #148]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fc6:	f000 fde5 	bl	8001b94 <HAL_DAC_Start_DMA>
			     break;
 8000fca:	e02c      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			case 3:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_2, SIZE*4, DAC_ALIGN_12B_R);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	4821      	ldr	r0, [pc, #132]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fd8:	f000 fddc 	bl	8001b94 <HAL_DAC_Start_DMA>
				break;
 8000fdc:	e023      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			case 2:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_3, SIZE*8, DAC_ALIGN_12B_R);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	4a22      	ldr	r2, [pc, #136]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	481c      	ldr	r0, [pc, #112]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000fea:	f000 fdd3 	bl	8001b94 <HAL_DAC_Start_DMA>
				break;
 8000fee:	e01a      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			case 1:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_4, SIZE*16, DAC_ALIGN_12B_R);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2330      	movs	r3, #48	; 0x30
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4818      	ldr	r0, [pc, #96]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ffc:	f000 fdca 	bl	8001b94 <HAL_DAC_Start_DMA>
				break;
 8001000:	e011      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			case 0:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, note_5, SIZE*32, DAC_ALIGN_12B_R);
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2360      	movs	r3, #96	; 0x60
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800100a:	2110      	movs	r1, #16
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800100e:	f000 fdc1 	bl	8001b94 <HAL_DAC_Start_DMA>
				break;
 8001012:	e008      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0xce>
			default:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, audio, AUDIO_SIZE, DAC_ALIGN_12B_R);
 8001014:	2300      	movs	r3, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	f649 4340 	movw	r3, #40000	; 0x9c40
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800101e:	2110      	movs	r1, #16
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001022:	f000 fdb7 	bl	8001b94 <HAL_DAC_Start_DMA>
			 }
		song_index = (song_index + 1) % 7;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800102e:	fb83 1302 	smull	r1, r3, r3, r2
 8001032:	4413      	add	r3, r2
 8001034:	1099      	asrs	r1, r3, #2
 8001036:	17d3      	asrs	r3, r2, #31
 8001038:	1ac9      	subs	r1, r1, r3
 800103a:	460b      	mov	r3, r1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a5b      	subs	r3, r3, r1
 8001040:	1ad1      	subs	r1, r2, r3
 8001042:	b28a      	uxth	r2, r1
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001046:	801a      	strh	r2, [r3, #0]
	}

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000284 	.word	0x20000284
 8001054:	48000400 	.word	0x48000400
 8001058:	20000238 	.word	0x20000238
 800105c:	20000078 	.word	0x20000078
 8001060:	20027428 	.word	0x20027428
 8001064:	2002742c 	.word	0x2002742c
 8001068:	20027434 	.word	0x20027434
 800106c:	20027440 	.word	0x20027440
 8001070:	20027458 	.word	0x20027458
 8001074:	20027488 	.word	0x20027488
 8001078:	200274e8 	.word	0x200274e8
 800107c:	20000324 	.word	0x20000324
 8001080:	92492493 	.word	0x92492493
 8001084:	00000000 	.word	0x00000000

08001088 <gen_sine>:

void gen_sine(void){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
	float theta = 0.0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
	float val = 0.0;
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SIZE; i++){
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e034      	b.n	800110a <gen_sine+0x82>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 80010a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80010a4:	f004 fa26 	bl	80054f4 <arm_sin_f32>
 80010a8:	ee10 3a10 	vmov	r3, s0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fb35 	bl	800071c <__aeabi_f2d>
 80010b2:	a31d      	add	r3, pc, #116	; (adr r3, 8001128 <gen_sine+0xa0>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8a2 	bl	8000200 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fba2 	bl	800080c <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	607b      	str	r3, [r7, #4]
		sine[i] = (uint16_t)(val + (VALUE_LIMIT/2.0));
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fb25 	bl	800071c <__aeabi_f2d>
 80010d2:	a315      	add	r3, pc, #84	; (adr r3, 8001128 <gen_sine+0xa0>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff f9c2 	bl	8000460 <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fb72 	bl	80007cc <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b299      	uxth	r1, r3
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <gen_sine+0x98>)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		theta += (2*PI)/(SIZE);
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001124 <gen_sine+0x9c>
 80010fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001100:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < SIZE; i++){
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	3301      	adds	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b02      	cmp	r3, #2
 800110e:	ddc7      	ble.n	80010a0 <gen_sine+0x18>
	}
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	2000031c 	.word	0x2000031c
 8001124:	40060a92 	.word	0x40060a92
 8001128:	00000000 	.word	0x00000000
 800112c:	40955400 	.word	0x40955400

08001130 <gen_notes>:

uint16_t* gen_notes(uint16_t size){
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]

	uint16_t *arr = (uint16_t *) malloc(size*sizeof(uint16_t));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fa1e 	bl	8005580 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	60fb      	str	r3, [r7, #12]
	float theta = 0.0;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
	float val = 0.0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < size; i++){
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	e035      	b.n	80011c6 <gen_notes+0x96>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 800115a:	ed97 0a05 	vldr	s0, [r7, #20]
 800115e:	f004 f9c9 	bl	80054f4 <arm_sin_f32>
 8001162:	ee10 3a10 	vmov	r3, s0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fad8 	bl	800071c <__aeabi_f2d>
 800116c:	a31b      	add	r3, pc, #108	; (adr r3, 80011dc <gen_notes+0xac>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff f845 	bl	8000200 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fb45 	bl	800080c <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	60bb      	str	r3, [r7, #8]
		arr[i] = (uint16_t)(val + (VALUE_LIMIT/2.0));
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f7ff fac8 	bl	800071c <__aeabi_f2d>
 800118c:	a313      	add	r3, pc, #76	; (adr r3, 80011dc <gen_notes+0xac>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f965 	bl	8000460 <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	18d4      	adds	r4, r2, r3
 80011a6:	f7ff fb11 	bl	80007cc <__aeabi_d2uiz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	8023      	strh	r3, [r4, #0]
		theta += (2*PI)/(SIZE);
 80011b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d8 <gen_notes+0xa8>
 80011b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011bc:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < size; i++){
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	3301      	adds	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbc5      	blt.n	800115a <gen_notes+0x2a>
	}
	return arr;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	40060a92 	.word	0x40060a92
 80011dc:	00000000 	.word	0x00000000
 80011e0:	40955400 	.word	0x40955400

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a40      	ldr	r2, [pc, #256]	; (8001358 <HAL_DAC_MspInit+0x120>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d17a      	bne.n	8001350 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_DAC_MspInit+0x124>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	4a3f      	ldr	r2, [pc, #252]	; (800135c <HAL_DAC_MspInit+0x124>)
 8001260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001264:	6593      	str	r3, [r2, #88]	; 0x58
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_DAC_MspInit+0x124>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_DAC_MspInit+0x124>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a39      	ldr	r2, [pc, #228]	; (800135c <HAL_DAC_MspInit+0x124>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_DAC_MspInit+0x124>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800128a:	2330      	movs	r3, #48	; 0x30
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fe00 	bl	8002ea4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_DAC_MspInit+0x12c>)
 80012a8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012ac:	2206      	movs	r2, #6
 80012ae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012b2:	2210      	movs	r2, #16
 80012b4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012d4:	2220      	movs	r2, #32
 80012d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012e0:	f001 fb12 	bl	8002908 <HAL_DMA_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80012ea:	f7ff ff7b 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_DAC_MspInit+0x128>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_DAC_MspInit+0x130>)
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_DAC_MspInit+0x134>)
 80012fe:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001302:	2207      	movs	r2, #7
 8001304:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001308:	2210      	movs	r2, #16
 800130a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_DAC_MspInit+0x130>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_DAC_MspInit+0x130>)
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001326:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_DAC_MspInit+0x130>)
 800132a:	2220      	movs	r2, #32
 800132c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001336:	f001 fae7 	bl	8002908 <HAL_DMA_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8001340:	f7ff ff50 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_DAC_MspInit+0x130>)
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_DAC_MspInit+0x130>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40007400 	.word	0x40007400
 800135c:	40021000 	.word	0x40021000
 8001360:	2000008c 	.word	0x2000008c
 8001364:	40020008 	.word	0x40020008
 8001368:	200000ec 	.word	0x200000ec
 800136c:	4002001c 	.word	0x4002001c

08001370 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0ae      	sub	sp, #184	; 0xb8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2294      	movs	r2, #148	; 0x94
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f004 f9a9 	bl	80056e8 <memset>
  if(DFSDM1_Init == 0)
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_DFSDM_FilterMspInit+0x13c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800139e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fec4 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80013ba:	f7ff ff13 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a3a      	ldr	r2, [pc, #232]	; (80014b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80013c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10b      	bne.n	80013e8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d4:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013da:	6613      	str	r3, [r2, #96]	; 0x60
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001400:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800141a:	2306      	movs	r3, #6
 800141c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001420:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001424:	4619      	mov	r1, r3
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <HAL_DFSDM_FilterMspInit+0x148>)
 8001428:	f001 fd3c 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_DFSDM_FilterMspInit+0x13c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_DFSDM_FilterMspInit+0x13c>)
 8001434:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d130      	bne.n	80014a2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel3;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <HAL_DFSDM_FilterMspInit+0x154>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001448:	2256      	movs	r2, #86	; 0x56
 800144a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800146c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800147a:	4811      	ldr	r0, [pc, #68]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800147c:	f001 fa44 	bl	8002908 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8001486:	f7ff fead 	bl	80011e4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80014a2:	bf00      	nop
 80014a4:	37b8      	adds	r7, #184	; 0xb8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200275ac 	.word	0x200275ac
 80014b0:	200275a8 	.word	0x200275a8
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48001000 	.word	0x48001000
 80014bc:	40016100 	.word	0x40016100
 80014c0:	200001d8 	.word	0x200001d8
 80014c4:	40020030 	.word	0x40020030

080014c8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ae      	sub	sp, #184	; 0xb8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	2294      	movs	r2, #148	; 0x94
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 f8fd 	bl	80056e8 <memset>
  if(DFSDM1_Init == 0)
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d14b      	bne.n	800158e <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80014f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fe18 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001512:	f7ff fe67 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_DFSDM_ChannelMspInit+0xd4>)
 800151e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10b      	bne.n	8001540 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	6613      	str	r3, [r2, #96]	; 0x60
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001558:	f44f 7320 	mov.w	r3, #640	; 0x280
 800155c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001572:	2306      	movs	r3, #6
 8001574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001578:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800157c:	4619      	mov	r1, r3
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001580:	f001 fc90 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800158c:	6013      	str	r3, [r2, #0]
  }

}
 800158e:	bf00      	nop
 8001590:	37b8      	adds	r7, #184	; 0xb8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200275ac 	.word	0x200275ac
 800159c:	200275a8 	.word	0x200275a8
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48001000 	.word	0x48001000

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b8:	d114      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201c      	movs	r0, #28
 80015d8:	f000 fa83 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015dc:	201c      	movs	r0, #28
 80015de:	f000 fa9c 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015e2:	e02a      	b.n	800163a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_TIM_Base_MspInit+0xa0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d114      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201d      	movs	r0, #29
 800160c:	f000 fa69 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001610:	201d      	movs	r0, #29
 8001612:	f000 fa82 	bl	8001b1a <HAL_NVIC_EnableIRQ>
}
 8001616:	e010      	b.n	800163a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_TIM_Base_MspInit+0xa4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10b      	bne.n	800163a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_TIM_Base_MspInit+0x9c>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40000400 	.word	0x40000400
 800164c:	40000800 	.word	0x40000800

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f902 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel1_IRQHandler+0x10>)
 80016aa:	f001 faac 	bl	8002c06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000008c 	.word	0x2000008c

080016b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel2_IRQHandler+0x10>)
 80016be:	f001 faa2 	bl	8002c06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000ec 	.word	0x200000ec

080016cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Channel3_IRQHandler+0x10>)
 80016d2:	f001 fa98 	bl	8002c06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001d8 	.word	0x200001d8

080016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM2_IRQHandler+0x10>)
 80016e6:	f003 fb38 	bl	8004d5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000238 	.word	0x20000238

080016f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM3_IRQHandler+0x10>)
 80016fa:	f003 fb2e 	bl	8004d5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000284 	.word	0x20000284

08001708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_Pin);
 800170c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001710:	f001 fd8c 	bl	800322c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f003 ffe6 	bl	8005718 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200a0000 	.word	0x200a0000
 8001778:	00000400 	.word	0x00000400
 800177c:	200275b0 	.word	0x200275b0
 8001780:	20027728 	.word	0x20027728

08001784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ac:	f7ff ffea 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <LoopForever+0xe>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <LoopForever+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d6:	f003 ffa5 	bl	8005724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7ff f867 	bl	80008ac <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017ec:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 80017f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017f4:	20027724 	.word	0x20027724

080017f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_IRQHandler>

080017fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f961 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f80e 	bl	800182c <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e001      	b.n	8001820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181c:	f7ff fce8 	bl	80011f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001820:	79fb      	ldrb	r3, [r7, #7]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_InitTick+0x6c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d023      	beq.n	8001888 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_InitTick+0x70>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_InitTick+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f96d 	bl	8001b36 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d809      	bhi.n	800187c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f000 f937 	bl	8001ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_InitTick+0x74>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e007      	b.n	800188c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e004      	b.n	800188c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	e001      	b.n	800188c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200275b4 	.word	0x200275b4

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200275b4 	.word	0x200275b4

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff29 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff3e 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff31 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e014      	b.n	8001b8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fb61 	bl	8001238 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_DAC_Start_DMA+0x1e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0ab      	b.n	8001d0a <HAL_DAC_Start_DMA+0x176>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d12f      	bne.n	8001c24 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_DAC_Start_DMA+0x180>)
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_DAC_Start_DMA+0x184>)
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_DAC_Start_DMA+0x188>)
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d013      	beq.n	8001c1a <HAL_DAC_Start_DMA+0x86>
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d845      	bhi.n	8001c84 <HAL_DAC_Start_DMA+0xf0>
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_DAC_Start_DMA+0x72>
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d005      	beq.n	8001c10 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001c04:	e03e      	b.n	8001c84 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	613b      	str	r3, [r7, #16]
        break;
 8001c0e:	e03c      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	330c      	adds	r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
        break;
 8001c18:	e037      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3310      	adds	r3, #16
 8001c20:	613b      	str	r3, [r7, #16]
        break;
 8001c22:	e032      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <HAL_DAC_Start_DMA+0x18c>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_DAC_Start_DMA+0x190>)
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_DAC_Start_DMA+0x194>)
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d013      	beq.n	8001c7a <HAL_DAC_Start_DMA+0xe6>
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d817      	bhi.n	8001c88 <HAL_DAC_Start_DMA+0xf4>
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_DAC_Start_DMA+0xd2>
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d005      	beq.n	8001c70 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c64:	e010      	b.n	8001c88 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	613b      	str	r3, [r7, #16]
        break;
 8001c6e:	e00c      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3318      	adds	r3, #24
 8001c76:	613b      	str	r3, [r7, #16]
        break;
 8001c78:	e007      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	331c      	adds	r3, #28
 8001c80:	613b      	str	r3, [r7, #16]
        break;
 8001c82:	e002      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c88:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	f000 fed5 	bl	8002a58 <HAL_DMA_Start_IT>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
 8001cb2:	e010      	b.n	8001cd6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68d8      	ldr	r0, [r3, #12]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f000 fec3 	bl	8002a58 <HAL_DMA_Start_IT>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e005      	b.n	8001d08 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	0800208d 	.word	0x0800208d
 8001d18:	080020af 	.word	0x080020af
 8001d1c:	080020cb 	.word	0x080020cb
 8001d20:	08002135 	.word	0x08002135
 8001d24:	08002157 	.word	0x08002157
 8001d28:	08002173 	.word	0x08002173

08001d2c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2201      	movs	r2, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fee7 	bl	8002b4e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e00c      	b.n	8001dac <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fed9 	bl	8002b4e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001daa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	795b      	ldrb	r3, [r3, #5]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_DAC_ConfigChannel+0x1c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e137      	b.n	8002080 <HAL_DAC_ConfigChannel+0x28c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	f040 8081 	bne.w	8001f28 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001e26:	f7ff fd51 	bl	80018cc <HAL_GetTick>
 8001e2a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d140      	bne.n	8001eb4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e32:	e018      	b.n	8001e66 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e34:	f7ff fd4a 	bl	80018cc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d911      	bls.n	8001e66 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f043 0208 	orr.w	r2, r3, #8
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e10c      	b.n	8002080 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1df      	bne.n	8001e34 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff fd35 	bl	80018e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	69d2      	ldr	r2, [r2, #28]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
 8001e84:	e023      	b.n	8001ece <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e86:	f7ff fd21 	bl	80018cc <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d90f      	bls.n	8001eb4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da0a      	bge.n	8001eb4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f043 0208 	orr.w	r2, r3, #8
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2203      	movs	r2, #3
 8001eae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0e5      	b.n	8002080 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dbe3      	blt.n	8001e86 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fd10 	bl	80018e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	69d2      	ldr	r2, [r2, #28]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	ea02 0103 	and.w	r1, r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	21ff      	movs	r1, #255	; 0xff
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	ea02 0103 	and.w	r1, r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d11d      	bne.n	8001f6c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	4313      	orrs	r3, r2
 8002006:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002010:	d104      	bne.n	800201c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e018      	b.n	800204e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	e00f      	b.n	800204e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800202e:	f001 ffb9 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8002032:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_DAC_ConfigChannel+0x294>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d904      	bls.n	8002046 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e003      	b.n	800204e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800204c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	22c0      	movs	r2, #192	; 0xc0
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43da      	mvns	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	400a      	ands	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	04c4b400 	.word	0x04c4b400

0800208c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff fe8b 	bl	8001db6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	711a      	strb	r2, [r3, #4]
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7ff fe84 	bl	8001dca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fe7a 	bl	8001dde <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	711a      	strb	r2, [r3, #4]
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ffd8 	bl	80020f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	711a      	strb	r2, [r3, #4]
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff ffd1 	bl	800210c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff ffc7 	bl	8002120 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	711a      	strb	r2, [r3, #4]
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0ac      	b.n	800230c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fab6 	bl	8002728 <DFSDM_GetChannelFromInstance>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_DFSDM_ChannelInit+0x174>)
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e09f      	b.n	800230c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff f97b 	bl	80014c8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80021d2:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_DFSDM_ChannelInit+0x178>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a4f      	ldr	r2, [pc, #316]	; (8002318 <HAL_DFSDM_ChannelInit+0x178>)
 80021da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_DFSDM_ChannelInit+0x178>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d125      	bne.n	8002230 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a4c      	ldr	r2, [pc, #304]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 80021ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4948      	ldr	r1, [pc, #288]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a46      	ldr	r2, [pc, #280]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 8002204:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002208:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	3b01      	subs	r3, #1
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	493f      	ldr	r1, [pc, #252]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3c      	ldr	r2, [pc, #240]	; (800231c <HAL_DFSDM_ChannelInit+0x17c>)
 800222a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800223e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800224e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002254:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 020f 	bic.w	r2, r2, #15
 800226c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002294:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 0207 	and.w	r2, r2, #7
 80022c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa14 	bl	8002728 <DFSDM_GetChannelFromInstance>
 8002300:	4602      	mov	r2, r0
 8002302:	4904      	ldr	r1, [pc, #16]	; (8002314 <HAL_DFSDM_ChannelInit+0x174>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200275bc 	.word	0x200275bc
 8002318:	200275b8 	.word	0x200275b8
 800231c:	40016000 	.word	0x40016000

08002320 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0ca      	b.n	80024c8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a66      	ldr	r2, [pc, #408]	; (80024d0 <HAL_DFSDM_FilterInit+0x1b0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d109      	bne.n	8002350 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002340:	2b01      	cmp	r3, #1
 8002342:	d003      	beq.n	800234c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0bb      	b.n	80024c8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff f801 	bl	8001370 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800237c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7a1b      	ldrb	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e007      	b.n	80023a8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023a6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7a5b      	ldrb	r3, [r3, #9]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023e0:	f023 0308 	bic.w	r3, r3, #8
 80023e4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d108      	bne.n	8002400 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7c1b      	ldrb	r3, [r3, #16]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0210 	orr.w	r2, r2, #16
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0210 	bic.w	r2, r2, #16
 8002428:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7c5b      	ldrb	r3, [r3, #17]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0220 	bic.w	r2, r2, #32
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002462:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002466:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6959      	ldr	r1, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800247a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002482:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7c1a      	ldrb	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40016100 	.word	0x40016100

080024d4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80024f4:	2bff      	cmp	r3, #255	; 0xff
 80024f6:	d029      	beq.n	800254c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e00a      	b.n	8002544 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
 800254a:	e001      	b.n	8002550 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
 8002580:	e064      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002590:	d002      	beq.n	8002598 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
 8002596:	e059      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10e      	bne.n	80025be <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
 80025bc:	e046      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d102      	bne.n	80025de <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	e036      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d004      	beq.n	80025f2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d12a      	bne.n	8002648 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002608:	2b20      	cmp	r3, #32
 800260a:	d101      	bne.n	8002610 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800260e:	e000      	b.n	8002612 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002610:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	331c      	adds	r3, #28
 8002622:	4619      	mov	r1, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f000 fa16 	bl	8002a58 <HAL_DMA_Start_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800263e:	e005      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8bd 	bl	80027c0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002646:	e001      	b.n	800264c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	080026e9 	.word	0x080026e9
 800265c:	08002705 	.word	0x08002705
 8002660:	080026cd 	.word	0x080026cd

08002664 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002676:	2b02      	cmp	r3, #2
 8002678:	d007      	beq.n	800268a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002680:	2b04      	cmp	r3, #4
 8002682:	d002      	beq.n	800268a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e007      	b.n	800269a <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa5d 	bl	8002b4e <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8e9 	bl	800286c <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff ffe2 	bl	80026a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7fe fbe2 	bl	8000ec0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2203      	movs	r2, #3
 8002716:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff ffcd 	bl	80026b8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e02b      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <DFSDM_GetChannelFromInstance+0x80>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d102      	bne.n	800274c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e024      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <DFSDM_GetChannelFromInstance+0x84>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d102      	bne.n	800275a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002754:	2302      	movs	r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e01d      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <DFSDM_GetChannelFromInstance+0x88>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d102      	bne.n	8002768 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002762:	2304      	movs	r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e016      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d102      	bne.n	8002776 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002770:	2305      	movs	r3, #5
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e00f      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <DFSDM_GetChannelFromInstance+0x90>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d102      	bne.n	8002784 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800277e:	2306      	movs	r3, #6
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e008      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <DFSDM_GetChannelFromInstance+0x94>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800278c:	2307      	movs	r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e001      	b.n	8002796 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002792:	2303      	movs	r3, #3
 8002794:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40016000 	.word	0x40016000
 80027a8:	40016020 	.word	0x40016020
 80027ac:	40016040 	.word	0x40016040
 80027b0:	40016080 	.word	0x40016080
 80027b4:	400160a0 	.word	0x400160a0
 80027b8:	400160c0 	.word	0x400160c0
 80027bc:	400160e0 	.word	0x400160e0

080027c0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e033      	b.n	800284a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002800:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002818:	2b03      	cmp	r3, #3
 800281a:	d116      	bne.n	800284a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0202 	orr.w	r2, r2, #2
 8002832:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <DFSDM_RegConvStart+0x84>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	e000      	b.n	8002846 <DFSDM_RegConvStart+0x86>
 8002844:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <DFSDM_RegConvStart+0x98>
 8002854:	2202      	movs	r2, #2
 8002856:	e000      	b.n	800285a <DFSDM_RegConvStart+0x9a>
 8002858:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d116      	bne.n	80028e4 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0202 	orr.w	r2, r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <DFSDM_RegConvStop+0x72>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	e000      	b.n	80028e0 <DFSDM_RegConvStop+0x74>
 80028de:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d101      	bne.n	80028f2 <DFSDM_RegConvStop+0x86>
 80028ee:	2201      	movs	r2, #1
 80028f0:	e000      	b.n	80028f4 <DFSDM_RegConvStop+0x88>
 80028f2:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e08d      	b.n	8002a36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_DMA_Init+0x138>)
 8002922:	429a      	cmp	r2, r3
 8002924:	d80f      	bhi.n	8002946 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <HAL_DMA_Init+0x13c>)
 800292e:	4413      	add	r3, r2
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <HAL_DMA_Init+0x140>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a42      	ldr	r2, [pc, #264]	; (8002a4c <HAL_DMA_Init+0x144>)
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
 8002944:	e00e      	b.n	8002964 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_DMA_Init+0x148>)
 800294e:	4413      	add	r3, r2
 8002950:	4a3d      	ldr	r2, [pc, #244]	; (8002a48 <HAL_DMA_Init+0x140>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <HAL_DMA_Init+0x14c>)
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa12 	bl	8002de0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c4:	d102      	bne.n	80029cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_DMA_Init+0x104>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d80c      	bhi.n	8002a0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa32 	bl	8002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e008      	b.n	8002a1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40020407 	.word	0x40020407
 8002a44:	bffdfff8 	.word	0xbffdfff8
 8002a48:	cccccccd 	.word	0xcccccccd
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	bffdfbf8 	.word	0xbffdfbf8
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_DMA_Start_IT+0x20>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e066      	b.n	8002b46 <HAL_DMA_Start_IT+0xee>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d155      	bne.n	8002b38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f957 	bl	8002d64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 020e 	orr.w	r2, r2, #14
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e00f      	b.n	8002af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 020a 	orr.w	r2, r2, #10
 8002aee:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e005      	b.n	8002b44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
 8002b42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d008      	beq.n	8002b78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e040      	b.n	8002bfa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 020e 	bic.w	r2, r2, #14
 8002b86:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b96:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f003 021c 	and.w	r2, r3, #28
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002be6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f003 031c 	and.w	r3, r3, #28
 8002c26:	2204      	movs	r2, #4
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d026      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x7a>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d021      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0204 	bic.w	r2, r2, #4
 8002c58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 021c 	and.w	r2, r3, #28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2104      	movs	r1, #4
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d071      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c7e:	e06c      	b.n	8002d5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	f003 031c 	and.w	r3, r3, #28
 8002c88:	2202      	movs	r2, #2
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02e      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xec>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d029      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 020a 	bic.w	r2, r2, #10
 8002cba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	f003 021c 	and.w	r2, r3, #28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d038      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cf0:	e033      	b.n	8002d5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f003 031c 	and.w	r3, r3, #28
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x156>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d025      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f003 021c 	and.w	r2, r3, #28
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
}
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d8c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 021c 	and.w	r2, r3, #28
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d108      	bne.n	8002dc4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dc2:	e007      	b.n	8002dd4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d80a      	bhi.n	8002e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e00:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6493      	str	r3, [r2, #72]	; 0x48
 8002e08:	e007      	b.n	8002e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e14:	4413      	add	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3b08      	subs	r3, #8
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40020407 	.word	0x40020407
 8002e50:	4002081c 	.word	0x4002081c
 8002e54:	cccccccd 	.word	0xcccccccd
 8002e58:	40020880 	.word	0x40020880

08002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e7e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	1000823f 	.word	0x1000823f
 8002ea0:	40020940 	.word	0x40020940

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb2:	e166      	b.n	8003182 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8158 	beq.w	800317c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_GPIO_Init+0x40>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d130      	bne.n	8002f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0201 	and.w	r2, r3, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80b2 	beq.w	800317c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <HAL_GPIO_Init+0x2fc>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	4a60      	ldr	r2, [pc, #384]	; (80031a0 <HAL_GPIO_Init+0x2fc>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6613      	str	r3, [r2, #96]	; 0x60
 8003024:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <HAL_GPIO_Init+0x2fc>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003030:	4a5c      	ldr	r2, [pc, #368]	; (80031a4 <HAL_GPIO_Init+0x300>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800305a:	d02b      	beq.n	80030b4 <HAL_GPIO_Init+0x210>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a52      	ldr	r2, [pc, #328]	; (80031a8 <HAL_GPIO_Init+0x304>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d025      	beq.n	80030b0 <HAL_GPIO_Init+0x20c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a51      	ldr	r2, [pc, #324]	; (80031ac <HAL_GPIO_Init+0x308>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01f      	beq.n	80030ac <HAL_GPIO_Init+0x208>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <HAL_GPIO_Init+0x30c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d019      	beq.n	80030a8 <HAL_GPIO_Init+0x204>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a4f      	ldr	r2, [pc, #316]	; (80031b4 <HAL_GPIO_Init+0x310>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <HAL_GPIO_Init+0x200>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_GPIO_Init+0x314>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00d      	beq.n	80030a0 <HAL_GPIO_Init+0x1fc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a4d      	ldr	r2, [pc, #308]	; (80031bc <HAL_GPIO_Init+0x318>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <HAL_GPIO_Init+0x1f8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a4c      	ldr	r2, [pc, #304]	; (80031c0 <HAL_GPIO_Init+0x31c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_GPIO_Init+0x1f4>
 8003094:	2307      	movs	r3, #7
 8003096:	e00e      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 8003098:	2308      	movs	r3, #8
 800309a:	e00c      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 800309c:	2306      	movs	r3, #6
 800309e:	e00a      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030a0:	2305      	movs	r3, #5
 80030a2:	e008      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e004      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_GPIO_Init+0x212>
 80030b4:	2300      	movs	r3, #0
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	4093      	lsls	r3, r2
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030c6:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_GPIO_Init+0x300>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030d4:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_GPIO_Init+0x320>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030f8:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <HAL_GPIO_Init+0x320>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_GPIO_Init+0x320>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003122:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <HAL_GPIO_Init+0x320>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_GPIO_Init+0x320>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_GPIO_Init+0x320>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_GPIO_Init+0x320>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_GPIO_Init+0x320>)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f ae91 	bne.w	8002eb4 <HAL_GPIO_Init+0x10>
  }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010000 	.word	0x40010000
 80031a8:	48000400 	.word	0x48000400
 80031ac:	48000800 	.word	0x48000800
 80031b0:	48000c00 	.word	0x48000c00
 80031b4:	48001000 	.word	0x48001000
 80031b8:	48001400 	.word	0x48001400
 80031bc:	48001800 	.word	0x48001800
 80031c0:	48001c00 	.word	0x48001c00
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43d9      	mvns	r1, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	400b      	ands	r3, r1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fe10 	bl	8000e70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d102      	bne.n	8003274 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003272:	e00b      	b.n	800328c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	d102      	bne.n	800328a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003288:	e000      	b.n	800328c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800328a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d141      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d131      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d0:	4a41      	ldr	r2, [pc, #260]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032d8:	4b40      	ldr	r3, [pc, #256]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2232      	movs	r2, #50	; 0x32
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9b      	lsrs	r3, r3, #18
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ee:	e002      	b.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d102      	bne.n	800330a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f2      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003316:	d158      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e057      	b.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003322:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800332c:	e04d      	b.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d141      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d131      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335c:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2232      	movs	r2, #50	; 0x32
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337a:	e002      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	d102      	bne.n	8003396 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f2      	bne.n	800337c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d112      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e011      	b.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033b8:	e007      	b.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40007000 	.word	0x40007000
 80033dc:	20000000 	.word	0x20000000
 80033e0:	431bde83 	.word	0x431bde83

080033e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f000 bc08 	b.w	8003c08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f8:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003402:	4b94      	ldr	r3, [pc, #592]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80e4 	beq.w	80035e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_RCC_OscConfig+0x4c>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	f040 808b 	bne.w	800353e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 8087 	bne.w	800353e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003430:	4b88      	ldr	r3, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x64>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e3df      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_RCC_OscConfig+0x7e>
 8003458:	4b7e      	ldr	r3, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	e005      	b.n	800346e <HAL_RCC_OscConfig+0x8a>
 8003462:	4b7c      	ldr	r3, [pc, #496]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	4293      	cmp	r3, r2
 8003470:	d223      	bcs.n	80034ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fda0 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e3c0      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a72      	ldr	r2, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b70      	ldr	r3, [pc, #448]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	496d      	ldr	r1, [pc, #436]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a4:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	4968      	ldr	r1, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e025      	b.n	8003506 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034c0:	f043 0308 	orr.w	r3, r3, #8
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4960      	ldr	r1, [pc, #384]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d8:	4b5e      	ldr	r3, [pc, #376]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	495b      	ldr	r1, [pc, #364]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fd60 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e380      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003506:	f000 fcc1 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 800350a:	4602      	mov	r2, r0
 800350c:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4950      	ldr	r1, [pc, #320]	; (8003658 <HAL_RCC_OscConfig+0x274>)
 8003518:	5ccb      	ldrb	r3, [r1, r3]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a4e      	ldr	r2, [pc, #312]	; (800365c <HAL_RCC_OscConfig+0x278>)
 8003524:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003526:	4b4e      	ldr	r3, [pc, #312]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe f97e 	bl	800182c <HAL_InitTick>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d052      	beq.n	80035e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	e364      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d032      	beq.n	80035ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003546:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003552:	f7fe f9bb 	bl	80018cc <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800355a:	f7fe f9b7 	bl	80018cc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e34d      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800357e:	f043 0308 	orr.w	r3, r3, #8
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4930      	ldr	r1, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	492b      	ldr	r1, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 80035aa:	e01a      	b.n	80035e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a28      	ldr	r2, [pc, #160]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b8:	f7fe f988 	bl	80018cc <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c0:	f7fe f984 	bl	80018cc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e31a      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1dc>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d073      	beq.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x21c>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d10e      	bne.n	8003618 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d10b      	bne.n	8003618 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d063      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2f0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d15f      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e2f7      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x24c>
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e025      	b.n	800367c <HAL_RCC_OscConfig+0x298>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003638:	d114      	bne.n	8003664 <HAL_RCC_OscConfig+0x280>
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a02      	ldr	r2, [pc, #8]	; (8003654 <HAL_RCC_OscConfig+0x270>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e013      	b.n	800367c <HAL_RCC_OscConfig+0x298>
 8003654:	40021000 	.word	0x40021000
 8003658:	08005788 	.word	0x08005788
 800365c:	20000000 	.word	0x20000000
 8003660:	20000004 	.word	0x20000004
 8003664:	4ba0      	ldr	r3, [pc, #640]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a9f      	ldr	r2, [pc, #636]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b9d      	ldr	r3, [pc, #628]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a9c      	ldr	r2, [pc, #624]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f922 	bl	80018cc <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe f91e 	bl	80018cc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e2b4      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	4b92      	ldr	r3, [pc, #584]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x2a8>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe f90e 	bl	80018cc <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe f90a 	bl	80018cc <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e2a0      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2d0>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d060      	beq.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_OscConfig+0x310>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d119      	bne.n	8003722 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d116      	bne.n	8003722 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f4:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x328>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e27d      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	4973      	ldr	r1, [pc, #460]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003720:	e040      	b.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d023      	beq.n	8003772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe f8c9 	bl	80018cc <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe f8c5 	bl	80018cc <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e25b      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b62      	ldr	r3, [pc, #392]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	495f      	ldr	r1, [pc, #380]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
 8003770:	e018      	b.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003772:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fe f8a5 	bl	80018cc <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fe f8a1 	bl	80018cc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e237      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03c      	beq.n	800382a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe f880 	bl	80018cc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe f87c 	bl	80018cc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e212      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ef      	beq.n	80037d0 <HAL_RCC_OscConfig+0x3ec>
 80037f0:	e01b      	b.n	800382a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f8:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fe f863 	bl	80018cc <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fe f85f 	bl	80018cc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1f5      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ef      	bne.n	800380a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80a6 	beq.w	8003984 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003860:	2301      	movs	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_OscConfig+0x508>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <HAL_RCC_OscConfig+0x508>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_RCC_OscConfig+0x508>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387c:	f7fe f826 	bl	80018cc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fe f822 	bl	80018cc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1b8      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_RCC_OscConfig+0x508>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x4d8>
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ba:	e029      	b.n	8003910 <HAL_RCC_OscConfig+0x52c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d115      	bne.n	80038f0 <HAL_RCC_OscConfig+0x50c>
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e4:	e014      	b.n	8003910 <HAL_RCC_OscConfig+0x52c>
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	4b9d      	ldr	r3, [pc, #628]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a9c      	ldr	r2, [pc, #624]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003900:	4b99      	ldr	r3, [pc, #612]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a98      	ldr	r2, [pc, #608]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd ffd8 	bl	80018cc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fd ffd4 	bl	80018cc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e168      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ed      	beq.n	8003920 <HAL_RCC_OscConfig+0x53c>
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fd ffc1 	bl	80018cc <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd ffbd 	bl	80018cc <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e151      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003964:	4b80      	ldr	r3, [pc, #512]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ed      	bne.n	800394e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003972:	7ffb      	ldrb	r3, [r7, #31]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b7b      	ldr	r3, [pc, #492]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	4a7a      	ldr	r2, [pc, #488]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003998:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800399e:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd ff90 	bl	80018cc <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b0:	f7fd ff8c 	bl	80018cc <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e122      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039c2:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80039c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <HAL_RCC_OscConfig+0x5cc>
 80039d0:	e01b      	b.n	8003a0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80039d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d8:	4a63      	ldr	r2, [pc, #396]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd ff73 	bl	80018cc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ea:	f7fd ff6f 	bl	80018cc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e105      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039fc:	4b5a      	ldr	r3, [pc, #360]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 80039fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ef      	bne.n	80039ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80f9 	beq.w	8003c06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f040 80cf 	bne.w	8003bbc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a1e:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0203 	and.w	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d12c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d123      	bne.n	8003a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d11b      	bne.n	8003a8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d113      	bne.n	8003a8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	3b01      	subs	r3, #1
 8003a72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d109      	bne.n	8003a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d071      	beq.n	8003b70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d068      	beq.n	8003b64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a92:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a9e:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0ac      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aba:	f7fd ff07 	bl	80018cc <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd ff03 	bl	80018cc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e099      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_RCC_OscConfig+0x788>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003afa:	0212      	lsls	r2, r2, #8
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b02:	0852      	lsrs	r2, r2, #1
 8003b04:	3a01      	subs	r2, #1
 8003b06:	0552      	lsls	r2, r2, #21
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b1a:	06d2      	lsls	r2, r2, #27
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	4912      	ldr	r1, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b3c:	f7fd fec6 	bl	80018cc <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fec2 	bl	80018cc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e058      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_OscConfig+0x784>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b62:	e050      	b.n	8003c06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e04f      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d144      	bne.n	8003c06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b94:	f7fd fe9a 	bl	80018cc <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fe96 	bl	80018cc <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e02c      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x7b8>
 8003bba:	e024      	b.n	8003c06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d01f      	beq.n	8003c02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fe7d 	bl	80018cc <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fd fe79 	bl	80018cc <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e00f      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	4905      	ldr	r1, [pc, #20]	; (8003c10 <HAL_RCC_OscConfig+0x82c>)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x830>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60cb      	str	r3, [r1, #12]
 8003c00:	e001      	b.n	8003c06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	feeefffc 	.word	0xfeeefffc

08003c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e11d      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b90      	ldr	r3, [pc, #576]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	498b      	ldr	r1, [pc, #556]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e105      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d908      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b7e      	ldr	r3, [pc, #504]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	497b      	ldr	r1, [pc, #492]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d079      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d11e      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0dc      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003cb2:	f000 f9dd 	bl	8004070 <RCC_GetSysClockFreqFromPLLSource>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a70      	ldr	r2, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d946      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d140      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cca:	4b6b      	ldr	r3, [pc, #428]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e035      	b.n	8003d4c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce8:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d115      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0b9      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d00:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0ad      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0a5      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d20:	f000 f8b4 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a55      	ldr	r2, [pc, #340]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d90f      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d2c:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d40:	4a4d      	ldr	r2, [pc, #308]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 0203 	bic.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4947      	ldr	r1, [pc, #284]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fd fdb5 	bl	80018cc <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d66:	f7fd fdb1 	bl	80018cc <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e077      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7c:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 020c 	and.w	r2, r3, #12
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d1eb      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d105      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d94:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d208      	bcs.n	8003dce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	492b      	ldr	r1, [pc, #172]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d210      	bcs.n	8003dfe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 020f 	bic.w	r2, r3, #15
 8003de4:	4923      	ldr	r1, [pc, #140]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCC_ClockConfig+0x25c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e036      	b.n	8003e6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4918      	ldr	r1, [pc, #96]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4910      	ldr	r1, [pc, #64]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e3c:	f000 f826 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	490c      	ldr	r1, [pc, #48]	; (8003e80 <HAL_RCC_ClockConfig+0x268>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x26c>)
 8003e5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd fce3 	bl	800182c <HAL_InitTick>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40022000 	.word	0x40022000
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	04c4b400 	.word	0x04c4b400
 8003e80:	08005788 	.word	0x08005788
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d121      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11e      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e005      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d134      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0xac>
 8003f30:	e005      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f34:	617b      	str	r3, [r7, #20]
      break;
 8003f36:	e005      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3a:	617b      	str	r3, [r7, #20]
      break;
 8003f3c:	e002      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	617b      	str	r3, [r7, #20]
      break;
 8003f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3301      	adds	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	fb03 f202 	mul.w	r2, r3, r2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	0e5b      	lsrs	r3, r3, #25
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	3301      	adds	r3, #1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f84:	69bb      	ldr	r3, [r7, #24]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3724      	adds	r7, #36	; 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08005798 	.word	0x08005798
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	007a1200 	.word	0x007a1200

08003fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000000 	.word	0x20000000

08003fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff f942 	bl	800325c <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
 8003fda:	e014      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff4:	f7ff f932 	bl	800325c <HAL_PWREx_GetVoltageRange>
 8003ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d10b      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d913      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2ba0      	cmp	r3, #160	; 0xa0
 8004018:	d902      	bls.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800401a:	2302      	movs	r3, #2
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e00d      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004020:	2301      	movs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e00a      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b7f      	cmp	r3, #127	; 0x7f
 800402a:	d902      	bls.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800402c:	2302      	movs	r3, #2
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e004      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d101      	bne.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 020f 	bic.w	r2, r3, #15
 8004044:	4909      	ldr	r1, [pc, #36]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40022000 	.word	0x40022000

08004070 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d00b      	beq.n	800409e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d825      	bhi.n	80040d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d008      	beq.n	80040a4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11f      	bne.n	80040d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800409a:	613b      	str	r3, [r7, #16]
    break;
 800409c:	e01f      	b.n	80040de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80040a0:	613b      	str	r3, [r7, #16]
    break;
 80040a2:	e01c      	b.n	80040de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e005      	b.n	80040cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80040cc:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	613b      	str	r3, [r7, #16]
    break;
 80040d6:	e002      	b.n	80040de <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
    break;
 80040dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	3301      	adds	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	fb03 f202 	mul.w	r2, r3, r2
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0e5b      	lsrs	r3, r3, #25
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800411e:	683b      	ldr	r3, [r7, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40021000 	.word	0x40021000
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200
 8004138:	08005798 	.word	0x08005798

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004144:	2300      	movs	r3, #0
 8004146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004148:	2300      	movs	r3, #0
 800414a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004154:	2b00      	cmp	r3, #0
 8004156:	d040      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d02a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d825      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004164:	2b60      	cmp	r3, #96	; 0x60
 8004166:	d026      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d821      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d006      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d81d      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d010      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800417c:	e018      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800417e:	4b89      	ldr	r3, [pc, #548]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a88      	ldr	r2, [pc, #544]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418a:	e015      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fb02 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3320      	adds	r3, #32
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fbed 	bl	8004984 <RCCEx_PLLSAI2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	74fb      	strb	r3, [r7, #19]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80041b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041be:	4b79      	ldr	r3, [pc, #484]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041cc:	4975      	ldr	r1, [pc, #468]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041d4:	e001      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d047      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ee:	d030      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d82a      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041fa:	d02a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004200:	d824      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420c:	d81e      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d010      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004218:	e018      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800421a:	4b62      	ldr	r3, [pc, #392]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004226:	e015      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fab4 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004238:	e00c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3320      	adds	r3, #32
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fb9f 	bl	8004984 <RCCEx_PLLSAI2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	74fb      	strb	r3, [r7, #19]
      break;
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800425a:	4b52      	ldr	r3, [pc, #328]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	494e      	ldr	r1, [pc, #312]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004270:	e001      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 809f 	beq.w	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004288:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004298:	2300      	movs	r3, #0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	; 0x58
 80042aa:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b6:	2301      	movs	r3, #1
 80042b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3a      	ldr	r2, [pc, #232]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c6:	f7fd fb01 	bl	80018cc <HAL_GetTick>
 80042ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042cc:	e009      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7fd fafd 	bl	80018cc <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d902      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	74fb      	strb	r3, [r7, #19]
        break;
 80042e0:	e005      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d15b      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01f      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	429a      	cmp	r2, r3
 8004310:	d019      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004312:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800433e:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d016      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fabc 	bl	80018cc <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004356:	e00b      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fd fab8 	bl	80018cc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d902      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	74fb      	strb	r3, [r7, #19]
            break;
 800436e:	e006      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0ec      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	74bb      	strb	r3, [r7, #18]
 80043a2:	e005      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b0:	7c7b      	ldrb	r3, [r7, #17]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d105      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b6:	4ba0      	ldr	r3, [pc, #640]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	4a9f      	ldr	r2, [pc, #636]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ce:	4b9a      	ldr	r3, [pc, #616]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f023 0203 	bic.w	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	4996      	ldr	r1, [pc, #600]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043f0:	4b91      	ldr	r3, [pc, #580]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 020c 	bic.w	r2, r3, #12
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	498e      	ldr	r1, [pc, #568]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004412:	4b89      	ldr	r3, [pc, #548]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	4985      	ldr	r1, [pc, #532]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004434:	4b80      	ldr	r3, [pc, #512]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	497d      	ldr	r1, [pc, #500]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004456:	4b78      	ldr	r3, [pc, #480]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004464:	4974      	ldr	r1, [pc, #464]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	496c      	ldr	r1, [pc, #432]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a8:	4963      	ldr	r1, [pc, #396]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044bc:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ca:	495b      	ldr	r1, [pc, #364]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044de:	4b56      	ldr	r3, [pc, #344]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	4952      	ldr	r1, [pc, #328]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	494a      	ldr	r1, [pc, #296]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004522:	4b45      	ldr	r3, [pc, #276]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	4941      	ldr	r1, [pc, #260]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	4939      	ldr	r1, [pc, #228]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004566:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	4930      	ldr	r1, [pc, #192]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004584:	d106      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004586:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	e011      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f8f9 	bl	800479c <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d108      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045de:	e012      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045e0:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fe:	490e      	ldr	r1, [pc, #56]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460e:	d106      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461a:	60d3      	str	r3, [r2, #12]
 800461c:	e020      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004626:	d109      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a02      	ldr	r2, [pc, #8]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004632:	60d3      	str	r3, [r2, #12]
 8004634:	e014      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004644:	d10c      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f8a5 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d028      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466c:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	4947      	ldr	r1, [pc, #284]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800468a:	d106      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a41      	ldr	r2, [pc, #260]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
 8004698:	e011      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a2:	d10c      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f876 	bl	800479c <RCCEx_PLLSAI1_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01e      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ca:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046da:	492f      	ldr	r1, [pc, #188]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f851 	bl	800479c <RCCEx_PLLSAI1_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004714:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471a:	f023 0204 	bic.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004724:	491c      	ldr	r1, [pc, #112]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004738:	4b17      	ldr	r3, [pc, #92]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800473e:	f023 0218 	bic.w	r2, r3, #24
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	4913      	ldr	r1, [pc, #76]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	490a      	ldr	r1, [pc, #40]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800478c:	7cbb      	ldrb	r3, [r7, #18]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047aa:	4b72      	ldr	r3, [pc, #456]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047b6:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d103      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d142      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e03f      	b.n	8004854 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d018      	beq.n	800480e <RCCEx_PLLSAI1_Config+0x72>
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d825      	bhi.n	800482c <RCCEx_PLLSAI1_Config+0x90>
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <RCCEx_PLLSAI1_Config+0x4e>
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d009      	beq.n	80047fc <RCCEx_PLLSAI1_Config+0x60>
 80047e8:	e020      	b.n	800482c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fa:	e01a      	b.n	8004832 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047fc:	4b5d      	ldr	r3, [pc, #372]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480c:	e013      	b.n	8004836 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800481a:	4b56      	ldr	r3, [pc, #344]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800482a:	e006      	b.n	800483a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e004      	b.n	800483c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800483a:	bf00      	nop
    }

    if(status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004842:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4949      	ldr	r1, [pc, #292]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8086 	bne.w	8004968 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a44      	ldr	r2, [pc, #272]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fd f830 	bl	80018cc <HAL_GetTick>
 800486c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800486e:	e009      	b.n	8004884 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004870:	f7fd f82c 	bl	80018cc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d902      	bls.n	8004884 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	73fb      	strb	r3, [r7, #15]
        break;
 8004882:	e005      	b.n	8004890 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ef      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d168      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d113      	bne.n	80048c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6892      	ldr	r2, [r2, #8]
 80048a8:	0211      	lsls	r1, r2, #8
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68d2      	ldr	r2, [r2, #12]
 80048ae:	06d2      	lsls	r2, r2, #27
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6852      	ldr	r2, [r2, #4]
 80048b6:	3a01      	subs	r2, #1
 80048b8:	0112      	lsls	r2, r2, #4
 80048ba:	430a      	orrs	r2, r1
 80048bc:	492d      	ldr	r1, [pc, #180]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
 80048c2:	e02d      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d115      	bne.n	80048f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ca:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	0211      	lsls	r1, r2, #8
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6912      	ldr	r2, [r2, #16]
 80048dc:	0852      	lsrs	r2, r2, #1
 80048de:	3a01      	subs	r2, #1
 80048e0:	0552      	lsls	r2, r2, #21
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0112      	lsls	r2, r2, #4
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4921      	ldr	r1, [pc, #132]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]
 80048f4:	e014      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6892      	ldr	r2, [r2, #8]
 8004902:	0211      	lsls	r1, r2, #8
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6952      	ldr	r2, [r2, #20]
 8004908:	0852      	lsrs	r2, r2, #1
 800490a:	3a01      	subs	r2, #1
 800490c:	0652      	lsls	r2, r2, #25
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6852      	ldr	r2, [r2, #4]
 8004914:	3a01      	subs	r2, #1
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	430a      	orrs	r2, r1
 800491a:	4916      	ldr	r1, [pc, #88]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800492a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fc ffce 	bl	80018cc <HAL_GetTick>
 8004930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004932:	e009      	b.n	8004948 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004934:	f7fc ffca 	bl	80018cc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d902      	bls.n	8004948 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	73fb      	strb	r3, [r7, #15]
          break;
 8004946:	e005      	b.n	8004954 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0ef      	beq.n	8004934 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4904      	ldr	r1, [pc, #16]	; (8004974 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	07ff800f 	.word	0x07ff800f
 800497c:	ff9f800f 	.word	0xff9f800f
 8004980:	f9ff800f 	.word	0xf9ff800f

08004984 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004992:	4b72      	ldr	r3, [pc, #456]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800499e:	4b6f      	ldr	r3, [pc, #444]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d103      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
       ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d142      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e03f      	b.n	8004a3c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d018      	beq.n	80049f6 <RCCEx_PLLSAI2_Config+0x72>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d825      	bhi.n	8004a14 <RCCEx_PLLSAI2_Config+0x90>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d002      	beq.n	80049d2 <RCCEx_PLLSAI2_Config+0x4e>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d009      	beq.n	80049e4 <RCCEx_PLLSAI2_Config+0x60>
 80049d0:	e020      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049d2:	4b62      	ldr	r3, [pc, #392]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11d      	bne.n	8004a1a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e2:	e01a      	b.n	8004a1a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e4:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e013      	b.n	8004a1e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f6:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a02:	4b56      	ldr	r3, [pc, #344]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e004      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4949      	ldr	r1, [pc, #292]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8086 	bne.w	8004b50 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a44      	ldr	r2, [pc, #272]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fc ff3c 	bl	80018cc <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a58:	f7fc ff38 	bl	80018cc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ef      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d168      	bne.n	8004b50 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d113      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6892      	ldr	r2, [r2, #8]
 8004a90:	0211      	lsls	r1, r2, #8
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68d2      	ldr	r2, [r2, #12]
 8004a96:	06d2      	lsls	r2, r2, #27
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6852      	ldr	r2, [r2, #4]
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	492d      	ldr	r1, [pc, #180]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	614b      	str	r3, [r1, #20]
 8004aaa:	e02d      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d115      	bne.n	8004ade <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	0211      	lsls	r1, r2, #8
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6912      	ldr	r2, [r2, #16]
 8004ac4:	0852      	lsrs	r2, r2, #1
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	0552      	lsls	r2, r2, #21
 8004aca:	4311      	orrs	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6852      	ldr	r2, [r2, #4]
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4921      	ldr	r1, [pc, #132]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	614b      	str	r3, [r1, #20]
 8004adc:	e014      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ade:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	0211      	lsls	r1, r2, #8
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6952      	ldr	r2, [r2, #20]
 8004af0:	0852      	lsrs	r2, r2, #1
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0652      	lsls	r2, r2, #25
 8004af6:	4311      	orrs	r1, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6852      	ldr	r2, [r2, #4]
 8004afc:	3a01      	subs	r2, #1
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	430a      	orrs	r2, r1
 8004b02:	4916      	ldr	r1, [pc, #88]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fc feda 	bl	80018cc <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b1a:	e009      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b1c:	f7fc fed6 	bl	80018cc <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d902      	bls.n	8004b30 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b2e:	e005      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ef      	beq.n	8004b1c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	4904      	ldr	r1, [pc, #16]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	07ff800f 	.word	0x07ff800f
 8004b64:	ff9f800f 	.word	0xff9f800f
 8004b68:	f9ff800f 	.word	0xf9ff800f

08004b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e049      	b.n	8004c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fd08 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f000 fac8 	bl	8005140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04f      	b.n	8004cd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d018      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d115      	bne.n	8004cbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d015      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d011      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e008      	b.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e000      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40013400 	.word	0x40013400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <HAL_TIM_Base_Stop_IT+0x48>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_Base_Stop_IT+0x48>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01b      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0202 	mvn.w	r2, #2
 8004d8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f9ad 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004daa:	e005      	b.n	8004db8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f99f 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9b0 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d020      	beq.n	8004e0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0204 	mvn.w	r2, #4
 8004dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f987 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f979 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f98a 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01b      	beq.n	8004e56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0208 	mvn.w	r2, #8
 8004e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f961 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004e42:	e005      	b.n	8004e50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f953 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f964 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01b      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0210 	mvn.w	r2, #16
 8004e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2208      	movs	r2, #8
 8004e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f93b 	bl	8005104 <HAL_TIM_IC_CaptureCallback>
 8004e8e:	e005      	b.n	8004e9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f92d 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f93e 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f06f 0201 	mvn.w	r2, #1
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc f849 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 faf1 	bl	80054cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fae9 	bl	80054e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8fd 	bl	800512c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0220 	mvn.w	r2, #32
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fab1 	bl	80054b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_ConfigClockSource+0x1c>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0b6      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x18a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb6:	d03e      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0xd8>
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	f200 8087 	bhi.w	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc4:	f000 8086 	beq.w	80050d4 <HAL_TIM_ConfigClockSource+0x176>
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d87f      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fce:	2b70      	cmp	r3, #112	; 0x70
 8004fd0:	d01a      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0xaa>
 8004fd2:	2b70      	cmp	r3, #112	; 0x70
 8004fd4:	d87b      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fd6:	2b60      	cmp	r3, #96	; 0x60
 8004fd8:	d050      	beq.n	800507c <HAL_TIM_ConfigClockSource+0x11e>
 8004fda:	2b60      	cmp	r3, #96	; 0x60
 8004fdc:	d877      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fde:	2b50      	cmp	r3, #80	; 0x50
 8004fe0:	d03c      	beq.n	800505c <HAL_TIM_ConfigClockSource+0xfe>
 8004fe2:	2b50      	cmp	r3, #80	; 0x50
 8004fe4:	d873      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d058      	beq.n	800509c <HAL_TIM_ConfigClockSource+0x13e>
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d86f      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004fee:	2b30      	cmp	r3, #48	; 0x30
 8004ff0:	d064      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x15e>
 8004ff2:	2b30      	cmp	r3, #48	; 0x30
 8004ff4:	d86b      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d060      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x15e>
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d867      	bhi.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d05c      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x15e>
 8005002:	2b10      	cmp	r3, #16
 8005004:	d05a      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x15e>
 8005006:	e062      	b.n	80050ce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005018:	f000 f9a6 	bl	8005368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]
      break;
 8005034:	e04f      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005046:	f000 f98f 	bl	8005368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005058:	609a      	str	r2, [r3, #8]
      break;
 800505a:	e03c      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005068:	461a      	mov	r2, r3
 800506a:	f000 f903 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2150      	movs	r1, #80	; 0x50
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f95c 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 800507a:	e02c      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005088:	461a      	mov	r2, r3
 800508a:	f000 f922 	bl	80052d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2160      	movs	r1, #96	; 0x60
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f94c 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 800509a:	e01c      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a8:	461a      	mov	r2, r3
 80050aa:	f000 f8e3 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2140      	movs	r1, #64	; 0x40
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f93c 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 80050ba:	e00c      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f000 f933 	bl	8005332 <TIM_ITRx_SetConfig>
      break;
 80050cc:	e003      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      break;
 80050d2:	e000      	b.n	80050d6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a40      	ldr	r2, [pc, #256]	; (8005254 <TIM_Base_SetConfig+0x114>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3d      	ldr	r2, [pc, #244]	; (8005258 <TIM_Base_SetConfig+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3c      	ldr	r2, [pc, #240]	; (800525c <TIM_Base_SetConfig+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3b      	ldr	r2, [pc, #236]	; (8005260 <TIM_Base_SetConfig+0x120>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3a      	ldr	r2, [pc, #232]	; (8005264 <TIM_Base_SetConfig+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2f      	ldr	r2, [pc, #188]	; (8005254 <TIM_Base_SetConfig+0x114>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01f      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a0:	d01b      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <TIM_Base_SetConfig+0x118>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d017      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	; (800525c <TIM_Base_SetConfig+0x11c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2a      	ldr	r2, [pc, #168]	; (8005260 <TIM_Base_SetConfig+0x120>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00f      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a29      	ldr	r2, [pc, #164]	; (8005264 <TIM_Base_SetConfig+0x124>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00b      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a28      	ldr	r2, [pc, #160]	; (8005268 <TIM_Base_SetConfig+0x128>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d007      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a27      	ldr	r2, [pc, #156]	; (800526c <TIM_Base_SetConfig+0x12c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d003      	beq.n	80051da <TIM_Base_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a26      	ldr	r2, [pc, #152]	; (8005270 <TIM_Base_SetConfig+0x130>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d108      	bne.n	80051ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a10      	ldr	r2, [pc, #64]	; (8005254 <TIM_Base_SetConfig+0x114>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00f      	beq.n	8005238 <TIM_Base_SetConfig+0xf8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0xf8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a11      	ldr	r2, [pc, #68]	; (8005268 <TIM_Base_SetConfig+0x128>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0xf8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <TIM_Base_SetConfig+0x12c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0xf8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <TIM_Base_SetConfig+0x130>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d103      	bne.n	8005240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	615a      	str	r2, [r3, #20]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 030a 	bic.w	r3, r3, #10
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0210 	bic.w	r2, r3, #16
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	031b      	lsls	r3, r3, #12
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800530e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	f043 0307 	orr.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	021a      	lsls	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	431a      	orrs	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4313      	orrs	r3, r2
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	609a      	str	r2, [r3, #8]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e068      	b.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2e      	ldr	r2, [pc, #184]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01d      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d018      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10c      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <arm_sin_f32>:
 80054f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005574 <arm_sin_f32+0x80>
 80054f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005508:	d504      	bpl.n	8005514 <arm_sin_f32+0x20>
 800550a:	ee17 3a90 	vmov	r3, s15
 800550e:	3b01      	subs	r3, #1
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005518:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005578 <arm_sin_f32+0x84>
 800551c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005520:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005524:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	b29b      	uxth	r3, r3
 800552e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005532:	d21a      	bcs.n	800556a <arm_sin_f32+0x76>
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005542:	4a0e      	ldr	r2, [pc, #56]	; (800557c <arm_sin_f32+0x88>)
 8005544:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800554c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005550:	ed93 7a00 	vldr	s14, [r3]
 8005554:	edd2 6a00 	vldr	s13, [r2]
 8005558:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800555c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005564:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005568:	4770      	bx	lr
 800556a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800556e:	2101      	movs	r1, #1
 8005570:	2300      	movs	r3, #0
 8005572:	e7e6      	b.n	8005542 <arm_sin_f32+0x4e>
 8005574:	3e22f983 	.word	0x3e22f983
 8005578:	44000000 	.word	0x44000000
 800557c:	080057c8 	.word	0x080057c8

08005580 <malloc>:
 8005580:	4b02      	ldr	r3, [pc, #8]	; (800558c <malloc+0xc>)
 8005582:	4601      	mov	r1, r0
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	f000 b823 	b.w	80055d0 <_malloc_r>
 800558a:	bf00      	nop
 800558c:	20000058 	.word	0x20000058

08005590 <sbrk_aligned>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4e0e      	ldr	r6, [pc, #56]	; (80055cc <sbrk_aligned+0x3c>)
 8005594:	460c      	mov	r4, r1
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	4605      	mov	r5, r0
 800559a:	b911      	cbnz	r1, 80055a2 <sbrk_aligned+0x12>
 800559c:	f000 f8ac 	bl	80056f8 <_sbrk_r>
 80055a0:	6030      	str	r0, [r6, #0]
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f8a7 	bl	80056f8 <_sbrk_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d00a      	beq.n	80055c4 <sbrk_aligned+0x34>
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d007      	beq.n	80055c8 <sbrk_aligned+0x38>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 f89c 	bl	80056f8 <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d101      	bne.n	80055c8 <sbrk_aligned+0x38>
 80055c4:	f04f 34ff 	mov.w	r4, #4294967295
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	200275e0 	.word	0x200275e0

080055d0 <_malloc_r>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	1ccd      	adds	r5, r1, #3
 80055d6:	f025 0503 	bic.w	r5, r5, #3
 80055da:	3508      	adds	r5, #8
 80055dc:	2d0c      	cmp	r5, #12
 80055de:	bf38      	it	cc
 80055e0:	250c      	movcc	r5, #12
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	4607      	mov	r7, r0
 80055e6:	db01      	blt.n	80055ec <_malloc_r+0x1c>
 80055e8:	42a9      	cmp	r1, r5
 80055ea:	d905      	bls.n	80055f8 <_malloc_r+0x28>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	2600      	movs	r6, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056cc <_malloc_r+0xfc>
 80055fc:	f000 f868 	bl	80056d0 <__malloc_lock>
 8005600:	f8d8 3000 	ldr.w	r3, [r8]
 8005604:	461c      	mov	r4, r3
 8005606:	bb5c      	cbnz	r4, 8005660 <_malloc_r+0x90>
 8005608:	4629      	mov	r1, r5
 800560a:	4638      	mov	r0, r7
 800560c:	f7ff ffc0 	bl	8005590 <sbrk_aligned>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	4604      	mov	r4, r0
 8005614:	d155      	bne.n	80056c2 <_malloc_r+0xf2>
 8005616:	f8d8 4000 	ldr.w	r4, [r8]
 800561a:	4626      	mov	r6, r4
 800561c:	2e00      	cmp	r6, #0
 800561e:	d145      	bne.n	80056ac <_malloc_r+0xdc>
 8005620:	2c00      	cmp	r4, #0
 8005622:	d048      	beq.n	80056b6 <_malloc_r+0xe6>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	4631      	mov	r1, r6
 8005628:	4638      	mov	r0, r7
 800562a:	eb04 0903 	add.w	r9, r4, r3
 800562e:	f000 f863 	bl	80056f8 <_sbrk_r>
 8005632:	4581      	cmp	r9, r0
 8005634:	d13f      	bne.n	80056b6 <_malloc_r+0xe6>
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	1a6d      	subs	r5, r5, r1
 800563a:	4629      	mov	r1, r5
 800563c:	4638      	mov	r0, r7
 800563e:	f7ff ffa7 	bl	8005590 <sbrk_aligned>
 8005642:	3001      	adds	r0, #1
 8005644:	d037      	beq.n	80056b6 <_malloc_r+0xe6>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	442b      	add	r3, r5
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	f8d8 3000 	ldr.w	r3, [r8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d038      	beq.n	80056c6 <_malloc_r+0xf6>
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	42a2      	cmp	r2, r4
 8005658:	d12b      	bne.n	80056b2 <_malloc_r+0xe2>
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	e00f      	b.n	8005680 <_malloc_r+0xb0>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	1b52      	subs	r2, r2, r5
 8005664:	d41f      	bmi.n	80056a6 <_malloc_r+0xd6>
 8005666:	2a0b      	cmp	r2, #11
 8005668:	d917      	bls.n	800569a <_malloc_r+0xca>
 800566a:	1961      	adds	r1, r4, r5
 800566c:	42a3      	cmp	r3, r4
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	6059      	strne	r1, [r3, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	bf08      	it	eq
 8005678:	f8c8 1000 	streq.w	r1, [r8]
 800567c:	5162      	str	r2, [r4, r5]
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	4638      	mov	r0, r7
 8005682:	f104 060b 	add.w	r6, r4, #11
 8005686:	f000 f829 	bl	80056dc <__malloc_unlock>
 800568a:	f026 0607 	bic.w	r6, r6, #7
 800568e:	1d23      	adds	r3, r4, #4
 8005690:	1af2      	subs	r2, r6, r3
 8005692:	d0ae      	beq.n	80055f2 <_malloc_r+0x22>
 8005694:	1b9b      	subs	r3, r3, r6
 8005696:	50a3      	str	r3, [r4, r2]
 8005698:	e7ab      	b.n	80055f2 <_malloc_r+0x22>
 800569a:	42a3      	cmp	r3, r4
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	d1dd      	bne.n	800565c <_malloc_r+0x8c>
 80056a0:	f8c8 2000 	str.w	r2, [r8]
 80056a4:	e7ec      	b.n	8005680 <_malloc_r+0xb0>
 80056a6:	4623      	mov	r3, r4
 80056a8:	6864      	ldr	r4, [r4, #4]
 80056aa:	e7ac      	b.n	8005606 <_malloc_r+0x36>
 80056ac:	4634      	mov	r4, r6
 80056ae:	6876      	ldr	r6, [r6, #4]
 80056b0:	e7b4      	b.n	800561c <_malloc_r+0x4c>
 80056b2:	4613      	mov	r3, r2
 80056b4:	e7cc      	b.n	8005650 <_malloc_r+0x80>
 80056b6:	230c      	movs	r3, #12
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4638      	mov	r0, r7
 80056bc:	f000 f80e 	bl	80056dc <__malloc_unlock>
 80056c0:	e797      	b.n	80055f2 <_malloc_r+0x22>
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	e7dc      	b.n	8005680 <_malloc_r+0xb0>
 80056c6:	605b      	str	r3, [r3, #4]
 80056c8:	deff      	udf	#255	; 0xff
 80056ca:	bf00      	nop
 80056cc:	200275dc 	.word	0x200275dc

080056d0 <__malloc_lock>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__malloc_lock+0x8>)
 80056d2:	f000 b84b 	b.w	800576c <__retarget_lock_acquire_recursive>
 80056d6:	bf00      	nop
 80056d8:	20027720 	.word	0x20027720

080056dc <__malloc_unlock>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__malloc_unlock+0x8>)
 80056de:	f000 b846 	b.w	800576e <__retarget_lock_release_recursive>
 80056e2:	bf00      	nop
 80056e4:	20027720 	.word	0x20027720

080056e8 <memset>:
 80056e8:	4402      	add	r2, r0
 80056ea:	4603      	mov	r3, r0
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d100      	bne.n	80056f2 <memset+0xa>
 80056f0:	4770      	bx	lr
 80056f2:	f803 1b01 	strb.w	r1, [r3], #1
 80056f6:	e7f9      	b.n	80056ec <memset+0x4>

080056f8 <_sbrk_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	; (8005714 <_sbrk_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fc f808 	bl	8001718 <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_sbrk_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_sbrk_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	2002771c 	.word	0x2002771c

08005718 <__errno>:
 8005718:	4b01      	ldr	r3, [pc, #4]	; (8005720 <__errno+0x8>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000058 	.word	0x20000058

08005724 <__libc_init_array>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	4d0d      	ldr	r5, [pc, #52]	; (800575c <__libc_init_array+0x38>)
 8005728:	4c0d      	ldr	r4, [pc, #52]	; (8005760 <__libc_init_array+0x3c>)
 800572a:	1b64      	subs	r4, r4, r5
 800572c:	10a4      	asrs	r4, r4, #2
 800572e:	2600      	movs	r6, #0
 8005730:	42a6      	cmp	r6, r4
 8005732:	d109      	bne.n	8005748 <__libc_init_array+0x24>
 8005734:	4d0b      	ldr	r5, [pc, #44]	; (8005764 <__libc_init_array+0x40>)
 8005736:	4c0c      	ldr	r4, [pc, #48]	; (8005768 <__libc_init_array+0x44>)
 8005738:	f000 f81a 	bl	8005770 <_init>
 800573c:	1b64      	subs	r4, r4, r5
 800573e:	10a4      	asrs	r4, r4, #2
 8005740:	2600      	movs	r6, #0
 8005742:	42a6      	cmp	r6, r4
 8005744:	d105      	bne.n	8005752 <__libc_init_array+0x2e>
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	f855 3b04 	ldr.w	r3, [r5], #4
 800574c:	4798      	blx	r3
 800574e:	3601      	adds	r6, #1
 8005750:	e7ee      	b.n	8005730 <__libc_init_array+0xc>
 8005752:	f855 3b04 	ldr.w	r3, [r5], #4
 8005756:	4798      	blx	r3
 8005758:	3601      	adds	r6, #1
 800575a:	e7f2      	b.n	8005742 <__libc_init_array+0x1e>
 800575c:	08005fcc 	.word	0x08005fcc
 8005760:	08005fcc 	.word	0x08005fcc
 8005764:	08005fcc 	.word	0x08005fcc
 8005768:	08005fd0 	.word	0x08005fd0

0800576c <__retarget_lock_acquire_recursive>:
 800576c:	4770      	bx	lr

0800576e <__retarget_lock_release_recursive>:
 800576e:	4770      	bx	lr

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
