
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab4  08002ab4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab4  08002ab4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab4  08002ab4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002ac8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002ac8  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc52  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a70  00000000  00000000  0002bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000953  00000000  00000000  0002e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a22b  00000000  00000000  0002ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc38  00000000  00000000  00058ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105a11  00000000  00000000  00065b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003250  00000000  00000000  0016b530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  0016e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002a5c 	.word	0x08002a5c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002a5c 	.word	0x08002a5c

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa8e 	bl	8000722 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f82d 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8ff 	bl	800040c <MX_GPIO_Init>
  MX_DAC1_Init();
 800020e:	f000 f87b 	bl	8000308 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000212:	f000 f8ad 	bl	8000370 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000216:	2100      	movs	r1, #0
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <main+0x60>)
 800021a:	f000 fc4e 	bl	8000aba <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800021e:	2110      	movs	r1, #16
 8000220:	480e      	ldr	r0, [pc, #56]	; (800025c <main+0x60>)
 8000222:	f000 fc4a 	bl	8000aba <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000226:	480e      	ldr	r0, [pc, #56]	; (8000260 <main+0x64>)
 8000228:	f001 ffae 	bl	8002188 <HAL_TIM_Base_Start_IT>

  uint8_t triangle = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	75fb      	strb	r3, [r7, #23]
  uint8_t saw = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	75bb      	strb	r3, [r7, #22]
  uint8_t sine = (VALUE_LIMIT/2);
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	757b      	strb	r3, [r7, #21]
  float   theta = 0.0;
 8000238:	f04f 0300 	mov.w	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  uint8_t delta = (VALUE_LIMIT/N_STEPS)*2;
 800023e:	2308      	movs	r3, #8
 8000240:	73fb      	strb	r3, [r7, #15]
  float temp = 0;
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	60bb      	str	r3, [r7, #8]
  uint8_t song_index = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	71fb      	strb	r3, [r7, #7]
  uint8_t song_index_background = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	71bb      	strb	r3, [r7, #6]
  uint8_t update_song  = 1;
 8000250:	2301      	movs	r3, #1
 8000252:	717b      	strb	r3, [r7, #5]
  uint8_t led_switch = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	713b      	strb	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x5c>
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028
 8000260:	2000003c 	.word	0x2000003c

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	; 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	; 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fbc6 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000286:	2000      	movs	r0, #0
 8000288:	f000 ffd6 	bl	8001238 <HAL_PWREx_ControlVoltageScaling>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000292:	f000 f943 	bl	800051c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000296:	2310      	movs	r3, #16
 8000298:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a2:	2360      	movs	r3, #96	; 0x60
 80002a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002aa:	2301      	movs	r3, #1
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002b2:	233c      	movs	r3, #60	; 0x3c
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b6:	2302      	movs	r3, #2
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f85a 	bl	8001380 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002d2:	f000 f923 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2303      	movs	r3, #3
 80002dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	2105      	movs	r1, #5
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fc60 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002fa:	f000 f90f 	bl	800051c <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3758      	adds	r7, #88	; 0x58
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800030e:	463b      	mov	r3, r7
 8000310:	2228      	movs	r2, #40	; 0x28
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 fb75 	bl	8002a04 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_DAC1_Init+0x60>)
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <MX_DAC1_Init+0x64>)
 800031e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000320:	4811      	ldr	r0, [pc, #68]	; (8000368 <MX_DAC1_Init+0x60>)
 8000322:	f000 fba8 	bl	8000a76 <HAL_DAC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800032c:	f000 f8f6 	bl	800051c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800033c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_DAC1_Init+0x60>)
 8000352:	f000 fc29 	bl	8000ba8 <HAL_DAC_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800035c:	f000 f8de 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000028 	.word	0x20000028
 800036c:	40007400 	.word	0x40007400

08000370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_TIM2_Init+0x98>)
 8000390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_TIM2_Init+0x98>)
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_TIM2_Init+0x98>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_TIM2_Init+0x98>)
 80003a4:	f640 22a1 	movw	r2, #2721	; 0xaa1
 80003a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_TIM2_Init+0x98>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_TIM2_Init+0x98>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b6:	4814      	ldr	r0, [pc, #80]	; (8000408 <MX_TIM2_Init+0x98>)
 80003b8:	f001 fe8e 	bl	80020d8 <HAL_TIM_Base_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003c2:	f000 f8ab 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <MX_TIM2_Init+0x98>)
 80003d4:	f002 f84a 	bl	800246c <HAL_TIM_ConfigClockSource>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003de:	f000 f89d 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003e2:	2320      	movs	r3, #32
 80003e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_TIM2_Init+0x98>)
 80003f0:	f002 fa62 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003fa:	f000 f88f 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000003c 	.word	0x2000003c

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000422:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a28      	ldr	r2, [pc, #160]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <MX_GPIO_Init+0xbc>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_GPIO_Init+0xbc>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000470:	4816      	ldr	r0, [pc, #88]	; (80004cc <MX_GPIO_Init+0xc0>)
 8000472:	f000 fe77 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB_Pin */
  GPIO_InitStruct.Pin = PB_Pin;
 8000476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4619      	mov	r1, r3
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <MX_GPIO_Init+0xc4>)
 800048e:	f000 fcd7 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	4808      	ldr	r0, [pc, #32]	; (80004cc <MX_GPIO_Init+0xc0>)
 80004ac:	f000 fcc8 	bl	8000e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2028      	movs	r0, #40	; 0x28
 80004b6:	f000 faa8 	bl	8000a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ba:	2028      	movs	r0, #40	; 0x28
 80004bc:	f000 fac1 	bl	8000a42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800

080004d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80004e4:	f000 fe56 	bl	8001194 <HAL_GPIO_TogglePin>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	48000400 	.word	0x48000400

080004f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, (uint32_t)(sine));
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2208      	movs	r2, #8
 8000502:	2100      	movs	r1, #0
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000506:	f000 fb2a 	bl	8000b5e <HAL_DAC_SetValue>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000088 	.word	0x20000088
 8000518:	20000028 	.word	0x20000028

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6613      	str	r3, [r2, #96]	; 0x60
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6593      	str	r3, [r2, #88]	; 0x58
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_MspInit+0x44>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <HAL_DAC_MspInit+0x74>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d124      	bne.n	80005dc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 8000598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800059c:	6593      	str	r3, [r2, #88]	; 0x58
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_DAC_MspInit+0x78>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c2:	2310      	movs	r3, #16
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fc32 	bl	8000e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40007400 	.word	0x40007400
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005fc:	d113      	bne.n	8000626 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_TIM_Base_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <HAL_TIM_Base_MspInit+0x44>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6593      	str	r3, [r2, #88]	; 0x58
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_TIM_Base_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	201c      	movs	r0, #28
 800061c:	f000 f9f5 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000620:	201c      	movs	r0, #28
 8000622:	f000 fa0e 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <MemManage_Handler+0x4>

08000646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <UsageFault_Handler+0x4>

08000652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000680:	f000 f8a4 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <TIM2_IRQHandler+0x10>)
 800068e:	f001 fdeb 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000003c 	.word	0x2000003c

0800069c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_Pin);
 80006a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a4:	f000 fd90 	bl	80011c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff ffea 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f002 f989 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000702:	f7ff fd7b 	bl	80001fc <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000708:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08002abc 	.word	0x08002abc
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	20000090 	.word	0x20000090

08000720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_IRQHandler>

08000722 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f961 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f80e 	bl	8000754 <HAL_InitTick>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	e001      	b.n	8000748 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000744:	f7ff fef0 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_InitTick+0x6c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d023      	beq.n	80007b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_InitTick+0x70>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x6c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f96d 	bl	8000a5e <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10f      	bne.n	80007aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d809      	bhi.n	80007a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f000 f937 	bl	8000a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_InitTick+0x74>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e007      	b.n	80007b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e004      	b.n	80007b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e001      	b.n	80007b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_IncTick+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x24>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_IncTick+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	2000008c 	.word	0x2000008c

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff ffee 	bl	80007f4 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffde 	bl	80007f4 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff29 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff3e 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff31 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e014      	b.n	8000ab2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d105      	bne.n	8000a9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fd69 	bl	8000570 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	795b      	ldrb	r3, [r3, #5]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d101      	bne.n	8000ad0 <HAL_DAC_Start+0x16>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e040      	b.n	8000b52 <HAL_DAC_Start+0x98>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2202      	movs	r2, #2
 8000ada:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6819      	ldr	r1, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2201      	movs	r2, #1
 8000aea:	409a      	lsls	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10f      	bne.n	8000b1a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d11d      	bne.n	8000b44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	e014      	b.n	8000b44 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d107      	bne.n	8000b44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0202 	orr.w	r2, r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b087      	sub	sp, #28
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d105      	bne.n	8000b88 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	3308      	adds	r3, #8
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e004      	b.n	8000b92 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3314      	adds	r3, #20
 8000b90:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	795b      	ldrb	r3, [r3, #5]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_DAC_ConfigChannel+0x1c>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e137      	b.n	8000e34 <HAL_DAC_ConfigChannel+0x28c>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	f040 8081 	bne.w	8000cdc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000bda:	f7ff fe0b 	bl	80007f4 <HAL_GetTick>
 8000bde:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d140      	bne.n	8000c68 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000be6:	e018      	b.n	8000c1a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000be8:	f7ff fe04 	bl	80007f4 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d911      	bls.n	8000c1a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00a      	beq.n	8000c1a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	f043 0208 	orr.w	r2, r3, #8
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2203      	movs	r2, #3
 8000c14:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e10c      	b.n	8000e34 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1df      	bne.n	8000be8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fdef 	bl	800080c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	69d2      	ldr	r2, [r2, #28]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
 8000c38:	e023      	b.n	8000c82 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c3a:	f7ff fddb 	bl	80007f4 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d90f      	bls.n	8000c68 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da0a      	bge.n	8000c68 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f043 0208 	orr.w	r2, r3, #8
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2203      	movs	r2, #3
 8000c62:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000c64:	2303      	movs	r3, #3
 8000c66:	e0e5      	b.n	8000e34 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dbe3      	blt.n	8000c3a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fdca 	bl	800080c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	69d2      	ldr	r2, [r2, #28]
 8000c80:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	ea02 0103 	and.w	r1, r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	6a1a      	ldr	r2, [r3, #32]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	21ff      	movs	r1, #255	; 0xff
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	ea02 0103 	and.w	r1, r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d11d      	bne.n	8000d20 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cea:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	221f      	movs	r2, #31
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d26:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	2207      	movs	r2, #7
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	400a      	ands	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc4:	d104      	bne.n	8000dd0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e018      	b.n	8000e02 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	e00f      	b.n	8000e02 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000de2:	f001 f8ad 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8000de6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_DAC_ConfigChannel+0x294>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d904      	bls.n	8000dfa <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df6:	61fb      	str	r3, [r7, #28]
 8000df8:	e003      	b.n	8000e02 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e00:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	22c0      	movs	r2, #192	; 0xc0
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	04c4b400 	.word	0x04c4b400

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e166      	b.n	800111e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8158 	beq.w	8001118 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d005      	beq.n	8000e80 <HAL_GPIO_Init+0x40>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d130      	bne.n	8000ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f003 0201 	and.w	r2, r3, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d017      	beq.n	8000f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d123      	bne.n	8000f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	6939      	ldr	r1, [r7, #16]
 8000f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0203 	and.w	r2, r3, #3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80b2 	beq.w	8001118 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb4:	4b61      	ldr	r3, [pc, #388]	; (800113c <HAL_GPIO_Init+0x2fc>)
 8000fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb8:	4a60      	ldr	r2, [pc, #384]	; (800113c <HAL_GPIO_Init+0x2fc>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc0:	4b5e      	ldr	r3, [pc, #376]	; (800113c <HAL_GPIO_Init+0x2fc>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fcc:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <HAL_GPIO_Init+0x300>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff6:	d02b      	beq.n	8001050 <HAL_GPIO_Init+0x210>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x304>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d025      	beq.n	800104c <HAL_GPIO_Init+0x20c>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x308>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d01f      	beq.n	8001048 <HAL_GPIO_Init+0x208>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x30c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d019      	beq.n	8001044 <HAL_GPIO_Init+0x204>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x310>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x200>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x314>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1fc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x318>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1f8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x31c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1f4>
 8001030:	2307      	movs	r3, #7
 8001032:	e00e      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001034:	2308      	movs	r3, #8
 8001036:	e00c      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001038:	2306      	movs	r3, #6
 800103a:	e00a      	b.n	8001052 <HAL_GPIO_Init+0x212>
 800103c:	2305      	movs	r3, #5
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001040:	2304      	movs	r3, #4
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x212>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x212>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x300>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_GPIO_Init+0x320>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001094:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_GPIO_Init+0x320>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x320>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <HAL_GPIO_Init+0x320>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x320>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_GPIO_Init+0x320>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x320>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <HAL_GPIO_Init+0x320>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f ae91 	bne.w	8000e50 <HAL_GPIO_Init+0x10>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	48000c00 	.word	0x48000c00
 8001150:	48001000 	.word	0x48001000
 8001154:	48001400 	.word	0x48001400
 8001158:	48001800 	.word	0x48001800
 800115c:	48001c00 	.word	0x48001c00
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e002      	b.n	8001188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43d9      	mvns	r1, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	400b      	ands	r3, r1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f974 	bl	80004d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_PWREx_GetVoltageRange+0x3c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001208:	d102      	bne.n	8001210 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	e00b      	b.n	8001228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800121e:	d102      	bne.n	8001226 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001224:	e000      	b.n	8001228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001226:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d141      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800124e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001252:	d131      	bne.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800125a:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126c:	4a41      	ldr	r2, [pc, #260]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2232      	movs	r2, #50	; 0x32
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128a:	e002      	b.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3b01      	subs	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d102      	bne.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f2      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d158      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e057      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012be:	4a2d      	ldr	r2, [pc, #180]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012c8:	e04d      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012d0:	d141      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d131      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2232      	movs	r2, #50	; 0x32
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	e002      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132a:	d102      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f2      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133e:	d112      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e011      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001354:	e007      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001364:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40007000 	.word	0x40007000
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83

08001380 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 bc08 	b.w	8001ba4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001394:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139e:	4b94      	ldr	r3, [pc, #592]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80e4 	beq.w	800157e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x4c>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	f040 808b 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 8087 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x64>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e3df      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_RCC_OscConfig+0x7e>
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013fc:	e005      	b.n	800140a <HAL_RCC_OscConfig+0x8a>
 80013fe:	4b7c      	ldr	r3, [pc, #496]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140a:	4293      	cmp	r3, r2
 800140c:	d223      	bcs.n	8001456 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fda0 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e3c0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a72      	ldr	r2, [pc, #456]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	496d      	ldr	r1, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001440:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4968      	ldr	r1, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e025      	b.n	80014a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4960      	ldr	r1, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	495b      	ldr	r1, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fd60 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e380      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a2:	f000 fcc1 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4950      	ldr	r1, [pc, #320]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_RCC_OscConfig+0x278>)
 80014c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f944 	bl	8000754 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d052      	beq.n	800157c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	e364      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d032      	beq.n	8001548 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ee:	f7ff f981 	bl	80007f4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f6:	f7ff f97d 	bl	80007f4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e34d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a35      	ldr	r2, [pc, #212]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4930      	ldr	r1, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	492b      	ldr	r1, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e01a      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001554:	f7ff f94e 	bl	80007f4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155c:	f7ff f94a 	bl	80007f4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e31a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1dc>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d073      	beq.n	8001672 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x21c>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d10e      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d063      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d15f      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e2f7      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x24c>
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e025      	b.n	8001618 <HAL_RCC_OscConfig+0x298>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d114      	bne.n	8001600 <HAL_RCC_OscConfig+0x280>
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a02      	ldr	r2, [pc, #8]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x298>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08002a74 	.word	0x08002a74
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004
 8001600:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a9f      	ldr	r2, [pc, #636]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a9c      	ldr	r2, [pc, #624]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff f8e8 	bl	80007f4 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff f8e4 	bl	80007f4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2b4      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2a8>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff f8d4 	bl	80007f4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff f8d0 	bl	80007f4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e2a0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x2d0>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d060      	beq.n	8001740 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x310>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d119      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d116      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x328>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e27d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	4973      	ldr	r1, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	e040      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d023      	beq.n	800170e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff f88f 	bl	80007f4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff f88b 	bl	80007f4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e25b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	495f      	ldr	r1, [pc, #380]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5c      	ldr	r2, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff f86b 	bl	80007f4 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff f867 	bl	80007f4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e237      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01c      	beq.n	800178e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	4a4a      	ldr	r2, [pc, #296]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff f846 	bl	80007f4 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff f842 	bl	80007f4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e212      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ef      	beq.n	800176c <HAL_RCC_OscConfig+0x3ec>
 800178c:	e01b      	b.n	80017c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff f829 	bl	80007f4 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff f825 	bl	80007f4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1f5      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80a6 	beq.w	8001920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d118      	bne.n	800183e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001818:	f7fe ffec 	bl	80007f4 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7fe ffe8 	bl	80007f4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1b8      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d8>
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	e029      	b.n	80018ac <HAL_RCC_OscConfig+0x52c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d115      	bne.n	800188c <HAL_RCC_OscConfig+0x50c>
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x52c>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40007000 	.word	0x40007000
 800188c:	4b9d      	ldr	r3, [pc, #628]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a9c      	ldr	r2, [pc, #624]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	4b99      	ldr	r3, [pc, #612]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a98      	ldr	r2, [pc, #608]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7fe ff9e 	bl	80007f4 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7fe ff9a 	bl	80007f4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e168      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ed      	beq.n	80018bc <HAL_RCC_OscConfig+0x53c>
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7fe ff87 	bl	80007f4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe ff83 	bl	80007f4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e151      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001900:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ed      	bne.n	80018ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7fe ff56 	bl	80007f4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7fe ff52 	bl	80007f4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e122      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x5cc>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001974:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7fe ff39 	bl	80007f4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001986:	f7fe ff35 	bl	80007f4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e105      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80f9 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80cf 	bne.w	8001b58 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ba:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d12c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
 80019da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d123      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d11b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d071      	beq.n	8001b0c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d068      	beq.n	8001b00 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a2e:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0ac      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a56:	f7fe fecd 	bl	80007f4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7fe fec9 	bl	80007f4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e099      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_OscConfig+0x788>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a9e:	0852      	lsrs	r2, r2, #1
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0552      	lsls	r2, r2, #21
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aaa:	0852      	lsrs	r2, r2, #1
 8001aac:	3a01      	subs	r2, #1
 8001aae:	0652      	lsls	r2, r2, #25
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab6:	06d2      	lsls	r2, r2, #27
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	4912      	ldr	r1, [pc, #72]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad8:	f7fe fe8c 	bl	80007f4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7fe fe88 	bl	80007f4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e058      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_OscConfig+0x784>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afe:	e050      	b.n	8001ba2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e04f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d144      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b30:	f7fe fe60 	bl	80007f4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fe5c 	bl	80007f4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e02c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x7b8>
 8001b56:	e024      	b.n	8001ba2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d01f      	beq.n	8001b9e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fe43 	bl	80007f4 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7fe fe3f 	bl	80007f4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e00f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_RCC_OscConfig+0x830>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e001      	b.n	8001ba2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	feeefffc 	.word	0xfeeefffc

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e11d      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b90      	ldr	r3, [pc, #576]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	498b      	ldr	r1, [pc, #556]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e105      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d908      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	497b      	ldr	r1, [pc, #492]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d079      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d11e      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0dc      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c4e:	f000 f9dd 	bl	800200c <RCC_GetSysClockFreqFromPLLSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d946      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d140      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c6e:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e035      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c84:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b9      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0ad      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0a5      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cbc:	f000 f8b4 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d90f      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cc8:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 0203 	bic.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4947      	ldr	r1, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfa:	f7fe fd7b 	bl	80007f4 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d02:	f7fe fd77 	bl	80007f4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e077      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 020c 	and.w	r2, r3, #12
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d1eb      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d208      	bcs.n	8001d6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	492b      	ldr	r1, [pc, #172]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d210      	bcs.n	8001d9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 020f 	bic.w	r2, r3, #15
 8001d80:	4923      	ldr	r1, [pc, #140]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e036      	b.n	8001e08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	4918      	ldr	r1, [pc, #96]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4910      	ldr	r1, [pc, #64]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd8:	f000 f826 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <HAL_RCC_ClockConfig+0x268>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x26c>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_ClockConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fca9 	bl	8000754 <HAL_InitTick>
 8001e02:	4603      	mov	r3, r0
 8001e04:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	04c4b400 	.word	0x04c4b400
 8001e1c:	08002a74 	.word	0x08002a74
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x34>
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d121      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d11e      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e005      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e84:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e004      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d134      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0xa6>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d003      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ecc:	e005      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed0:	617b      	str	r3, [r7, #20]
      break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ed6:	617b      	str	r3, [r7, #20]
      break;
 8001ed8:	e002      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	617b      	str	r3, [r7, #20]
      break;
 8001ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3301      	adds	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	fb03 f202 	mul.w	r2, r3, r2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0e5b      	lsrs	r3, r3, #25
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	3301      	adds	r3, #1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f20:	69bb      	ldr	r3, [r7, #24]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08002a84 	.word	0x08002a84
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000

08001f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff f942 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
 8001f76:	e014      	b.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f932 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d10b      	bne.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d913      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb4:	d902      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e00d      	b.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e00a      	b.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc6:	d902      	bls.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fc8:	2302      	movs	r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e004      	b.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b70      	cmp	r3, #112	; 0x70
 8001fd2:	d101      	bne.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	4909      	ldr	r1, [pc, #36]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40022000 	.word	0x40022000

0800200c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d00b      	beq.n	800203a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d825      	bhi.n	8002074 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d008      	beq.n	8002040 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d11f      	bne.n	8002074 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002036:	613b      	str	r3, [r7, #16]
    break;
 8002038:	e01f      	b.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800203c:	613b      	str	r3, [r7, #16]
    break;
 800203e:	e01c      	b.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e005      	b.n	8002068 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	613b      	str	r3, [r7, #16]
    break;
 8002072:	e002      	b.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
    break;
 8002078:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	3301      	adds	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	fb03 f202 	mul.w	r2, r3, r2
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020ba:	683b      	ldr	r3, [r7, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	08002a84 	.word	0x08002a84

080020d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e049      	b.n	800217e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fa74 	bl	80005ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f000 fa9a 	bl	8002650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e04f      	b.n	8002240 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a23      	ldr	r2, [pc, #140]	; (800224c <HAL_TIM_Base_Start_IT+0xc4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01d      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d018      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_TIM_Base_Start_IT+0xc8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_TIM_Base_Start_IT+0xcc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_TIM_Base_Start_IT+0xd0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_TIM_Base_Start_IT+0xd4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x76>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_TIM_Base_Start_IT+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d115      	bne.n	800222a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_TIM_Base_Start_IT+0xdc>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d015      	beq.n	800223c <HAL_TIM_Base_Start_IT+0xb4>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002216:	d011      	beq.n	800223c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	e008      	b.n	800223c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e000      	b.n	800223e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40013400 	.word	0x40013400
 8002260:	40014000 	.word	0x40014000
 8002264:	00010007 	.word	0x00010007

08002268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0202 	mvn.w	r2, #2
 800229c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f9ad 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f99f 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f9b0 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d020      	beq.n	8002318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0204 	mvn.w	r2, #4
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f987 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f979 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f98a 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f961 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f953 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f964 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d020      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0210 	mvn.w	r2, #16
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2208      	movs	r2, #8
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f93b 	bl	8002612 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f92d 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f93e 	bl	8002626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0201 	mvn.w	r2, #1
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe f890 	bl	80004f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 faf2 	bl	80029dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 faea 	bl	80029f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8fd 	bl	800263a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0220 	mvn.w	r2, #32
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fab2 	bl	80029c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIM_ConfigClockSource+0x1c>
 8002484:	2302      	movs	r3, #2
 8002486:	e0b6      	b.n	80025f6 <HAL_TIM_ConfigClockSource+0x18a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	d03e      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xd8>
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	f200 8087 	bhi.w	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	f000 8086 	beq.w	80025e2 <HAL_TIM_ConfigClockSource+0x176>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	d87f      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d01a      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xaa>
 80024e0:	2b70      	cmp	r3, #112	; 0x70
 80024e2:	d87b      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024e4:	2b60      	cmp	r3, #96	; 0x60
 80024e6:	d050      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x11e>
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d877      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d03c      	beq.n	800256a <HAL_TIM_ConfigClockSource+0xfe>
 80024f0:	2b50      	cmp	r3, #80	; 0x50
 80024f2:	d873      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d058      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x13e>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d86f      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 80024fc:	2b30      	cmp	r3, #48	; 0x30
 80024fe:	d064      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15e>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d86b      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 8002504:	2b20      	cmp	r3, #32
 8002506:	d060      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15e>
 8002508:	2b20      	cmp	r3, #32
 800250a:	d867      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d05c      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15e>
 8002510:	2b10      	cmp	r3, #16
 8002512:	d05a      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15e>
 8002514:	e062      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002526:	f000 f9a7 	bl	8002878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	609a      	str	r2, [r3, #8]
      break;
 8002542:	e04f      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002554:	f000 f990 	bl	8002878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002566:	609a      	str	r2, [r3, #8]
      break;
 8002568:	e03c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f904 	bl	8002784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2150      	movs	r1, #80	; 0x50
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f95d 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 8002588:	e02c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002596:	461a      	mov	r2, r3
 8002598:	f000 f923 	bl	80027e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2160      	movs	r1, #96	; 0x60
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f94d 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e01c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 f8e4 	bl	8002784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f93d 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e00c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f000 f934 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 80025da:	e003      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e000      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80025e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <TIM_Base_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d00f      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3d      	ldr	r2, [pc, #244]	; (8002768 <TIM_Base_SetConfig+0x118>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3c      	ldr	r2, [pc, #240]	; (800276c <TIM_Base_SetConfig+0x11c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <TIM_Base_SetConfig+0x120>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <TIM_Base_SetConfig+0x124>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <TIM_Base_SetConfig+0x114>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d01b      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <TIM_Base_SetConfig+0x118>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d017      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2b      	ldr	r2, [pc, #172]	; (800276c <TIM_Base_SetConfig+0x11c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <TIM_Base_SetConfig+0x120>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00f      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <TIM_Base_SetConfig+0x124>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <TIM_Base_SetConfig+0x128>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <TIM_Base_SetConfig+0x12c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_Base_SetConfig+0x9a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <TIM_Base_SetConfig+0x130>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a10      	ldr	r2, [pc, #64]	; (8002764 <TIM_Base_SetConfig+0x114>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00f      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <TIM_Base_SetConfig+0x124>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <TIM_Base_SetConfig+0x128>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <TIM_Base_SetConfig+0x12c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <TIM_Base_SetConfig+0x130>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40000400 	.word	0x40000400
 800276c:	40000800 	.word	0x40000800
 8002770:	40000c00 	.word	0x40000c00
 8002774:	40013400 	.word	0x40013400
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800

08002784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f023 030a 	bic.w	r3, r3, #10
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 0210 	bic.w	r2, r3, #16
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800280c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800281e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	f043 0307 	orr.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	431a      	orrs	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e068      	b.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800290a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d018      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10c      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4313      	orrs	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40013400 	.word	0x40013400
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40014000 	.word	0x40014000

080029c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <memset>:
 8002a04:	4402      	add	r2, r0
 8002a06:	4603      	mov	r3, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4d0d      	ldr	r5, [pc, #52]	; (8002a4c <__libc_init_array+0x38>)
 8002a18:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	2600      	movs	r6, #0
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	4d0b      	ldr	r5, [pc, #44]	; (8002a54 <__libc_init_array+0x40>)
 8002a26:	4c0c      	ldr	r4, [pc, #48]	; (8002a58 <__libc_init_array+0x44>)
 8002a28:	f000 f818 	bl	8002a5c <_init>
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	2600      	movs	r6, #0
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	08002ab4 	.word	0x08002ab4
 8002a50:	08002ab4 	.word	0x08002ab4
 8002a54:	08002ab4 	.word	0x08002ab4
 8002a58:	08002ab8 	.word	0x08002ab8

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr
