
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b80  08004b80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  08004bf0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004bf0  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100e1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002151  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a87  00000000  00000000  000330a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298e5  00000000  00000000  00033b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011983  00000000  00000000  0005d414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010538a  00000000  00000000  0006ed97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd8  00000000  00000000  00174124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001780fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004aac 	.word	0x08004aac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	08004aac 	.word	0x08004aac

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fb17 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f814 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8ee 	bl	8000788 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005ac:	f000 f862 	bl	8000674 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f89e 	bl	80006f0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World");
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <main+0x2c>)
 80005b6:	f003 fbab 	bl	8003d10 <iprintf>
	  printf("\r\n");
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <main+0x30>)
 80005bc:	f003 fc0e 	bl	8003ddc <puts>
	  HAL_Delay(150);
 80005c0:	2096      	movs	r0, #150	; 0x96
 80005c2:	f000 fb7b 	bl	8000cbc <HAL_Delay>
	  printf("Hello World");
 80005c6:	e7f5      	b.n	80005b4 <main+0x18>
 80005c8:	08004ac4 	.word	0x08004ac4
 80005cc:	08004ad0 	.word	0x08004ad0

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fcdc 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 ff50 	bl	8001498 <HAL_PWREx_ControlVoltageScaling>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005fe:	f000 f8f9 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000602:	2310      	movs	r3, #16
 8000604:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060e:	2360      	movs	r3, #96	; 0x60
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000616:	2301      	movs	r3, #1
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800061e:	233c      	movs	r3, #60	; 0x3c
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ffd4 	bl	80015e0 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f8d9 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fbda 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 f8c5 	bl	80007f4 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	; 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_I2C2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_I2C2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_I2C2_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006b0:	f000 fda0 	bl	80011f4 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 f89b 	bl	80007f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006c2:	f000 fe32 	bl	800132a <HAL_I2CEx_ConfigAnalogFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 f892 	bl	80007f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_I2C2_Init+0x74>)
 80006d4:	f000 fe74 	bl	80013c0 <HAL_I2CEx_ConfigDigitalFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f889 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000084 	.word	0x20000084
 80006ec:	40005800 	.word	0x40005800

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_USART1_UART_Init+0x90>)
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_USART1_UART_Init+0x94>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_USART1_UART_Init+0x90>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART1_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800073a:	f002 fb41 	bl	8002dc0 <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f856 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800074c:	f003 f966 	bl	8003a1c <HAL_UARTEx_SetTxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000756:	f000 f84d 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800075e:	f003 f99b 	bl	8003a98 <HAL_UARTEx_SetRxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 f844 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_USART1_UART_Init+0x90>)
 800076e:	f003 f91c 	bl	80039aa <HAL_UARTEx_DisableFifoMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f83c 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000d8 	.word	0x200000d8
 8000784:	40013800 	.word	0x40013800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0x44>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MX_GPIO_Init+0x44>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_GPIO_Init+0x44>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_GPIO_Init+0x44>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <MX_GPIO_Init+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_GPIO_Init+0x44>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2201      	movs	r2, #1
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <__io_putchar+0x20>)
 80007e2:	f002 fb3d 	bl	8002e60 <HAL_UART_Transmit>
	return ch;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000d8 	.word	0x200000d8

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	; 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	; 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ae      	sub	sp, #184	; 0xb8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2294      	movs	r2, #148	; 0x94
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fb97 	bl	8003f9c <memset>
  if(hi2c->Instance==I2C2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <HAL_I2C_MspInit+0xb0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d13b      	bne.n	80008f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fd83 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000890:	f7ff ffb0 	bl	80007f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b4:	2312      	movs	r3, #18
 80008b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008c6:	2304      	movs	r3, #4
 80008c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <HAL_I2C_MspInit+0xb8>)
 80008d4:	f000 fafc 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 80008da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 80008de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008e2:	6593      	str	r3, [r2, #88]	; 0x58
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_I2C_MspInit+0xb4>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	37b8      	adds	r7, #184	; 0xb8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40005800 	.word	0x40005800
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000400 	.word	0x48000400

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ae      	sub	sp, #184	; 0xb8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2294      	movs	r2, #148	; 0x94
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fb39 	bl	8003f9c <memset>
  if(huart->Instance==USART1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d13c      	bne.n	80009ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000934:	2301      	movs	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000938:	2300      	movs	r3, #0
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fd25 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800094c:	f7ff ff52 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_UART_MspInit+0xb8>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000954:	4a19      	ldr	r2, [pc, #100]	; (80009bc <HAL_UART_MspInit+0xb8>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6613      	str	r3, [r2, #96]	; 0x60
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0xb8>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0xb8>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_UART_MspInit+0xb8>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0xb8>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000980:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099a:	2307      	movs	r3, #7
 800099c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fa91 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	37b8      	adds	r7, #184	; 0xb8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f936 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e00a      	b.n	8000a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a26:	f3af 8000 	nop.w
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	60ba      	str	r2, [r7, #8]
 8000a32:	b2ca      	uxtb	r2, r1
 8000a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf0      	blt.n	8000a26 <_read+0x12>
  }

  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e009      	b.n	8000a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff feb1 	bl	80007d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbf1      	blt.n	8000a60 <_write+0x12>
  }
  return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_close>:

int _close(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aae:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_isatty>:

int _isatty(int file)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f003 fa8a 	bl	8004038 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200a0000 	.word	0x200a0000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	2000016c 	.word	0x2000016c
 8000b58:	200002c0 	.word	0x200002c0

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fa49 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fcf3 	bl	800059c <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bc4:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 8000bc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bcc:	200002c0 	.word	0x200002c0

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>

08000bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f943 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f80e 	bl	8000c04 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff fe04 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d023      	beq.n	8000c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_InitTick+0x70>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f941 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10f      	bne.n	8000c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d809      	bhi.n	8000c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f919 	bl	8000e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_InitTick+0x74>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e007      	b.n	8000c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e004      	b.n	8000c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e001      	b.n	8000c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000170 	.word	0x20000170

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000170 	.word	0x20000170

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffee 	bl	8000ca4 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffde 	bl	8000ca4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff47 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff5c 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffb0 	bl	8000e24 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e166      	b.n	80011ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8158 	beq.w	80011a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	6939      	ldr	r1, [r7, #16]
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0203 	and.w	r2, r3, #3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80b2 	beq.w	80011a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	4b61      	ldr	r3, [pc, #388]	; (80011cc <HAL_GPIO_Init+0x2fc>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	4a60      	ldr	r2, [pc, #384]	; (80011cc <HAL_GPIO_Init+0x2fc>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6613      	str	r3, [r2, #96]	; 0x60
 8001050:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x2fc>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800105c:	4a5c      	ldr	r2, [pc, #368]	; (80011d0 <HAL_GPIO_Init+0x300>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001086:	d02b      	beq.n	80010e0 <HAL_GPIO_Init+0x210>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <HAL_GPIO_Init+0x304>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d025      	beq.n	80010dc <HAL_GPIO_Init+0x20c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <HAL_GPIO_Init+0x308>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d01f      	beq.n	80010d8 <HAL_GPIO_Init+0x208>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a50      	ldr	r2, [pc, #320]	; (80011dc <HAL_GPIO_Init+0x30c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d019      	beq.n	80010d4 <HAL_GPIO_Init+0x204>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x310>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x200>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <HAL_GPIO_Init+0x314>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1fc>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x318>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1f8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4c      	ldr	r2, [pc, #304]	; (80011ec <HAL_GPIO_Init+0x31c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1f4>
 80010c0:	2307      	movs	r3, #7
 80010c2:	e00e      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010c4:	2308      	movs	r3, #8
 80010c6:	e00c      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010c8:	2306      	movs	r3, #6
 80010ca:	e00a      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010cc:	2305      	movs	r3, #5
 80010ce:	e008      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x212>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x300>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_GPIO_Init+0x320>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_GPIO_Init+0x320>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <HAL_GPIO_Init+0x320>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <HAL_GPIO_Init+0x320>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x320>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_GPIO_Init+0x320>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_GPIO_Init+0x320>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_GPIO_Init+0x320>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f ae91 	bne.w	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	48001400 	.word	0x48001400
 80011e8:	48001800 	.word	0x48001800
 80011ec:	48001c00 	.word	0x48001c00
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e08d      	b.n	8001322 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fb14 	bl	8000848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001244:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001254:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e006      	b.n	800127c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800127a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d108      	bne.n	8001296 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	e007      	b.n	80012a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69d9      	ldr	r1, [r3, #28]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b20      	cmp	r3, #32
 800133e:	d138      	bne.n	80013b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800134a:	2302      	movs	r3, #2
 800134c:	e032      	b.n	80013b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2224      	movs	r2, #36	; 0x24
 800135a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800137c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6819      	ldr	r1, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d139      	bne.n	800144a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e033      	b.n	800144c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001412:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800144a:	2302      	movs	r3, #2
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_PWREx_GetVoltageRange+0x3c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d102      	bne.n	8001470 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800146a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146e:	e00b      	b.n	8001488 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800147e:	d102      	bne.n	8001486 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001484:	e000      	b.n	8001488 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001486:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000

08001498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d141      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d131      	bne.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ba:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014cc:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014d4:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2232      	movs	r2, #50	; 0x32
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	e002      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d102      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f2      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d158      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e057      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151e:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001528:	e04d      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001530:	d141      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d131      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2232      	movs	r2, #50	; 0x32
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001576:	e002      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3b01      	subs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d102      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f2      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d112      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e011      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015b4:	e007      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40007000 	.word	0x40007000
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f000 bc08 	b.w	8001e04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f4:	4b96      	ldr	r3, [pc, #600]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fe:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80e4 	beq.w	80017de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_RCC_OscConfig+0x4c>
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	f040 808b 	bne.w	800173a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b01      	cmp	r3, #1
 8001628:	f040 8087 	bne.w	800173a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162c:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x64>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e3df      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_RCC_OscConfig+0x7e>
 8001654:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165c:	e005      	b.n	800166a <HAL_RCC_OscConfig+0x8a>
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166a:	4293      	cmp	r3, r2
 800166c:	d223      	bcs.n	80016b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fdcc 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e3c0      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001682:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	496d      	ldr	r1, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	4968      	ldr	r1, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e025      	b.n	8001702 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a65      	ldr	r2, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4960      	ldr	r1, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	495b      	ldr	r1, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fd8c 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e380      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001702:	f000 fcc1 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8001706:	4602      	mov	r2, r0
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	4950      	ldr	r1, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a4e      	ldr	r2, [pc, #312]	; (8001858 <HAL_RCC_OscConfig+0x278>)
 8001720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001722:	4b4e      	ldr	r3, [pc, #312]	; (800185c <HAL_RCC_OscConfig+0x27c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa6c 	bl	8000c04 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d052      	beq.n	80017dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	e364      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d032      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800174e:	f7ff faa9 	bl	8000ca4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001756:	f7ff faa5 	bl	8000ca4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e34d      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a35      	ldr	r2, [pc, #212]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800177a:	f043 0308 	orr.w	r3, r3, #8
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4930      	ldr	r1, [pc, #192]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	492b      	ldr	r1, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
 80017a6:	e01a      	b.n	80017de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa76 	bl	8000ca4 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa72 	bl	8000ca4 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e31a      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1dc>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d073      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x21c>
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d10e      	bne.n	8001814 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d063      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d15f      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2f7      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x24c>
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e025      	b.n	8001878 <HAL_RCC_OscConfig+0x298>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d114      	bne.n	8001860 <HAL_RCC_OscConfig+0x280>
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a02      	ldr	r2, [pc, #8]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e013      	b.n	8001878 <HAL_RCC_OscConfig+0x298>
 8001850:	40021000 	.word	0x40021000
 8001854:	08004ad4 	.word	0x08004ad4
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004
 8001860:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a9f      	ldr	r2, [pc, #636]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b9d      	ldr	r3, [pc, #628]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a9c      	ldr	r2, [pc, #624]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fa10 	bl	8000ca4 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fa0c 	bl	8000ca4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e2b4      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x2a8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f9fc 	bl	8000ca4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f9f8 	bl	8000ca4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2a0      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c2:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2d0>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d060      	beq.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x310>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d119      	bne.n	800191e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d116      	bne.n	800191e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_OscConfig+0x328>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e27d      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4973      	ldr	r1, [pc, #460]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e040      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001926:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f9b7 	bl	8000ca4 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff f9b3 	bl	8000ca4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e25b      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	495f      	ldr	r1, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f993 	bl	8000ca4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff f98f 	bl	8000ca4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e237      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f96e 	bl	8000ca4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f96a 	bl	8000ca4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e212      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ef      	beq.n	80019cc <HAL_RCC_OscConfig+0x3ec>
 80019ec:	e01b      	b.n	8001a26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f951 	bl	8000ca4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff f94d 	bl	8000ca4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1f5      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80a6 	beq.w	8001b80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d118      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f914 	bl	8000ca4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a80:	f7ff f910 	bl	8000ca4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1b8      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x508>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4d8>
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	e029      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d115      	bne.n	8001aec <HAL_RCC_OscConfig+0x50c>
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	4a9c      	ldr	r2, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afc:	4b99      	ldr	r3, [pc, #612]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d016      	beq.n	8001b42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8c6 	bl	8000ca4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f8c2 	bl	8000ca4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e168      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ed      	beq.n	8001b1c <HAL_RCC_OscConfig+0x53c>
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f8af 	bl	8000ca4 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f8ab 	bl	8000ca4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e151      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ed      	bne.n	8001b4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b7b      	ldr	r3, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a7a      	ldr	r2, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d03c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01c      	beq.n	8001bce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9a:	4a72      	ldr	r2, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f87e 	bl	8000ca4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bac:	f7ff f87a 	bl	8000ca4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e122      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ef      	beq.n	8001bac <HAL_RCC_OscConfig+0x5cc>
 8001bcc:	e01b      	b.n	8001c06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd4:	4a63      	ldr	r2, [pc, #396]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f861 	bl	8000ca4 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be6:	f7ff f85d 	bl	8000ca4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e105      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ef      	bne.n	8001be6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80f9 	beq.w	8001e02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	f040 80cf 	bne.w	8001db8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c1a:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d12c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d123      	bne.n	8001c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d11b      	bne.n	8001c88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d113      	bne.n	8001c88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d109      	bne.n	8001c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	3b01      	subs	r3, #1
 8001c82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d071      	beq.n	8001d6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d068      	beq.n	8001d60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0ac      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb6:	f7fe fff5 	bl	8000ca4 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7fe fff1 	bl	8000ca4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e099      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_OscConfig+0x788>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cec:	3a01      	subs	r2, #1
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf6:	0212      	lsls	r2, r2, #8
 8001cf8:	4311      	orrs	r1, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cfe:	0852      	lsrs	r2, r2, #1
 8001d00:	3a01      	subs	r2, #1
 8001d02:	0552      	lsls	r2, r2, #21
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d0a:	0852      	lsrs	r2, r2, #1
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	0652      	lsls	r2, r2, #25
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d16:	06d2      	lsls	r2, r2, #27
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	4912      	ldr	r1, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d38:	f7fe ffb4 	bl	8000ca4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe ffb0 	bl	8000ca4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e058      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_RCC_OscConfig+0x784>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5e:	e050      	b.n	8001e02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e04f      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d144      	bne.n	8001e02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d90:	f7fe ff88 	bl	8000ca4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe ff84 	bl	8000ca4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e02c      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x7b8>
 8001db6:	e024      	b.n	8001e02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d01f      	beq.n	8001dfe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff6b 	bl	8000ca4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe ff67 	bl	8000ca4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4905      	ldr	r1, [pc, #20]	; (8001e0c <HAL_RCC_OscConfig+0x82c>)
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x830>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
 8001dfc:	e001      	b.n	8001e02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	feeefffc 	.word	0xfeeefffc

08001e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e11d      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b90      	ldr	r3, [pc, #576]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	498b      	ldr	r1, [pc, #556]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e105      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	497b      	ldr	r1, [pc, #492]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d079      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d11e      	bne.n	8001edc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0dc      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001eae:	f000 fa09 	bl	80022c4 <RCC_GetSysClockFreqFromPLLSource>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a70      	ldr	r2, [pc, #448]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d946      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d140      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ec6:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ece:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e035      	b.n	8001f48 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d115      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b9      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0ad      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0a5      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f1c:	f000 f8b4 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_RCC_ClockConfig+0x264>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d90f      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f28:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 0203 	bic.w	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4947      	ldr	r1, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5a:	f7fe fea3 	bl	8000ca4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe fe9f 	bl	8000ca4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e077      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 020c 	and.w	r2, r3, #12
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d1eb      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d208      	bcs.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	492b      	ldr	r1, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d210      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	4923      	ldr	r1, [pc, #140]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e036      	b.n	8002068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4910      	ldr	r1, [pc, #64]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002038:	f000 f826 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <HAL_RCC_ClockConfig+0x268>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x26c>)
 8002056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fdd1 	bl	8000c04 <HAL_InitTick>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]

  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	04c4b400 	.word	0x04c4b400
 800207c:	08004ad4 	.word	0x08004ad4
 8002080:	20000000 	.word	0x20000000
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x34>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11e      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e004      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d101      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_RCC_GetSysClockFreq+0x114>)
 800210e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d134      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0xa6>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xac>
 800212c:	e005      	b.n	800213a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_GetSysClockFreq+0x110>)
 8002130:	617b      	str	r3, [r7, #20]
      break;
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_GetSysClockFreq+0x114>)
 8002136:	617b      	str	r3, [r7, #20]
      break;
 8002138:	e002      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	617b      	str	r3, [r7, #20]
      break;
 800213e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	0e5b      	lsrs	r3, r3, #25
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	3301      	adds	r3, #1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002180:	69bb      	ldr	r3, [r7, #24]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	08004aec 	.word	0x08004aec
 8002198:	00f42400 	.word	0x00f42400
 800219c:	007a1200 	.word	0x007a1200

080021a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021bc:	f7ff fff0 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4904      	ldr	r1, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08004ae4 	.word	0x08004ae4

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e8:	f7ff ffda 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0adb      	lsrs	r3, r3, #11
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_RCC_GetPCLK2Freq+0x28>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08004ae4 	.word	0x08004ae4

08002210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f916 	bl	8001458 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
 800222e:	e014      	b.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b22      	ldr	r3, [pc, #136]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6593      	str	r3, [r2, #88]	; 0x58
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff f906 	bl	8001458 <HAL_PWREx_GetVoltageRange>
 800224c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d10b      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d913      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2ba0      	cmp	r3, #160	; 0xa0
 800226c:	d902      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226e:	2302      	movs	r3, #2
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e00d      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e00a      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b7f      	cmp	r3, #127	; 0x7f
 800227e:	d902      	bls.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e004      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d101      	bne.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 020f 	bic.w	r2, r3, #15
 8002298:	4909      	ldr	r1, [pc, #36]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40022000 	.word	0x40022000

080022c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d00b      	beq.n	80022f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d825      	bhi.n	800232c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d008      	beq.n	80022f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d11f      	bne.n	800232c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022ee:	613b      	str	r3, [r7, #16]
    break;
 80022f0:	e01f      	b.n	8002332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80022f4:	613b      	str	r3, [r7, #16]
    break;
 80022f6:	e01c      	b.n	8002332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e005      	b.n	8002320 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	613b      	str	r3, [r7, #16]
    break;
 800232a:	e002      	b.n	8002332 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
    break;
 8002330:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	3301      	adds	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	fb03 f202 	mul.w	r2, r3, r2
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0e5b      	lsrs	r3, r3, #25
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002372:	683b      	ldr	r3, [r7, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40021000 	.word	0x40021000
 8002384:	00f42400 	.word	0x00f42400
 8002388:	007a1200 	.word	0x007a1200
 800238c:	08004aec 	.word	0x08004aec

08002390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002398:	2300      	movs	r3, #0
 800239a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800239c:	2300      	movs	r3, #0
 800239e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d040      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d02a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d825      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023b8:	2b60      	cmp	r3, #96	; 0x60
 80023ba:	d026      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023bc:	2b60      	cmp	r3, #96	; 0x60
 80023be:	d821      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d006      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d81d      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d010      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80023d0:	e018      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a88      	ldr	r2, [pc, #544]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023de:	e015      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb02 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f0:	e00c      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3320      	adds	r3, #32
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fbed 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002402:	e003      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	74fb      	strb	r3, [r7, #19]
      break;
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800240a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002412:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002418:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002420:	4975      	ldr	r1, [pc, #468]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002428:	e001      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d047      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d030      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d82a      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800244a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800244e:	d02a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002454:	d824      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d81e      	bhi.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246a:	d010      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800246c:	e018      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246e:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800247a:	e015      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fab4 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800248c:	e00c      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fb9f 	bl	8002bd8 <RCCEx_PLLSAI2_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800249e:	e003      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	74fb      	strb	r3, [r7, #19]
      break;
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80024a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ae:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	494e      	ldr	r1, [pc, #312]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80024c4:	e001      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 809f 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800251a:	f7fe fbc3 	bl	8000ca4 <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002520:	e009      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe fbbf 	bl	8000ca4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d902      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	74fb      	strb	r3, [r7, #19]
        break;
 8002534:	e005      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ef      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d15b      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01f      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d019      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002570:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002578:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d016      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fb7e 	bl	8000ca4 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025aa:	e00b      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fb7a 	bl	8000ca4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d902      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	74fb      	strb	r3, [r7, #19]
            break;
 80025c2:	e006      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ec      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025f0:	e008      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	74bb      	strb	r3, [r7, #18]
 80025f6:	e005      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002604:	7c7b      	ldrb	r3, [r7, #17]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4ba0      	ldr	r3, [pc, #640]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a9f      	ldr	r2, [pc, #636]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002622:	4b9a      	ldr	r3, [pc, #616]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	4996      	ldr	r1, [pc, #600]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002644:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 020c 	bic.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	498e      	ldr	r1, [pc, #568]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002666:	4b89      	ldr	r3, [pc, #548]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	4985      	ldr	r1, [pc, #532]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002688:	4b80      	ldr	r3, [pc, #512]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	497d      	ldr	r1, [pc, #500]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b8:	4974      	ldr	r1, [pc, #464]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	496c      	ldr	r1, [pc, #432]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fc:	4963      	ldr	r1, [pc, #396]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271e:	495b      	ldr	r1, [pc, #364]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	4952      	ldr	r1, [pc, #328]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	494a      	ldr	r1, [pc, #296]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	4941      	ldr	r1, [pc, #260]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a6:	4939      	ldr	r1, [pc, #228]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d028      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	4930      	ldr	r1, [pc, #192]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4a2b      	ldr	r2, [pc, #172]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e4:	60d3      	str	r3, [r2, #12]
 80027e6:	e011      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2101      	movs	r1, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f8f9 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d04d      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002820:	d108      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002832:	e012      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800283a:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002840:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002862:	d106      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286e:	60d3      	str	r3, [r2, #12]
 8002870:	e020      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287a:	d109      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a02      	ldr	r2, [pc, #8]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	60d3      	str	r3, [r2, #12]
 8002888:	e014      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f8a5 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d028      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ce:	4947      	ldr	r1, [pc, #284]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028de:	d106      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a41      	ldr	r2, [pc, #260]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e011      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f6:	d10c      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f876 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01e      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800291e:	4b33      	ldr	r3, [pc, #204]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292e:	492f      	ldr	r1, [pc, #188]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002940:	d10c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	2102      	movs	r1, #2
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f851 	bl	80029f0 <RCCEx_PLLSAI1_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800296a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800296e:	f023 0204 	bic.w	r2, r3, #4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002978:	491c      	ldr	r1, [pc, #112]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002992:	f023 0218 	bic.w	r2, r3, #24
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	4913      	ldr	r1, [pc, #76]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	490a      	ldr	r1, [pc, #40]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d105      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029fe:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d103      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d142      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e03f      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d018      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0x72>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d825      	bhi.n	8002a80 <RCCEx_PLLSAI1_Config+0x90>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d002      	beq.n	8002a3e <RCCEx_PLLSAI1_Config+0x4e>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d009      	beq.n	8002a50 <RCCEx_PLLSAI1_Config+0x60>
 8002a3c:	e020      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a3e:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11d      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4e:	e01a      	b.n	8002a86 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a50:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e013      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a62:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a7e:	e006      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e004      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a86:	bf00      	nop
 8002a88:	e002      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4949      	ldr	r1, [pc, #292]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8086 	bne.w	8002bbc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ab0:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a44      	ldr	r2, [pc, #272]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe f8f2 	bl	8000ca4 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac4:	f7fe f8ee 	bl	8000ca4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ef      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d168      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d113      	bne.n	8002b18 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
 8002afc:	0211      	lsls	r1, r2, #8
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	06d2      	lsls	r2, r2, #27
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6852      	ldr	r2, [r2, #4]
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	492d      	ldr	r1, [pc, #180]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	610b      	str	r3, [r1, #16]
 8002b16:	e02d      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d115      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	0211      	lsls	r1, r2, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6912      	ldr	r2, [r2, #16]
 8002b30:	0852      	lsrs	r2, r2, #1
 8002b32:	3a01      	subs	r2, #1
 8002b34:	0552      	lsls	r2, r2, #21
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	430a      	orrs	r2, r1
 8002b42:	4921      	ldr	r1, [pc, #132]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	610b      	str	r3, [r1, #16]
 8002b48:	e014      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	0211      	lsls	r1, r2, #8
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6952      	ldr	r2, [r2, #20]
 8002b5c:	0852      	lsrs	r2, r2, #1
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0652      	lsls	r2, r2, #25
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fe f890 	bl	8000ca4 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b86:	e009      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b88:	f7fe f88c 	bl	8000ca4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	73fb      	strb	r3, [r7, #15]
          break;
 8002b9a:	e005      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	07ff800f 	.word	0x07ff800f
 8002bd0:	ff9f800f 	.word	0xff9f800f
 8002bd4:	f9ff800f 	.word	0xf9ff800f

08002bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be6:	4b72      	ldr	r3, [pc, #456]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bf2:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d103      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
       ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d142      	bne.n	8002c90 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e03f      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d018      	beq.n	8002c4a <RCCEx_PLLSAI2_Config+0x72>
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d825      	bhi.n	8002c68 <RCCEx_PLLSAI2_Config+0x90>
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <RCCEx_PLLSAI2_Config+0x4e>
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d009      	beq.n	8002c38 <RCCEx_PLLSAI2_Config+0x60>
 8002c24:	e020      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c26:	4b62      	ldr	r3, [pc, #392]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c36:	e01a      	b.n	8002c6e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e013      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c4a:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c56:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c66:	e006      	b.n	8002c76 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e004      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4949      	ldr	r1, [pc, #292]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 8086 	bne.w	8002da4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c98:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a44      	ldr	r2, [pc, #272]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7fd fffe 	bl	8000ca4 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002caa:	e009      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cac:	f7fd fffa 	bl	8000ca4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cbe:	e005      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ef      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d168      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6892      	ldr	r2, [r2, #8]
 8002ce4:	0211      	lsls	r1, r2, #8
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68d2      	ldr	r2, [r2, #12]
 8002cea:	06d2      	lsls	r2, r2, #27
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6852      	ldr	r2, [r2, #4]
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	492d      	ldr	r1, [pc, #180]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	614b      	str	r3, [r1, #20]
 8002cfe:	e02d      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d115      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6892      	ldr	r2, [r2, #8]
 8002d12:	0211      	lsls	r1, r2, #8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6912      	ldr	r2, [r2, #16]
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	0552      	lsls	r2, r2, #21
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6852      	ldr	r2, [r2, #4]
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4921      	ldr	r1, [pc, #132]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	614b      	str	r3, [r1, #20]
 8002d30:	e014      	b.n	8002d5c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <RCCEx_PLLSAI2_Config+0x1e4>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	0211      	lsls	r1, r2, #8
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6952      	ldr	r2, [r2, #20]
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0652      	lsls	r2, r2, #25
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6852      	ldr	r2, [r2, #4]
 8002d50:	3a01      	subs	r2, #1
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	430a      	orrs	r2, r1
 8002d56:	4916      	ldr	r1, [pc, #88]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fd ff9c 	bl	8000ca4 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d6e:	e009      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d70:	f7fd ff98 	bl	8000ca4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
          break;
 8002d82:	e005      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	4904      	ldr	r1, [pc, #16]	; (8002db0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	07ff800f 	.word	0x07ff800f
 8002db8:	ff9f800f 	.word	0xff9f800f
 8002dbc:	f9ff800f 	.word	0xf9ff800f

08002dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fd8d 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	; 0x24
 8002dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fbb4 	bl	8003578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8b5 	bl	8002f80 <UART_SetConfig>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e01b      	b.n	8002e58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fc33 	bl	80036bc <UART_CheckIdleState>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d17c      	bne.n	8002f74 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_Transmit+0x26>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e075      	b.n	8002f76 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9a:	f7fd ff03 	bl	8000ca4 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb8:	d108      	bne.n	8002ecc <HAL_UART_Transmit+0x6c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e003      	b.n	8002ed4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ed4:	e031      	b.n	8002f3a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fc95 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e03e      	b.n	8002f76 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	3302      	adds	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e008      	b.n	8002f28 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1c7      	bne.n	8002ed6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2140      	movs	r1, #64	; 0x40
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fc5d 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e006      	b.n	8002f76 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b08c      	sub	sp, #48	; 0x30
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4baa      	ldr	r3, [pc, #680]	; (8003258 <UART_SetConfig+0x2d8>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9f      	ldr	r2, [pc, #636]	; (800325c <UART_SetConfig+0x2dc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ff6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	430b      	orrs	r3, r1
 8003002:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f023 010f 	bic.w	r1, r3, #15
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a90      	ldr	r2, [pc, #576]	; (8003260 <UART_SetConfig+0x2e0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <UART_SetConfig+0xf0>
 8003024:	4b8f      	ldr	r3, [pc, #572]	; (8003264 <UART_SetConfig+0x2e4>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b03      	cmp	r3, #3
 8003030:	d81a      	bhi.n	8003068 <UART_SetConfig+0xe8>
 8003032:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <UART_SetConfig+0xb8>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	08003049 	.word	0x08003049
 800303c:	08003059 	.word	0x08003059
 8003040:	08003051 	.word	0x08003051
 8003044:	08003061 	.word	0x08003061
 8003048:	2301      	movs	r3, #1
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e116      	b.n	800327e <UART_SetConfig+0x2fe>
 8003050:	2302      	movs	r3, #2
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003056:	e112      	b.n	800327e <UART_SetConfig+0x2fe>
 8003058:	2304      	movs	r3, #4
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e10e      	b.n	800327e <UART_SetConfig+0x2fe>
 8003060:	2308      	movs	r3, #8
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003066:	e10a      	b.n	800327e <UART_SetConfig+0x2fe>
 8003068:	2310      	movs	r3, #16
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306e:	e106      	b.n	800327e <UART_SetConfig+0x2fe>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a7c      	ldr	r2, [pc, #496]	; (8003268 <UART_SetConfig+0x2e8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d138      	bne.n	80030ec <UART_SetConfig+0x16c>
 800307a:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <UART_SetConfig+0x2e4>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d82d      	bhi.n	80030e4 <UART_SetConfig+0x164>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <UART_SetConfig+0x110>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030c5 	.word	0x080030c5
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080030e5 	.word	0x080030e5
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030e5 	.word	0x080030e5
 80030a8:	080030e5 	.word	0x080030e5
 80030ac:	080030e5 	.word	0x080030e5
 80030b0:	080030cd 	.word	0x080030cd
 80030b4:	080030e5 	.word	0x080030e5
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030dd 	.word	0x080030dd
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ca:	e0d8      	b.n	800327e <UART_SetConfig+0x2fe>
 80030cc:	2302      	movs	r3, #2
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e0d4      	b.n	800327e <UART_SetConfig+0x2fe>
 80030d4:	2304      	movs	r3, #4
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e0d0      	b.n	800327e <UART_SetConfig+0x2fe>
 80030dc:	2308      	movs	r3, #8
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e2:	e0cc      	b.n	800327e <UART_SetConfig+0x2fe>
 80030e4:	2310      	movs	r3, #16
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e0c8      	b.n	800327e <UART_SetConfig+0x2fe>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a5e      	ldr	r2, [pc, #376]	; (800326c <UART_SetConfig+0x2ec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d125      	bne.n	8003142 <UART_SetConfig+0x1c2>
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <UART_SetConfig+0x2e4>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d016      	beq.n	8003132 <UART_SetConfig+0x1b2>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d818      	bhi.n	800313a <UART_SetConfig+0x1ba>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d00a      	beq.n	8003122 <UART_SetConfig+0x1a2>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d814      	bhi.n	800313a <UART_SetConfig+0x1ba>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <UART_SetConfig+0x19a>
 8003114:	2b10      	cmp	r3, #16
 8003116:	d008      	beq.n	800312a <UART_SetConfig+0x1aa>
 8003118:	e00f      	b.n	800313a <UART_SetConfig+0x1ba>
 800311a:	2300      	movs	r3, #0
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003120:	e0ad      	b.n	800327e <UART_SetConfig+0x2fe>
 8003122:	2302      	movs	r3, #2
 8003124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003128:	e0a9      	b.n	800327e <UART_SetConfig+0x2fe>
 800312a:	2304      	movs	r3, #4
 800312c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003130:	e0a5      	b.n	800327e <UART_SetConfig+0x2fe>
 8003132:	2308      	movs	r3, #8
 8003134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003138:	e0a1      	b.n	800327e <UART_SetConfig+0x2fe>
 800313a:	2310      	movs	r3, #16
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003140:	e09d      	b.n	800327e <UART_SetConfig+0x2fe>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4a      	ldr	r2, [pc, #296]	; (8003270 <UART_SetConfig+0x2f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d125      	bne.n	8003198 <UART_SetConfig+0x218>
 800314c:	4b45      	ldr	r3, [pc, #276]	; (8003264 <UART_SetConfig+0x2e4>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003156:	2bc0      	cmp	r3, #192	; 0xc0
 8003158:	d016      	beq.n	8003188 <UART_SetConfig+0x208>
 800315a:	2bc0      	cmp	r3, #192	; 0xc0
 800315c:	d818      	bhi.n	8003190 <UART_SetConfig+0x210>
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d00a      	beq.n	8003178 <UART_SetConfig+0x1f8>
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d814      	bhi.n	8003190 <UART_SetConfig+0x210>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <UART_SetConfig+0x1f0>
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d008      	beq.n	8003180 <UART_SetConfig+0x200>
 800316e:	e00f      	b.n	8003190 <UART_SetConfig+0x210>
 8003170:	2300      	movs	r3, #0
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e082      	b.n	800327e <UART_SetConfig+0x2fe>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e07e      	b.n	800327e <UART_SetConfig+0x2fe>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e07a      	b.n	800327e <UART_SetConfig+0x2fe>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e076      	b.n	800327e <UART_SetConfig+0x2fe>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e072      	b.n	800327e <UART_SetConfig+0x2fe>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a35      	ldr	r2, [pc, #212]	; (8003274 <UART_SetConfig+0x2f4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12a      	bne.n	80031f8 <UART_SetConfig+0x278>
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <UART_SetConfig+0x2e4>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b0:	d01a      	beq.n	80031e8 <UART_SetConfig+0x268>
 80031b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b6:	d81b      	bhi.n	80031f0 <UART_SetConfig+0x270>
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d00c      	beq.n	80031d8 <UART_SetConfig+0x258>
 80031be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c2:	d815      	bhi.n	80031f0 <UART_SetConfig+0x270>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <UART_SetConfig+0x250>
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031cc:	d008      	beq.n	80031e0 <UART_SetConfig+0x260>
 80031ce:	e00f      	b.n	80031f0 <UART_SetConfig+0x270>
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e052      	b.n	800327e <UART_SetConfig+0x2fe>
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031de:	e04e      	b.n	800327e <UART_SetConfig+0x2fe>
 80031e0:	2304      	movs	r3, #4
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e6:	e04a      	b.n	800327e <UART_SetConfig+0x2fe>
 80031e8:	2308      	movs	r3, #8
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ee:	e046      	b.n	800327e <UART_SetConfig+0x2fe>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f6:	e042      	b.n	800327e <UART_SetConfig+0x2fe>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <UART_SetConfig+0x2dc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d13a      	bne.n	8003278 <UART_SetConfig+0x2f8>
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <UART_SetConfig+0x2e4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800320c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003210:	d01a      	beq.n	8003248 <UART_SetConfig+0x2c8>
 8003212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003216:	d81b      	bhi.n	8003250 <UART_SetConfig+0x2d0>
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321c:	d00c      	beq.n	8003238 <UART_SetConfig+0x2b8>
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003222:	d815      	bhi.n	8003250 <UART_SetConfig+0x2d0>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <UART_SetConfig+0x2b0>
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d008      	beq.n	8003240 <UART_SetConfig+0x2c0>
 800322e:	e00f      	b.n	8003250 <UART_SetConfig+0x2d0>
 8003230:	2300      	movs	r3, #0
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e022      	b.n	800327e <UART_SetConfig+0x2fe>
 8003238:	2302      	movs	r3, #2
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e01e      	b.n	800327e <UART_SetConfig+0x2fe>
 8003240:	2304      	movs	r3, #4
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e01a      	b.n	800327e <UART_SetConfig+0x2fe>
 8003248:	2308      	movs	r3, #8
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324e:	e016      	b.n	800327e <UART_SetConfig+0x2fe>
 8003250:	2310      	movs	r3, #16
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e012      	b.n	800327e <UART_SetConfig+0x2fe>
 8003258:	cfff69f3 	.word	0xcfff69f3
 800325c:	40008000 	.word	0x40008000
 8003260:	40013800 	.word	0x40013800
 8003264:	40021000 	.word	0x40021000
 8003268:	40004400 	.word	0x40004400
 800326c:	40004800 	.word	0x40004800
 8003270:	40004c00 	.word	0x40004c00
 8003274:	40005000 	.word	0x40005000
 8003278:	2310      	movs	r3, #16
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4aae      	ldr	r2, [pc, #696]	; (800353c <UART_SetConfig+0x5bc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f040 8097 	bne.w	80033b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800328a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800328e:	2b08      	cmp	r3, #8
 8003290:	d823      	bhi.n	80032da <UART_SetConfig+0x35a>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x318>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032cb 	.word	0x080032cb
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032db 	.word	0x080032db
 80032b4:	080032db 	.word	0x080032db
 80032b8:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7fe ff7c 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c2:	e010      	b.n	80032e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b9e      	ldr	r3, [pc, #632]	; (8003540 <UART_SetConfig+0x5c0>)
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fedd 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032d0:	e009      	b.n	80032e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032d8:	e005      	b.n	80032e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8130 	beq.w	800354e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	4a94      	ldr	r2, [pc, #592]	; (8003544 <UART_SetConfig+0x5c4>)
 80032f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f8:	461a      	mov	r2, r3
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003300:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	429a      	cmp	r2, r3
 8003310:	d305      	bcc.n	800331e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	429a      	cmp	r2, r3
 800331c:	d903      	bls.n	8003326 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003324:	e113      	b.n	800354e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2200      	movs	r2, #0
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	60fa      	str	r2, [r7, #12]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	4a84      	ldr	r2, [pc, #528]	; (8003544 <UART_SetConfig+0x5c4>)
 8003334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003338:	b29b      	uxth	r3, r3
 800333a:	2200      	movs	r2, #0
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003348:	f7fc ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	020b      	lsls	r3, r1, #8
 800335e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003362:	0202      	lsls	r2, r0, #8
 8003364:	6979      	ldr	r1, [r7, #20]
 8003366:	6849      	ldr	r1, [r1, #4]
 8003368:	0849      	lsrs	r1, r1, #1
 800336a:	2000      	movs	r0, #0
 800336c:	460c      	mov	r4, r1
 800336e:	4605      	mov	r5, r0
 8003370:	eb12 0804 	adds.w	r8, r2, r4
 8003374:	eb43 0905 	adc.w	r9, r3, r5
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	469a      	mov	sl, r3
 8003380:	4693      	mov	fp, r2
 8003382:	4652      	mov	r2, sl
 8003384:	465b      	mov	r3, fp
 8003386:	4640      	mov	r0, r8
 8003388:	4649      	mov	r1, r9
 800338a:	f7fc ff89 	bl	80002a0 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4613      	mov	r3, r2
 8003394:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339c:	d308      	bcc.n	80033b0 <UART_SetConfig+0x430>
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a4:	d204      	bcs.n	80033b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e0ce      	b.n	800354e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033b6:	e0ca      	b.n	800354e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	d166      	bne.n	8003490 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80033c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d827      	bhi.n	800341a <UART_SetConfig+0x49a>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0x450>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800341b 	.word	0x0800341b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe fee0 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80033f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033fa:	e014      	b.n	8003426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033fc:	f7fe fef2 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003402:	e010      	b.n	8003426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <UART_SetConfig+0x5c0>)
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fe3d 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003410:	e009      	b.n	8003426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003418:	e005      	b.n	8003426 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8090 	beq.w	800354e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a44      	ldr	r2, [pc, #272]	; (8003544 <UART_SetConfig+0x5c4>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d916      	bls.n	8003488 <UART_SetConfig+0x508>
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d212      	bcs.n	8003488 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f023 030f 	bic.w	r3, r3, #15
 800346a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	b29a      	uxth	r2, r3
 8003478:	8bfb      	ldrh	r3, [r7, #30]
 800347a:	4313      	orrs	r3, r2
 800347c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	8bfa      	ldrh	r2, [r7, #30]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e062      	b.n	800354e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800348e:	e05e      	b.n	800354e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003494:	2b08      	cmp	r3, #8
 8003496:	d828      	bhi.n	80034ea <UART_SetConfig+0x56a>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x520>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fe78 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fe8a 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <UART_SetConfig+0x5c0>)
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fdd5 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 80034de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034f4:	bf00      	nop
    }

    if (pclk != 0U)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d028      	beq.n	800354e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	4a10      	ldr	r2, [pc, #64]	; (8003544 <UART_SetConfig+0x5c4>)
 8003502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003506:	461a      	mov	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	fbb3 f2f2 	udiv	r2, r3, r2
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	441a      	add	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d910      	bls.n	8003548 <UART_SetConfig+0x5c8>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d20c      	bcs.n	8003548 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	b29a      	uxth	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e009      	b.n	800354e <UART_SetConfig+0x5ce>
 800353a:	bf00      	nop
 800353c:	40008000 	.word	0x40008000
 8003540:	00f42400 	.word	0x00f42400
 8003544:	08004b1c 	.word	0x08004b1c
      }
      else
      {
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2201      	movs	r2, #1
 8003552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2201      	movs	r2, #1
 800355a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800356a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800356e:	4618      	mov	r0, r3
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01a      	beq.n	800368e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003676:	d10a      	bne.n	800368e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b098      	sub	sp, #96	; 0x60
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036cc:	f7fd faea 	bl	8000ca4 <HAL_GetTick>
 80036d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d12f      	bne.n	8003740 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e8:	2200      	movs	r2, #0
 80036ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f88e 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370e:	653b      	str	r3, [r7, #80]	; 0x50
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
 800371a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800371e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e6      	bne.n	80036fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e063      	b.n	8003808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d149      	bne.n	80037e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f857 	bl	8003810 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	623b      	str	r3, [r7, #32]
   return(result);
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
 8003788:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e6      	bne.n	8003768 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3308      	adds	r3, #8
 80037b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ba:	61fa      	str	r2, [r7, #28]
 80037bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	617b      	str	r3, [r7, #20]
   return(result);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e5      	bne.n	800379a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e012      	b.n	8003808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3758      	adds	r7, #88	; 0x58
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	e049      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d045      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fd fa3b 	bl	8000ca4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <UART_WaitOnFlagUntilTimeout+0x30>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e048      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d031      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d110      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2208      	movs	r2, #8
 8003866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f838 	bl	80038de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2208      	movs	r2, #8
 8003872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e029      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d111      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800389a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f81e 	bl	80038de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e00f      	b.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d0a6      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038de:	b480      	push	{r7}
 80038e0:	b095      	sub	sp, #84	; 0x54
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
 8003906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800390a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e6      	bne.n	80038e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	61fb      	str	r3, [r7, #28]
   return(result);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e3      	bne.n	8003918 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d118      	bne.n	800398a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	60bb      	str	r3, [r7, #8]
   return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f023 0310 	bic.w	r3, r3, #16
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e6      	bne.n	8003958 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800399e:	bf00      	nop
 80039a0:	3754      	adds	r7, #84	; 0x54
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80039bc:	2302      	movs	r3, #2
 80039be:	e027      	b.n	8003a10 <HAL_UARTEx_DisableFifoMode+0x66>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2224      	movs	r2, #36	; 0x24
 80039cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e02d      	b.n	8003a90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f84f 	bl	8003b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e02d      	b.n	8003b0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f811 	bl	8003b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b34:	e031      	b.n	8003b9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b36:	2308      	movs	r3, #8
 8003b38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	0e5b      	lsrs	r3, r3, #25
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	0f5b      	lsrs	r3, r3, #29
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b5e:	7bbb      	ldrb	r3, [r7, #14]
 8003b60:	7b3a      	ldrb	r2, [r7, #12]
 8003b62:	4911      	ldr	r1, [pc, #68]	; (8003ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8003b64:	5c8a      	ldrb	r2, [r1, r2]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b6a:	7b3a      	ldrb	r2, [r7, #12]
 8003b6c:	490f      	ldr	r1, [pc, #60]	; (8003bac <UARTEx_SetNbDataToProcess+0x98>)
 8003b6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	7b7a      	ldrb	r2, [r7, #13]
 8003b80:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8003b82:	5c8a      	ldrb	r2, [r1, r2]
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b88:	7b7a      	ldrb	r2, [r7, #13]
 8003b8a:	4908      	ldr	r1, [pc, #32]	; (8003bac <UARTEx_SetNbDataToProcess+0x98>)
 8003b8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	08004b34 	.word	0x08004b34
 8003bac:	08004b3c 	.word	0x08004b3c

08003bb0 <std>:
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bbe:	6083      	str	r3, [r0, #8]
 8003bc0:	8181      	strh	r1, [r0, #12]
 8003bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003bc4:	81c2      	strh	r2, [r0, #14]
 8003bc6:	6183      	str	r3, [r0, #24]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	2208      	movs	r2, #8
 8003bcc:	305c      	adds	r0, #92	; 0x5c
 8003bce:	f000 f9e5 	bl	8003f9c <memset>
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <std+0x38>)
 8003bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <std+0x3c>)
 8003bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <std+0x40>)
 8003bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <std+0x44>)
 8003be0:	6224      	str	r4, [r4, #32]
 8003be2:	6323      	str	r3, [r4, #48]	; 0x30
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	bf00      	nop
 8003be8:	08003ded 	.word	0x08003ded
 8003bec:	08003e0f 	.word	0x08003e0f
 8003bf0:	08003e47 	.word	0x08003e47
 8003bf4:	08003e6b 	.word	0x08003e6b

08003bf8 <stdio_exit_handler>:
 8003bf8:	4a02      	ldr	r2, [pc, #8]	; (8003c04 <stdio_exit_handler+0xc>)
 8003bfa:	4903      	ldr	r1, [pc, #12]	; (8003c08 <stdio_exit_handler+0x10>)
 8003bfc:	4803      	ldr	r0, [pc, #12]	; (8003c0c <stdio_exit_handler+0x14>)
 8003bfe:	f000 b869 	b.w	8003cd4 <_fwalk_sglue>
 8003c02:	bf00      	nop
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	08004935 	.word	0x08004935
 8003c0c:	20000018 	.word	0x20000018

08003c10 <cleanup_stdio>:
 8003c10:	6841      	ldr	r1, [r0, #4]
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <cleanup_stdio+0x34>)
 8003c14:	4299      	cmp	r1, r3
 8003c16:	b510      	push	{r4, lr}
 8003c18:	4604      	mov	r4, r0
 8003c1a:	d001      	beq.n	8003c20 <cleanup_stdio+0x10>
 8003c1c:	f000 fe8a 	bl	8004934 <_fflush_r>
 8003c20:	68a1      	ldr	r1, [r4, #8]
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <cleanup_stdio+0x38>)
 8003c24:	4299      	cmp	r1, r3
 8003c26:	d002      	beq.n	8003c2e <cleanup_stdio+0x1e>
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 fe83 	bl	8004934 <_fflush_r>
 8003c2e:	68e1      	ldr	r1, [r4, #12]
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <cleanup_stdio+0x3c>)
 8003c32:	4299      	cmp	r1, r3
 8003c34:	d004      	beq.n	8003c40 <cleanup_stdio+0x30>
 8003c36:	4620      	mov	r0, r4
 8003c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3c:	f000 be7a 	b.w	8004934 <_fflush_r>
 8003c40:	bd10      	pop	{r4, pc}
 8003c42:	bf00      	nop
 8003c44:	20000174 	.word	0x20000174
 8003c48:	200001dc 	.word	0x200001dc
 8003c4c:	20000244 	.word	0x20000244

08003c50 <global_stdio_init.part.0>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <global_stdio_init.part.0+0x30>)
 8003c54:	4c0b      	ldr	r4, [pc, #44]	; (8003c84 <global_stdio_init.part.0+0x34>)
 8003c56:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <global_stdio_init.part.0+0x38>)
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2104      	movs	r1, #4
 8003c60:	f7ff ffa6 	bl	8003bb0 <std>
 8003c64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2109      	movs	r1, #9
 8003c6c:	f7ff ffa0 	bl	8003bb0 <std>
 8003c70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c74:	2202      	movs	r2, #2
 8003c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c7a:	2112      	movs	r1, #18
 8003c7c:	f7ff bf98 	b.w	8003bb0 <std>
 8003c80:	200002ac 	.word	0x200002ac
 8003c84:	20000174 	.word	0x20000174
 8003c88:	08003bf9 	.word	0x08003bf9

08003c8c <__sfp_lock_acquire>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	; (8003c94 <__sfp_lock_acquire+0x8>)
 8003c8e:	f000 b9fd 	b.w	800408c <__retarget_lock_acquire_recursive>
 8003c92:	bf00      	nop
 8003c94:	200002b5 	.word	0x200002b5

08003c98 <__sfp_lock_release>:
 8003c98:	4801      	ldr	r0, [pc, #4]	; (8003ca0 <__sfp_lock_release+0x8>)
 8003c9a:	f000 b9f8 	b.w	800408e <__retarget_lock_release_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200002b5 	.word	0x200002b5

08003ca4 <__sinit>:
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	f7ff fff0 	bl	8003c8c <__sfp_lock_acquire>
 8003cac:	6a23      	ldr	r3, [r4, #32]
 8003cae:	b11b      	cbz	r3, 8003cb8 <__sinit+0x14>
 8003cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb4:	f7ff bff0 	b.w	8003c98 <__sfp_lock_release>
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <__sinit+0x28>)
 8003cba:	6223      	str	r3, [r4, #32]
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <__sinit+0x2c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f5      	bne.n	8003cb0 <__sinit+0xc>
 8003cc4:	f7ff ffc4 	bl	8003c50 <global_stdio_init.part.0>
 8003cc8:	e7f2      	b.n	8003cb0 <__sinit+0xc>
 8003cca:	bf00      	nop
 8003ccc:	08003c11 	.word	0x08003c11
 8003cd0:	200002ac 	.word	0x200002ac

08003cd4 <_fwalk_sglue>:
 8003cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd8:	4607      	mov	r7, r0
 8003cda:	4688      	mov	r8, r1
 8003cdc:	4614      	mov	r4, r2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ce4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ce8:	d505      	bpl.n	8003cf6 <_fwalk_sglue+0x22>
 8003cea:	6824      	ldr	r4, [r4, #0]
 8003cec:	2c00      	cmp	r4, #0
 8003cee:	d1f7      	bne.n	8003ce0 <_fwalk_sglue+0xc>
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d907      	bls.n	8003d0c <_fwalk_sglue+0x38>
 8003cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d00:	3301      	adds	r3, #1
 8003d02:	d003      	beq.n	8003d0c <_fwalk_sglue+0x38>
 8003d04:	4629      	mov	r1, r5
 8003d06:	4638      	mov	r0, r7
 8003d08:	47c0      	blx	r8
 8003d0a:	4306      	orrs	r6, r0
 8003d0c:	3568      	adds	r5, #104	; 0x68
 8003d0e:	e7e9      	b.n	8003ce4 <_fwalk_sglue+0x10>

08003d10 <iprintf>:
 8003d10:	b40f      	push	{r0, r1, r2, r3}
 8003d12:	b507      	push	{r0, r1, r2, lr}
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <iprintf+0x20>)
 8003d16:	ab04      	add	r3, sp, #16
 8003d18:	6808      	ldr	r0, [r1, #0]
 8003d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d1e:	6881      	ldr	r1, [r0, #8]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	f000 fad7 	bl	80042d4 <_vfiprintf_r>
 8003d26:	b003      	add	sp, #12
 8003d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr
 8003d30:	20000064 	.word	0x20000064

08003d34 <_puts_r>:
 8003d34:	6a03      	ldr	r3, [r0, #32]
 8003d36:	b570      	push	{r4, r5, r6, lr}
 8003d38:	6884      	ldr	r4, [r0, #8]
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	460e      	mov	r6, r1
 8003d3e:	b90b      	cbnz	r3, 8003d44 <_puts_r+0x10>
 8003d40:	f7ff ffb0 	bl	8003ca4 <__sinit>
 8003d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d46:	07db      	lsls	r3, r3, #31
 8003d48:	d405      	bmi.n	8003d56 <_puts_r+0x22>
 8003d4a:	89a3      	ldrh	r3, [r4, #12]
 8003d4c:	0598      	lsls	r0, r3, #22
 8003d4e:	d402      	bmi.n	8003d56 <_puts_r+0x22>
 8003d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d52:	f000 f99b 	bl	800408c <__retarget_lock_acquire_recursive>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	0719      	lsls	r1, r3, #28
 8003d5a:	d513      	bpl.n	8003d84 <_puts_r+0x50>
 8003d5c:	6923      	ldr	r3, [r4, #16]
 8003d5e:	b18b      	cbz	r3, 8003d84 <_puts_r+0x50>
 8003d60:	3e01      	subs	r6, #1
 8003d62:	68a3      	ldr	r3, [r4, #8]
 8003d64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	60a3      	str	r3, [r4, #8]
 8003d6c:	b9e9      	cbnz	r1, 8003daa <_puts_r+0x76>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da2e      	bge.n	8003dd0 <_puts_r+0x9c>
 8003d72:	4622      	mov	r2, r4
 8003d74:	210a      	movs	r1, #10
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f87b 	bl	8003e72 <__swbuf_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d007      	beq.n	8003d90 <_puts_r+0x5c>
 8003d80:	250a      	movs	r5, #10
 8003d82:	e007      	b.n	8003d94 <_puts_r+0x60>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f8b0 	bl	8003eec <__swsetup_r>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d0e7      	beq.n	8003d60 <_puts_r+0x2c>
 8003d90:	f04f 35ff 	mov.w	r5, #4294967295
 8003d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d96:	07da      	lsls	r2, r3, #31
 8003d98:	d405      	bmi.n	8003da6 <_puts_r+0x72>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	059b      	lsls	r3, r3, #22
 8003d9e:	d402      	bmi.n	8003da6 <_puts_r+0x72>
 8003da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003da2:	f000 f974 	bl	800408e <__retarget_lock_release_recursive>
 8003da6:	4628      	mov	r0, r5
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da04      	bge.n	8003db8 <_puts_r+0x84>
 8003dae:	69a2      	ldr	r2, [r4, #24]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	dc06      	bgt.n	8003dc2 <_puts_r+0x8e>
 8003db4:	290a      	cmp	r1, #10
 8003db6:	d004      	beq.n	8003dc2 <_puts_r+0x8e>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	7019      	strb	r1, [r3, #0]
 8003dc0:	e7cf      	b.n	8003d62 <_puts_r+0x2e>
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f854 	bl	8003e72 <__swbuf_r>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d1c9      	bne.n	8003d62 <_puts_r+0x2e>
 8003dce:	e7df      	b.n	8003d90 <_puts_r+0x5c>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	250a      	movs	r5, #10
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	701d      	strb	r5, [r3, #0]
 8003dda:	e7db      	b.n	8003d94 <_puts_r+0x60>

08003ddc <puts>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <puts+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff bfa7 	b.w	8003d34 <_puts_r>
 8003de6:	bf00      	nop
 8003de8:	20000064 	.word	0x20000064

08003dec <__sread>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	f000 f8fc 	bl	8003ff0 <_read_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	bfab      	itete	ge
 8003dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8003e00:	181b      	addge	r3, r3, r0
 8003e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e06:	bfac      	ite	ge
 8003e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e0a:	81a3      	strhlt	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__swrite>:
 8003e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	461f      	mov	r7, r3
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	05db      	lsls	r3, r3, #23
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	d505      	bpl.n	8003e2c <__swrite+0x1e>
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	2302      	movs	r3, #2
 8003e26:	2200      	movs	r2, #0
 8003e28:	f000 f8d0 	bl	8003fcc <_lseek_r>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f000 b8e7 	b.w	8004014 <_write_r>

08003e46 <__sseek>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 f8bd 	bl	8003fcc <_lseek_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	bf15      	itete	ne
 8003e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e62:	81a3      	strheq	r3, [r4, #12]
 8003e64:	bf18      	it	ne
 8003e66:	81a3      	strhne	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__sclose>:
 8003e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6e:	f000 b89d 	b.w	8003fac <_close_r>

08003e72 <__swbuf_r>:
 8003e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e74:	460e      	mov	r6, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	4605      	mov	r5, r0
 8003e7a:	b118      	cbz	r0, 8003e84 <__swbuf_r+0x12>
 8003e7c:	6a03      	ldr	r3, [r0, #32]
 8003e7e:	b90b      	cbnz	r3, 8003e84 <__swbuf_r+0x12>
 8003e80:	f7ff ff10 	bl	8003ca4 <__sinit>
 8003e84:	69a3      	ldr	r3, [r4, #24]
 8003e86:	60a3      	str	r3, [r4, #8]
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	071a      	lsls	r2, r3, #28
 8003e8c:	d525      	bpl.n	8003eda <__swbuf_r+0x68>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	b31b      	cbz	r3, 8003eda <__swbuf_r+0x68>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	1a98      	subs	r0, r3, r2
 8003e98:	6963      	ldr	r3, [r4, #20]
 8003e9a:	b2f6      	uxtb	r6, r6
 8003e9c:	4283      	cmp	r3, r0
 8003e9e:	4637      	mov	r7, r6
 8003ea0:	dc04      	bgt.n	8003eac <__swbuf_r+0x3a>
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 fd45 	bl	8004934 <_fflush_r>
 8003eaa:	b9e0      	cbnz	r0, 8003ee6 <__swbuf_r+0x74>
 8003eac:	68a3      	ldr	r3, [r4, #8]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	6022      	str	r2, [r4, #0]
 8003eb8:	701e      	strb	r6, [r3, #0]
 8003eba:	6962      	ldr	r2, [r4, #20]
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d004      	beq.n	8003ecc <__swbuf_r+0x5a>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	07db      	lsls	r3, r3, #31
 8003ec6:	d506      	bpl.n	8003ed6 <__swbuf_r+0x64>
 8003ec8:	2e0a      	cmp	r6, #10
 8003eca:	d104      	bne.n	8003ed6 <__swbuf_r+0x64>
 8003ecc:	4621      	mov	r1, r4
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 fd30 	bl	8004934 <_fflush_r>
 8003ed4:	b938      	cbnz	r0, 8003ee6 <__swbuf_r+0x74>
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eda:	4621      	mov	r1, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f805 	bl	8003eec <__swsetup_r>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d0d5      	beq.n	8003e92 <__swbuf_r+0x20>
 8003ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8003eea:	e7f4      	b.n	8003ed6 <__swbuf_r+0x64>

08003eec <__swsetup_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <__swsetup_r+0xac>)
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	b118      	cbz	r0, 8003f00 <__swsetup_r+0x14>
 8003ef8:	6a03      	ldr	r3, [r0, #32]
 8003efa:	b90b      	cbnz	r3, 8003f00 <__swsetup_r+0x14>
 8003efc:	f7ff fed2 	bl	8003ca4 <__sinit>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f06:	0718      	lsls	r0, r3, #28
 8003f08:	d422      	bmi.n	8003f50 <__swsetup_r+0x64>
 8003f0a:	06d9      	lsls	r1, r3, #27
 8003f0c:	d407      	bmi.n	8003f1e <__swsetup_r+0x32>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e034      	b.n	8003f88 <__swsetup_r+0x9c>
 8003f1e:	0758      	lsls	r0, r3, #29
 8003f20:	d512      	bpl.n	8003f48 <__swsetup_r+0x5c>
 8003f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f24:	b141      	cbz	r1, 8003f38 <__swsetup_r+0x4c>
 8003f26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f2a:	4299      	cmp	r1, r3
 8003f2c:	d002      	beq.n	8003f34 <__swsetup_r+0x48>
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 f8ae 	bl	8004090 <_free_r>
 8003f34:	2300      	movs	r3, #0
 8003f36:	6363      	str	r3, [r4, #52]	; 0x34
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	2300      	movs	r3, #0
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	f043 0308 	orr.w	r3, r3, #8
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	b94b      	cbnz	r3, 8003f68 <__swsetup_r+0x7c>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d003      	beq.n	8003f68 <__swsetup_r+0x7c>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 fd34 	bl	80049d0 <__smakebuf_r>
 8003f68:	89a0      	ldrh	r0, [r4, #12]
 8003f6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f6e:	f010 0301 	ands.w	r3, r0, #1
 8003f72:	d00a      	beq.n	8003f8a <__swsetup_r+0x9e>
 8003f74:	2300      	movs	r3, #0
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	6963      	ldr	r3, [r4, #20]
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	61a3      	str	r3, [r4, #24]
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	b943      	cbnz	r3, 8003f94 <__swsetup_r+0xa8>
 8003f82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f86:	d1c4      	bne.n	8003f12 <__swsetup_r+0x26>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	0781      	lsls	r1, r0, #30
 8003f8c:	bf58      	it	pl
 8003f8e:	6963      	ldrpl	r3, [r4, #20]
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	e7f4      	b.n	8003f7e <__swsetup_r+0x92>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e7f7      	b.n	8003f88 <__swsetup_r+0x9c>
 8003f98:	20000064 	.word	0x20000064

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <_close_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d06      	ldr	r5, [pc, #24]	; (8003fc8 <_close_r+0x1c>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fc fd65 	bl	8000a86 <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_close_r+0x1a>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_close_r+0x1a>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	200002b0 	.word	0x200002b0

08003fcc <_lseek_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	; (8003fec <_lseek_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fc fd7a 	bl	8000ad4 <_lseek>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_lseek_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_lseek_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	200002b0 	.word	0x200002b0

08003ff0 <_read_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	; (8004010 <_read_r+0x20>)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7fc fd08 	bl	8000a14 <_read>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_read_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_read_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	200002b0 	.word	0x200002b0

08004014 <_write_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	; (8004034 <_write_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fc fd13 	bl	8000a4e <_write>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_write_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_write_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200002b0 	.word	0x200002b0

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	; (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000064 	.word	0x20000064

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	; (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	; (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	; (8004088 <__libc_init_array+0x44>)
 8004058:	f000 fd28 	bl	8004aac <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004b80 	.word	0x08004b80
 8004080:	08004b80 	.word	0x08004b80
 8004084:	08004b80 	.word	0x08004b80
 8004088:	08004b84 	.word	0x08004b84

0800408c <__retarget_lock_acquire_recursive>:
 800408c:	4770      	bx	lr

0800408e <__retarget_lock_release_recursive>:
 800408e:	4770      	bx	lr

08004090 <_free_r>:
 8004090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004092:	2900      	cmp	r1, #0
 8004094:	d044      	beq.n	8004120 <_free_r+0x90>
 8004096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409a:	9001      	str	r0, [sp, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f1a1 0404 	sub.w	r4, r1, #4
 80040a2:	bfb8      	it	lt
 80040a4:	18e4      	addlt	r4, r4, r3
 80040a6:	f000 f8df 	bl	8004268 <__malloc_lock>
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <_free_r+0x94>)
 80040ac:	9801      	ldr	r0, [sp, #4]
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	b933      	cbnz	r3, 80040c0 <_free_r+0x30>
 80040b2:	6063      	str	r3, [r4, #4]
 80040b4:	6014      	str	r4, [r2, #0]
 80040b6:	b003      	add	sp, #12
 80040b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040bc:	f000 b8da 	b.w	8004274 <__malloc_unlock>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d908      	bls.n	80040d6 <_free_r+0x46>
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	1961      	adds	r1, r4, r5
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf01      	itttt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	1949      	addeq	r1, r1, r5
 80040d2:	6021      	streq	r1, [r4, #0]
 80040d4:	e7ed      	b.n	80040b2 <_free_r+0x22>
 80040d6:	461a      	mov	r2, r3
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b10b      	cbz	r3, 80040e0 <_free_r+0x50>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d9fa      	bls.n	80040d6 <_free_r+0x46>
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	1855      	adds	r5, r2, r1
 80040e4:	42a5      	cmp	r5, r4
 80040e6:	d10b      	bne.n	8004100 <_free_r+0x70>
 80040e8:	6824      	ldr	r4, [r4, #0]
 80040ea:	4421      	add	r1, r4
 80040ec:	1854      	adds	r4, r2, r1
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	d1e0      	bne.n	80040b6 <_free_r+0x26>
 80040f4:	681c      	ldr	r4, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6053      	str	r3, [r2, #4]
 80040fa:	440c      	add	r4, r1
 80040fc:	6014      	str	r4, [r2, #0]
 80040fe:	e7da      	b.n	80040b6 <_free_r+0x26>
 8004100:	d902      	bls.n	8004108 <_free_r+0x78>
 8004102:	230c      	movs	r3, #12
 8004104:	6003      	str	r3, [r0, #0]
 8004106:	e7d6      	b.n	80040b6 <_free_r+0x26>
 8004108:	6825      	ldr	r5, [r4, #0]
 800410a:	1961      	adds	r1, r4, r5
 800410c:	428b      	cmp	r3, r1
 800410e:	bf04      	itt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	bf04      	itt	eq
 8004118:	1949      	addeq	r1, r1, r5
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	6054      	str	r4, [r2, #4]
 800411e:	e7ca      	b.n	80040b6 <_free_r+0x26>
 8004120:	b003      	add	sp, #12
 8004122:	bd30      	pop	{r4, r5, pc}
 8004124:	200002b8 	.word	0x200002b8

08004128 <sbrk_aligned>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0e      	ldr	r6, [pc, #56]	; (8004164 <sbrk_aligned+0x3c>)
 800412c:	460c      	mov	r4, r1
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	4605      	mov	r5, r0
 8004132:	b911      	cbnz	r1, 800413a <sbrk_aligned+0x12>
 8004134:	f000 fcaa 	bl	8004a8c <_sbrk_r>
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fca5 	bl	8004a8c <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d00a      	beq.n	800415c <sbrk_aligned+0x34>
 8004146:	1cc4      	adds	r4, r0, #3
 8004148:	f024 0403 	bic.w	r4, r4, #3
 800414c:	42a0      	cmp	r0, r4
 800414e:	d007      	beq.n	8004160 <sbrk_aligned+0x38>
 8004150:	1a21      	subs	r1, r4, r0
 8004152:	4628      	mov	r0, r5
 8004154:	f000 fc9a 	bl	8004a8c <_sbrk_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d101      	bne.n	8004160 <sbrk_aligned+0x38>
 800415c:	f04f 34ff 	mov.w	r4, #4294967295
 8004160:	4620      	mov	r0, r4
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	200002bc 	.word	0x200002bc

08004168 <_malloc_r>:
 8004168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800416c:	1ccd      	adds	r5, r1, #3
 800416e:	f025 0503 	bic.w	r5, r5, #3
 8004172:	3508      	adds	r5, #8
 8004174:	2d0c      	cmp	r5, #12
 8004176:	bf38      	it	cc
 8004178:	250c      	movcc	r5, #12
 800417a:	2d00      	cmp	r5, #0
 800417c:	4607      	mov	r7, r0
 800417e:	db01      	blt.n	8004184 <_malloc_r+0x1c>
 8004180:	42a9      	cmp	r1, r5
 8004182:	d905      	bls.n	8004190 <_malloc_r+0x28>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	2600      	movs	r6, #0
 800418a:	4630      	mov	r0, r6
 800418c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004190:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004264 <_malloc_r+0xfc>
 8004194:	f000 f868 	bl	8004268 <__malloc_lock>
 8004198:	f8d8 3000 	ldr.w	r3, [r8]
 800419c:	461c      	mov	r4, r3
 800419e:	bb5c      	cbnz	r4, 80041f8 <_malloc_r+0x90>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4638      	mov	r0, r7
 80041a4:	f7ff ffc0 	bl	8004128 <sbrk_aligned>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	4604      	mov	r4, r0
 80041ac:	d155      	bne.n	800425a <_malloc_r+0xf2>
 80041ae:	f8d8 4000 	ldr.w	r4, [r8]
 80041b2:	4626      	mov	r6, r4
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	d145      	bne.n	8004244 <_malloc_r+0xdc>
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d048      	beq.n	800424e <_malloc_r+0xe6>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	4631      	mov	r1, r6
 80041c0:	4638      	mov	r0, r7
 80041c2:	eb04 0903 	add.w	r9, r4, r3
 80041c6:	f000 fc61 	bl	8004a8c <_sbrk_r>
 80041ca:	4581      	cmp	r9, r0
 80041cc:	d13f      	bne.n	800424e <_malloc_r+0xe6>
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	1a6d      	subs	r5, r5, r1
 80041d2:	4629      	mov	r1, r5
 80041d4:	4638      	mov	r0, r7
 80041d6:	f7ff ffa7 	bl	8004128 <sbrk_aligned>
 80041da:	3001      	adds	r0, #1
 80041dc:	d037      	beq.n	800424e <_malloc_r+0xe6>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	442b      	add	r3, r5
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	f8d8 3000 	ldr.w	r3, [r8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d038      	beq.n	800425e <_malloc_r+0xf6>
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	42a2      	cmp	r2, r4
 80041f0:	d12b      	bne.n	800424a <_malloc_r+0xe2>
 80041f2:	2200      	movs	r2, #0
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e00f      	b.n	8004218 <_malloc_r+0xb0>
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	1b52      	subs	r2, r2, r5
 80041fc:	d41f      	bmi.n	800423e <_malloc_r+0xd6>
 80041fe:	2a0b      	cmp	r2, #11
 8004200:	d917      	bls.n	8004232 <_malloc_r+0xca>
 8004202:	1961      	adds	r1, r4, r5
 8004204:	42a3      	cmp	r3, r4
 8004206:	6025      	str	r5, [r4, #0]
 8004208:	bf18      	it	ne
 800420a:	6059      	strne	r1, [r3, #4]
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	bf08      	it	eq
 8004210:	f8c8 1000 	streq.w	r1, [r8]
 8004214:	5162      	str	r2, [r4, r5]
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	4638      	mov	r0, r7
 800421a:	f104 060b 	add.w	r6, r4, #11
 800421e:	f000 f829 	bl	8004274 <__malloc_unlock>
 8004222:	f026 0607 	bic.w	r6, r6, #7
 8004226:	1d23      	adds	r3, r4, #4
 8004228:	1af2      	subs	r2, r6, r3
 800422a:	d0ae      	beq.n	800418a <_malloc_r+0x22>
 800422c:	1b9b      	subs	r3, r3, r6
 800422e:	50a3      	str	r3, [r4, r2]
 8004230:	e7ab      	b.n	800418a <_malloc_r+0x22>
 8004232:	42a3      	cmp	r3, r4
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	d1dd      	bne.n	80041f4 <_malloc_r+0x8c>
 8004238:	f8c8 2000 	str.w	r2, [r8]
 800423c:	e7ec      	b.n	8004218 <_malloc_r+0xb0>
 800423e:	4623      	mov	r3, r4
 8004240:	6864      	ldr	r4, [r4, #4]
 8004242:	e7ac      	b.n	800419e <_malloc_r+0x36>
 8004244:	4634      	mov	r4, r6
 8004246:	6876      	ldr	r6, [r6, #4]
 8004248:	e7b4      	b.n	80041b4 <_malloc_r+0x4c>
 800424a:	4613      	mov	r3, r2
 800424c:	e7cc      	b.n	80041e8 <_malloc_r+0x80>
 800424e:	230c      	movs	r3, #12
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4638      	mov	r0, r7
 8004254:	f000 f80e 	bl	8004274 <__malloc_unlock>
 8004258:	e797      	b.n	800418a <_malloc_r+0x22>
 800425a:	6025      	str	r5, [r4, #0]
 800425c:	e7dc      	b.n	8004218 <_malloc_r+0xb0>
 800425e:	605b      	str	r3, [r3, #4]
 8004260:	deff      	udf	#255	; 0xff
 8004262:	bf00      	nop
 8004264:	200002b8 	.word	0x200002b8

08004268 <__malloc_lock>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__malloc_lock+0x8>)
 800426a:	f7ff bf0f 	b.w	800408c <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	200002b4 	.word	0x200002b4

08004274 <__malloc_unlock>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__malloc_unlock+0x8>)
 8004276:	f7ff bf0a 	b.w	800408e <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	200002b4 	.word	0x200002b4

08004280 <__sfputc_r>:
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	b410      	push	{r4}
 8004288:	6093      	str	r3, [r2, #8]
 800428a:	da08      	bge.n	800429e <__sfputc_r+0x1e>
 800428c:	6994      	ldr	r4, [r2, #24]
 800428e:	42a3      	cmp	r3, r4
 8004290:	db01      	blt.n	8004296 <__sfputc_r+0x16>
 8004292:	290a      	cmp	r1, #10
 8004294:	d103      	bne.n	800429e <__sfputc_r+0x1e>
 8004296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429a:	f7ff bdea 	b.w	8003e72 <__swbuf_r>
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	1c58      	adds	r0, r3, #1
 80042a2:	6010      	str	r0, [r2, #0]
 80042a4:	7019      	strb	r1, [r3, #0]
 80042a6:	4608      	mov	r0, r1
 80042a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <__sfputs_r>:
 80042ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b0:	4606      	mov	r6, r0
 80042b2:	460f      	mov	r7, r1
 80042b4:	4614      	mov	r4, r2
 80042b6:	18d5      	adds	r5, r2, r3
 80042b8:	42ac      	cmp	r4, r5
 80042ba:	d101      	bne.n	80042c0 <__sfputs_r+0x12>
 80042bc:	2000      	movs	r0, #0
 80042be:	e007      	b.n	80042d0 <__sfputs_r+0x22>
 80042c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c4:	463a      	mov	r2, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff ffda 	bl	8004280 <__sfputc_r>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d1f3      	bne.n	80042b8 <__sfputs_r+0xa>
 80042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042d4 <_vfiprintf_r>:
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	460d      	mov	r5, r1
 80042da:	b09d      	sub	sp, #116	; 0x74
 80042dc:	4614      	mov	r4, r2
 80042de:	4698      	mov	r8, r3
 80042e0:	4606      	mov	r6, r0
 80042e2:	b118      	cbz	r0, 80042ec <_vfiprintf_r+0x18>
 80042e4:	6a03      	ldr	r3, [r0, #32]
 80042e6:	b90b      	cbnz	r3, 80042ec <_vfiprintf_r+0x18>
 80042e8:	f7ff fcdc 	bl	8003ca4 <__sinit>
 80042ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042ee:	07d9      	lsls	r1, r3, #31
 80042f0:	d405      	bmi.n	80042fe <_vfiprintf_r+0x2a>
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	059a      	lsls	r2, r3, #22
 80042f6:	d402      	bmi.n	80042fe <_vfiprintf_r+0x2a>
 80042f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042fa:	f7ff fec7 	bl	800408c <__retarget_lock_acquire_recursive>
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	d501      	bpl.n	8004308 <_vfiprintf_r+0x34>
 8004304:	692b      	ldr	r3, [r5, #16]
 8004306:	b99b      	cbnz	r3, 8004330 <_vfiprintf_r+0x5c>
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff fdee 	bl	8003eec <__swsetup_r>
 8004310:	b170      	cbz	r0, 8004330 <_vfiprintf_r+0x5c>
 8004312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004314:	07dc      	lsls	r4, r3, #31
 8004316:	d504      	bpl.n	8004322 <_vfiprintf_r+0x4e>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b01d      	add	sp, #116	; 0x74
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	0598      	lsls	r0, r3, #22
 8004326:	d4f7      	bmi.n	8004318 <_vfiprintf_r+0x44>
 8004328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800432a:	f7ff feb0 	bl	800408e <__retarget_lock_release_recursive>
 800432e:	e7f3      	b.n	8004318 <_vfiprintf_r+0x44>
 8004330:	2300      	movs	r3, #0
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
 8004334:	2320      	movs	r3, #32
 8004336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433a:	f8cd 800c 	str.w	r8, [sp, #12]
 800433e:	2330      	movs	r3, #48	; 0x30
 8004340:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80044f4 <_vfiprintf_r+0x220>
 8004344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004348:	f04f 0901 	mov.w	r9, #1
 800434c:	4623      	mov	r3, r4
 800434e:	469a      	mov	sl, r3
 8004350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004354:	b10a      	cbz	r2, 800435a <_vfiprintf_r+0x86>
 8004356:	2a25      	cmp	r2, #37	; 0x25
 8004358:	d1f9      	bne.n	800434e <_vfiprintf_r+0x7a>
 800435a:	ebba 0b04 	subs.w	fp, sl, r4
 800435e:	d00b      	beq.n	8004378 <_vfiprintf_r+0xa4>
 8004360:	465b      	mov	r3, fp
 8004362:	4622      	mov	r2, r4
 8004364:	4629      	mov	r1, r5
 8004366:	4630      	mov	r0, r6
 8004368:	f7ff ffa1 	bl	80042ae <__sfputs_r>
 800436c:	3001      	adds	r0, #1
 800436e:	f000 80a9 	beq.w	80044c4 <_vfiprintf_r+0x1f0>
 8004372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004374:	445a      	add	r2, fp
 8004376:	9209      	str	r2, [sp, #36]	; 0x24
 8004378:	f89a 3000 	ldrb.w	r3, [sl]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a1 	beq.w	80044c4 <_vfiprintf_r+0x1f0>
 8004382:	2300      	movs	r3, #0
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438c:	f10a 0a01 	add.w	sl, sl, #1
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004398:	931a      	str	r3, [sp, #104]	; 0x68
 800439a:	4654      	mov	r4, sl
 800439c:	2205      	movs	r2, #5
 800439e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a2:	4854      	ldr	r0, [pc, #336]	; (80044f4 <_vfiprintf_r+0x220>)
 80043a4:	f7fb ff2c 	bl	8000200 <memchr>
 80043a8:	9a04      	ldr	r2, [sp, #16]
 80043aa:	b9d8      	cbnz	r0, 80043e4 <_vfiprintf_r+0x110>
 80043ac:	06d1      	lsls	r1, r2, #27
 80043ae:	bf44      	itt	mi
 80043b0:	2320      	movmi	r3, #32
 80043b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b6:	0713      	lsls	r3, r2, #28
 80043b8:	bf44      	itt	mi
 80043ba:	232b      	movmi	r3, #43	; 0x2b
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c0:	f89a 3000 	ldrb.w	r3, [sl]
 80043c4:	2b2a      	cmp	r3, #42	; 0x2a
 80043c6:	d015      	beq.n	80043f4 <_vfiprintf_r+0x120>
 80043c8:	9a07      	ldr	r2, [sp, #28]
 80043ca:	4654      	mov	r4, sl
 80043cc:	2000      	movs	r0, #0
 80043ce:	f04f 0c0a 	mov.w	ip, #10
 80043d2:	4621      	mov	r1, r4
 80043d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d8:	3b30      	subs	r3, #48	; 0x30
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d94d      	bls.n	800447a <_vfiprintf_r+0x1a6>
 80043de:	b1b0      	cbz	r0, 800440e <_vfiprintf_r+0x13a>
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	e014      	b.n	800440e <_vfiprintf_r+0x13a>
 80043e4:	eba0 0308 	sub.w	r3, r0, r8
 80043e8:	fa09 f303 	lsl.w	r3, r9, r3
 80043ec:	4313      	orrs	r3, r2
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	46a2      	mov	sl, r4
 80043f2:	e7d2      	b.n	800439a <_vfiprintf_r+0xc6>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	1d19      	adds	r1, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	9103      	str	r1, [sp, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfbb      	ittet	lt
 8004400:	425b      	neglt	r3, r3
 8004402:	f042 0202 	orrlt.w	r2, r2, #2
 8004406:	9307      	strge	r3, [sp, #28]
 8004408:	9307      	strlt	r3, [sp, #28]
 800440a:	bfb8      	it	lt
 800440c:	9204      	strlt	r2, [sp, #16]
 800440e:	7823      	ldrb	r3, [r4, #0]
 8004410:	2b2e      	cmp	r3, #46	; 0x2e
 8004412:	d10c      	bne.n	800442e <_vfiprintf_r+0x15a>
 8004414:	7863      	ldrb	r3, [r4, #1]
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	d134      	bne.n	8004484 <_vfiprintf_r+0x1b0>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	9203      	str	r2, [sp, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	f04f 33ff 	movlt.w	r3, #4294967295
 800442a:	3402      	adds	r4, #2
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004504 <_vfiprintf_r+0x230>
 8004432:	7821      	ldrb	r1, [r4, #0]
 8004434:	2203      	movs	r2, #3
 8004436:	4650      	mov	r0, sl
 8004438:	f7fb fee2 	bl	8000200 <memchr>
 800443c:	b138      	cbz	r0, 800444e <_vfiprintf_r+0x17a>
 800443e:	9b04      	ldr	r3, [sp, #16]
 8004440:	eba0 000a 	sub.w	r0, r0, sl
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	4082      	lsls	r2, r0
 8004448:	4313      	orrs	r3, r2
 800444a:	3401      	adds	r4, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004452:	4829      	ldr	r0, [pc, #164]	; (80044f8 <_vfiprintf_r+0x224>)
 8004454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004458:	2206      	movs	r2, #6
 800445a:	f7fb fed1 	bl	8000200 <memchr>
 800445e:	2800      	cmp	r0, #0
 8004460:	d03f      	beq.n	80044e2 <_vfiprintf_r+0x20e>
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <_vfiprintf_r+0x228>)
 8004464:	bb1b      	cbnz	r3, 80044ae <_vfiprintf_r+0x1da>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	3307      	adds	r3, #7
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	3308      	adds	r3, #8
 8004470:	9303      	str	r3, [sp, #12]
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	443b      	add	r3, r7
 8004476:	9309      	str	r3, [sp, #36]	; 0x24
 8004478:	e768      	b.n	800434c <_vfiprintf_r+0x78>
 800447a:	fb0c 3202 	mla	r2, ip, r2, r3
 800447e:	460c      	mov	r4, r1
 8004480:	2001      	movs	r0, #1
 8004482:	e7a6      	b.n	80043d2 <_vfiprintf_r+0xfe>
 8004484:	2300      	movs	r3, #0
 8004486:	3401      	adds	r4, #1
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	4619      	mov	r1, r3
 800448c:	f04f 0c0a 	mov.w	ip, #10
 8004490:	4620      	mov	r0, r4
 8004492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004496:	3a30      	subs	r2, #48	; 0x30
 8004498:	2a09      	cmp	r2, #9
 800449a:	d903      	bls.n	80044a4 <_vfiprintf_r+0x1d0>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0c6      	beq.n	800442e <_vfiprintf_r+0x15a>
 80044a0:	9105      	str	r1, [sp, #20]
 80044a2:	e7c4      	b.n	800442e <_vfiprintf_r+0x15a>
 80044a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a8:	4604      	mov	r4, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	e7f0      	b.n	8004490 <_vfiprintf_r+0x1bc>
 80044ae:	ab03      	add	r3, sp, #12
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	462a      	mov	r2, r5
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <_vfiprintf_r+0x22c>)
 80044b6:	a904      	add	r1, sp, #16
 80044b8:	4630      	mov	r0, r6
 80044ba:	f3af 8000 	nop.w
 80044be:	4607      	mov	r7, r0
 80044c0:	1c78      	adds	r0, r7, #1
 80044c2:	d1d6      	bne.n	8004472 <_vfiprintf_r+0x19e>
 80044c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c6:	07d9      	lsls	r1, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_vfiprintf_r+0x202>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	059a      	lsls	r2, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_vfiprintf_r+0x202>
 80044d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d2:	f7ff fddc 	bl	800408e <__retarget_lock_release_recursive>
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	065b      	lsls	r3, r3, #25
 80044da:	f53f af1d 	bmi.w	8004318 <_vfiprintf_r+0x44>
 80044de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e0:	e71c      	b.n	800431c <_vfiprintf_r+0x48>
 80044e2:	ab03      	add	r3, sp, #12
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_vfiprintf_r+0x22c>)
 80044ea:	a904      	add	r1, sp, #16
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f879 	bl	80045e4 <_printf_i>
 80044f2:	e7e4      	b.n	80044be <_vfiprintf_r+0x1ea>
 80044f4:	08004b44 	.word	0x08004b44
 80044f8:	08004b4e 	.word	0x08004b4e
 80044fc:	00000000 	.word	0x00000000
 8004500:	080042af 	.word	0x080042af
 8004504:	08004b4a 	.word	0x08004b4a

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4699      	mov	r9, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004518:	4293      	cmp	r3, r2
 800451a:	bfb8      	it	lt
 800451c:	4613      	movlt	r3, r2
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004524:	4607      	mov	r7, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc26      	bgt.n	800459e <_printf_common+0x96>
 8004550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004554:	1e13      	subs	r3, r2, #0
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42b      	bmi.n	80045b8 <_printf_common+0xb0>
 8004560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004564:	4649      	mov	r1, r9
 8004566:	4638      	mov	r0, r7
 8004568:	47c0      	blx	r8
 800456a:	3001      	adds	r0, #1
 800456c:	d01e      	beq.n	80045ac <_printf_common+0xa4>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf02      	ittt	eq
 800457a:	68e5      	ldreq	r5, [r4, #12]
 800457c:	6833      	ldreq	r3, [r6, #0]
 800457e:	1aed      	subeq	r5, r5, r3
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	bf0c      	ite	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	2500      	movne	r5, #0
 800458a:	4293      	cmp	r3, r2
 800458c:	bfc4      	itt	gt
 800458e:	1a9b      	subgt	r3, r3, r2
 8004590:	18ed      	addgt	r5, r5, r3
 8004592:	2600      	movs	r6, #0
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xc8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xa8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4649      	mov	r1, r9
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xac>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c6      	b.n	8004546 <_printf_common+0x3e>
 80045b8:	18e1      	adds	r1, r4, r3
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	2030      	movs	r0, #48	; 0x30
 80045be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c2:	4422      	add	r2, r4
 80045c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7c7      	b.n	8004560 <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4649      	mov	r1, r9
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa4>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x8e>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ec:	2f78      	cmp	r7, #120	; 0x78
 80045ee:	4691      	mov	r9, r2
 80045f0:	4680      	mov	r8, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	469a      	mov	sl, r3
 80045f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	; 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d4 	beq.w	80047ae <_printf_i+0x1ca>
 8004606:	2f58      	cmp	r7, #88	; 0x58
 8004608:	f000 80c0 	beq.w	800478c <_printf_i+0x1a8>
 800460c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	; (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	08004795 	.word	0x08004795
 8004654:	080046bd 	.word	0x080046bd
 8004658:	0800474f 	.word	0x0800474f
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047b7 	.word	0x080047b7
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046bd 	.word	0x080046bd
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004757 	.word	0x08004757
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e09f      	b.n	80047d0 <_printf_i+0x1ec>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	0607      	lsls	r7, r0, #24
 8004696:	f103 0104 	add.w	r1, r3, #4
 800469a:	6029      	str	r1, [r5, #0]
 800469c:	d501      	bpl.n	80046a2 <_printf_i+0xbe>
 800469e:	681e      	ldr	r6, [r3, #0]
 80046a0:	e003      	b.n	80046aa <_printf_i+0xc6>
 80046a2:	0646      	lsls	r6, r0, #25
 80046a4:	d5fb      	bpl.n	800469e <_printf_i+0xba>
 80046a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	da03      	bge.n	80046b6 <_printf_i+0xd2>
 80046ae:	232d      	movs	r3, #45	; 0x2d
 80046b0:	4276      	negs	r6, r6
 80046b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b6:	485a      	ldr	r0, [pc, #360]	; (8004820 <_printf_i+0x23c>)
 80046b8:	230a      	movs	r3, #10
 80046ba:	e012      	b.n	80046e2 <_printf_i+0xfe>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	6029      	str	r1, [r5, #0]
 80046c4:	0605      	lsls	r5, r0, #24
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0xe8>
 80046c8:	681e      	ldr	r6, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0xee>
 80046cc:	0641      	lsls	r1, r0, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0xe4>
 80046d0:	881e      	ldrh	r6, [r3, #0]
 80046d2:	4853      	ldr	r0, [pc, #332]	; (8004820 <_printf_i+0x23c>)
 80046d4:	2f6f      	cmp	r7, #111	; 0x6f
 80046d6:	bf0c      	ite	eq
 80046d8:	2308      	moveq	r3, #8
 80046da:	230a      	movne	r3, #10
 80046dc:	2100      	movs	r1, #0
 80046de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e2:	6865      	ldr	r5, [r4, #4]
 80046e4:	60a5      	str	r5, [r4, #8]
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	bfa2      	ittt	ge
 80046ea:	6821      	ldrge	r1, [r4, #0]
 80046ec:	f021 0104 	bicge.w	r1, r1, #4
 80046f0:	6021      	strge	r1, [r4, #0]
 80046f2:	b90e      	cbnz	r6, 80046f8 <_printf_i+0x114>
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	d04b      	beq.n	8004790 <_printf_i+0x1ac>
 80046f8:	4615      	mov	r5, r2
 80046fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80046fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004702:	5dc7      	ldrb	r7, [r0, r7]
 8004704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004708:	4637      	mov	r7, r6
 800470a:	42bb      	cmp	r3, r7
 800470c:	460e      	mov	r6, r1
 800470e:	d9f4      	bls.n	80046fa <_printf_i+0x116>
 8004710:	2b08      	cmp	r3, #8
 8004712:	d10b      	bne.n	800472c <_printf_i+0x148>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	07de      	lsls	r6, r3, #31
 8004718:	d508      	bpl.n	800472c <_printf_i+0x148>
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	6861      	ldr	r1, [r4, #4]
 800471e:	4299      	cmp	r1, r3
 8004720:	bfde      	ittt	le
 8004722:	2330      	movle	r3, #48	; 0x30
 8004724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800472c:	1b52      	subs	r2, r2, r5
 800472e:	6122      	str	r2, [r4, #16]
 8004730:	f8cd a000 	str.w	sl, [sp]
 8004734:	464b      	mov	r3, r9
 8004736:	aa03      	add	r2, sp, #12
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff fee4 	bl	8004508 <_printf_common>
 8004740:	3001      	adds	r0, #1
 8004742:	d14a      	bne.n	80047da <_printf_i+0x1f6>
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	b004      	add	sp, #16
 800474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	f043 0320 	orr.w	r3, r3, #32
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	4833      	ldr	r0, [pc, #204]	; (8004824 <_printf_i+0x240>)
 8004758:	2778      	movs	r7, #120	; 0x78
 800475a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6829      	ldr	r1, [r5, #0]
 8004762:	061f      	lsls	r7, r3, #24
 8004764:	f851 6b04 	ldr.w	r6, [r1], #4
 8004768:	d402      	bmi.n	8004770 <_printf_i+0x18c>
 800476a:	065f      	lsls	r7, r3, #25
 800476c:	bf48      	it	mi
 800476e:	b2b6      	uxthmi	r6, r6
 8004770:	07df      	lsls	r7, r3, #31
 8004772:	bf48      	it	mi
 8004774:	f043 0320 	orrmi.w	r3, r3, #32
 8004778:	6029      	str	r1, [r5, #0]
 800477a:	bf48      	it	mi
 800477c:	6023      	strmi	r3, [r4, #0]
 800477e:	b91e      	cbnz	r6, 8004788 <_printf_i+0x1a4>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	2310      	movs	r3, #16
 800478a:	e7a7      	b.n	80046dc <_printf_i+0xf8>
 800478c:	4824      	ldr	r0, [pc, #144]	; (8004820 <_printf_i+0x23c>)
 800478e:	e7e4      	b.n	800475a <_printf_i+0x176>
 8004790:	4615      	mov	r5, r2
 8004792:	e7bd      	b.n	8004710 <_printf_i+0x12c>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	6826      	ldr	r6, [r4, #0]
 8004798:	6961      	ldr	r1, [r4, #20]
 800479a:	1d18      	adds	r0, r3, #4
 800479c:	6028      	str	r0, [r5, #0]
 800479e:	0635      	lsls	r5, r6, #24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	d501      	bpl.n	80047a8 <_printf_i+0x1c4>
 80047a4:	6019      	str	r1, [r3, #0]
 80047a6:	e002      	b.n	80047ae <_printf_i+0x1ca>
 80047a8:	0670      	lsls	r0, r6, #25
 80047aa:	d5fb      	bpl.n	80047a4 <_printf_i+0x1c0>
 80047ac:	8019      	strh	r1, [r3, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	6123      	str	r3, [r4, #16]
 80047b2:	4615      	mov	r5, r2
 80047b4:	e7bc      	b.n	8004730 <_printf_i+0x14c>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	602a      	str	r2, [r5, #0]
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	2100      	movs	r1, #0
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7fb fd1c 	bl	8000200 <memchr>
 80047c8:	b108      	cbz	r0, 80047ce <_printf_i+0x1ea>
 80047ca:	1b40      	subs	r0, r0, r5
 80047cc:	6060      	str	r0, [r4, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	2300      	movs	r3, #0
 80047d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d8:	e7aa      	b.n	8004730 <_printf_i+0x14c>
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	462a      	mov	r2, r5
 80047de:	4649      	mov	r1, r9
 80047e0:	4640      	mov	r0, r8
 80047e2:	47d0      	blx	sl
 80047e4:	3001      	adds	r0, #1
 80047e6:	d0ad      	beq.n	8004744 <_printf_i+0x160>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	079b      	lsls	r3, r3, #30
 80047ec:	d413      	bmi.n	8004816 <_printf_i+0x232>
 80047ee:	68e0      	ldr	r0, [r4, #12]
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	4298      	cmp	r0, r3
 80047f4:	bfb8      	it	lt
 80047f6:	4618      	movlt	r0, r3
 80047f8:	e7a6      	b.n	8004748 <_printf_i+0x164>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4632      	mov	r2, r6
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	47d0      	blx	sl
 8004804:	3001      	adds	r0, #1
 8004806:	d09d      	beq.n	8004744 <_printf_i+0x160>
 8004808:	3501      	adds	r5, #1
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	9903      	ldr	r1, [sp, #12]
 800480e:	1a5b      	subs	r3, r3, r1
 8004810:	42ab      	cmp	r3, r5
 8004812:	dcf2      	bgt.n	80047fa <_printf_i+0x216>
 8004814:	e7eb      	b.n	80047ee <_printf_i+0x20a>
 8004816:	2500      	movs	r5, #0
 8004818:	f104 0619 	add.w	r6, r4, #25
 800481c:	e7f5      	b.n	800480a <_printf_i+0x226>
 800481e:	bf00      	nop
 8004820:	08004b55 	.word	0x08004b55
 8004824:	08004b66 	.word	0x08004b66

08004828 <__sflush_r>:
 8004828:	898a      	ldrh	r2, [r1, #12]
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	4605      	mov	r5, r0
 8004830:	0710      	lsls	r0, r2, #28
 8004832:	460c      	mov	r4, r1
 8004834:	d458      	bmi.n	80048e8 <__sflush_r+0xc0>
 8004836:	684b      	ldr	r3, [r1, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dc05      	bgt.n	8004848 <__sflush_r+0x20>
 800483c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	dc02      	bgt.n	8004848 <__sflush_r+0x20>
 8004842:	2000      	movs	r0, #0
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800484a:	2e00      	cmp	r6, #0
 800484c:	d0f9      	beq.n	8004842 <__sflush_r+0x1a>
 800484e:	2300      	movs	r3, #0
 8004850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004854:	682f      	ldr	r7, [r5, #0]
 8004856:	6a21      	ldr	r1, [r4, #32]
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	d032      	beq.n	80048c2 <__sflush_r+0x9a>
 800485c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	075a      	lsls	r2, r3, #29
 8004862:	d505      	bpl.n	8004870 <__sflush_r+0x48>
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	1ac0      	subs	r0, r0, r3
 8004868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800486a:	b10b      	cbz	r3, 8004870 <__sflush_r+0x48>
 800486c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800486e:	1ac0      	subs	r0, r0, r3
 8004870:	2300      	movs	r3, #0
 8004872:	4602      	mov	r2, r0
 8004874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004876:	6a21      	ldr	r1, [r4, #32]
 8004878:	4628      	mov	r0, r5
 800487a:	47b0      	blx	r6
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	d106      	bne.n	8004890 <__sflush_r+0x68>
 8004882:	6829      	ldr	r1, [r5, #0]
 8004884:	291d      	cmp	r1, #29
 8004886:	d82b      	bhi.n	80048e0 <__sflush_r+0xb8>
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <__sflush_r+0x108>)
 800488a:	410a      	asrs	r2, r1
 800488c:	07d6      	lsls	r6, r2, #31
 800488e:	d427      	bmi.n	80048e0 <__sflush_r+0xb8>
 8004890:	2200      	movs	r2, #0
 8004892:	6062      	str	r2, [r4, #4]
 8004894:	04d9      	lsls	r1, r3, #19
 8004896:	6922      	ldr	r2, [r4, #16]
 8004898:	6022      	str	r2, [r4, #0]
 800489a:	d504      	bpl.n	80048a6 <__sflush_r+0x7e>
 800489c:	1c42      	adds	r2, r0, #1
 800489e:	d101      	bne.n	80048a4 <__sflush_r+0x7c>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b903      	cbnz	r3, 80048a6 <__sflush_r+0x7e>
 80048a4:	6560      	str	r0, [r4, #84]	; 0x54
 80048a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a8:	602f      	str	r7, [r5, #0]
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d0c9      	beq.n	8004842 <__sflush_r+0x1a>
 80048ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b2:	4299      	cmp	r1, r3
 80048b4:	d002      	beq.n	80048bc <__sflush_r+0x94>
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff fbea 	bl	8004090 <_free_r>
 80048bc:	2000      	movs	r0, #0
 80048be:	6360      	str	r0, [r4, #52]	; 0x34
 80048c0:	e7c0      	b.n	8004844 <__sflush_r+0x1c>
 80048c2:	2301      	movs	r3, #1
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b0      	blx	r6
 80048c8:	1c41      	adds	r1, r0, #1
 80048ca:	d1c8      	bne.n	800485e <__sflush_r+0x36>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0c5      	beq.n	800485e <__sflush_r+0x36>
 80048d2:	2b1d      	cmp	r3, #29
 80048d4:	d001      	beq.n	80048da <__sflush_r+0xb2>
 80048d6:	2b16      	cmp	r3, #22
 80048d8:	d101      	bne.n	80048de <__sflush_r+0xb6>
 80048da:	602f      	str	r7, [r5, #0]
 80048dc:	e7b1      	b.n	8004842 <__sflush_r+0x1a>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	e7ad      	b.n	8004844 <__sflush_r+0x1c>
 80048e8:	690f      	ldr	r7, [r1, #16]
 80048ea:	2f00      	cmp	r7, #0
 80048ec:	d0a9      	beq.n	8004842 <__sflush_r+0x1a>
 80048ee:	0793      	lsls	r3, r2, #30
 80048f0:	680e      	ldr	r6, [r1, #0]
 80048f2:	bf08      	it	eq
 80048f4:	694b      	ldreq	r3, [r1, #20]
 80048f6:	600f      	str	r7, [r1, #0]
 80048f8:	bf18      	it	ne
 80048fa:	2300      	movne	r3, #0
 80048fc:	eba6 0807 	sub.w	r8, r6, r7
 8004900:	608b      	str	r3, [r1, #8]
 8004902:	f1b8 0f00 	cmp.w	r8, #0
 8004906:	dd9c      	ble.n	8004842 <__sflush_r+0x1a>
 8004908:	6a21      	ldr	r1, [r4, #32]
 800490a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800490c:	4643      	mov	r3, r8
 800490e:	463a      	mov	r2, r7
 8004910:	4628      	mov	r0, r5
 8004912:	47b0      	blx	r6
 8004914:	2800      	cmp	r0, #0
 8004916:	dc06      	bgt.n	8004926 <__sflush_r+0xfe>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	e78e      	b.n	8004844 <__sflush_r+0x1c>
 8004926:	4407      	add	r7, r0
 8004928:	eba8 0800 	sub.w	r8, r8, r0
 800492c:	e7e9      	b.n	8004902 <__sflush_r+0xda>
 800492e:	bf00      	nop
 8004930:	dfbffffe 	.word	0xdfbffffe

08004934 <_fflush_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	690b      	ldr	r3, [r1, #16]
 8004938:	4605      	mov	r5, r0
 800493a:	460c      	mov	r4, r1
 800493c:	b913      	cbnz	r3, 8004944 <_fflush_r+0x10>
 800493e:	2500      	movs	r5, #0
 8004940:	4628      	mov	r0, r5
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	b118      	cbz	r0, 800494e <_fflush_r+0x1a>
 8004946:	6a03      	ldr	r3, [r0, #32]
 8004948:	b90b      	cbnz	r3, 800494e <_fflush_r+0x1a>
 800494a:	f7ff f9ab 	bl	8003ca4 <__sinit>
 800494e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f3      	beq.n	800493e <_fflush_r+0xa>
 8004956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004958:	07d0      	lsls	r0, r2, #31
 800495a:	d404      	bmi.n	8004966 <_fflush_r+0x32>
 800495c:	0599      	lsls	r1, r3, #22
 800495e:	d402      	bmi.n	8004966 <_fflush_r+0x32>
 8004960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004962:	f7ff fb93 	bl	800408c <__retarget_lock_acquire_recursive>
 8004966:	4628      	mov	r0, r5
 8004968:	4621      	mov	r1, r4
 800496a:	f7ff ff5d 	bl	8004828 <__sflush_r>
 800496e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004970:	07da      	lsls	r2, r3, #31
 8004972:	4605      	mov	r5, r0
 8004974:	d4e4      	bmi.n	8004940 <_fflush_r+0xc>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	059b      	lsls	r3, r3, #22
 800497a:	d4e1      	bmi.n	8004940 <_fflush_r+0xc>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f7ff fb86 	bl	800408e <__retarget_lock_release_recursive>
 8004982:	e7dd      	b.n	8004940 <_fflush_r+0xc>

08004984 <__swhatbuf_r>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	460c      	mov	r4, r1
 8004988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498c:	2900      	cmp	r1, #0
 800498e:	b096      	sub	sp, #88	; 0x58
 8004990:	4615      	mov	r5, r2
 8004992:	461e      	mov	r6, r3
 8004994:	da0d      	bge.n	80049b2 <__swhatbuf_r+0x2e>
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	f013 0f80 	tst.w	r3, #128	; 0x80
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80049a6:	2340      	movne	r3, #64	; 0x40
 80049a8:	2000      	movs	r0, #0
 80049aa:	6031      	str	r1, [r6, #0]
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	b016      	add	sp, #88	; 0x58
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
 80049b2:	466a      	mov	r2, sp
 80049b4:	f000 f848 	bl	8004a48 <_fstat_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	dbec      	blt.n	8004996 <__swhatbuf_r+0x12>
 80049bc:	9901      	ldr	r1, [sp, #4]
 80049be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80049c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80049c6:	4259      	negs	r1, r3
 80049c8:	4159      	adcs	r1, r3
 80049ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ce:	e7eb      	b.n	80049a8 <__swhatbuf_r+0x24>

080049d0 <__smakebuf_r>:
 80049d0:	898b      	ldrh	r3, [r1, #12]
 80049d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049d4:	079d      	lsls	r5, r3, #30
 80049d6:	4606      	mov	r6, r0
 80049d8:	460c      	mov	r4, r1
 80049da:	d507      	bpl.n	80049ec <__smakebuf_r+0x1c>
 80049dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	2301      	movs	r3, #1
 80049e6:	6163      	str	r3, [r4, #20]
 80049e8:	b002      	add	sp, #8
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	ab01      	add	r3, sp, #4
 80049ee:	466a      	mov	r2, sp
 80049f0:	f7ff ffc8 	bl	8004984 <__swhatbuf_r>
 80049f4:	9900      	ldr	r1, [sp, #0]
 80049f6:	4605      	mov	r5, r0
 80049f8:	4630      	mov	r0, r6
 80049fa:	f7ff fbb5 	bl	8004168 <_malloc_r>
 80049fe:	b948      	cbnz	r0, 8004a14 <__smakebuf_r+0x44>
 8004a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a04:	059a      	lsls	r2, r3, #22
 8004a06:	d4ef      	bmi.n	80049e8 <__smakebuf_r+0x18>
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	e7e3      	b.n	80049dc <__smakebuf_r+0xc>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	6020      	str	r0, [r4, #0]
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	6163      	str	r3, [r4, #20]
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	6120      	str	r0, [r4, #16]
 8004a26:	b15b      	cbz	r3, 8004a40 <__smakebuf_r+0x70>
 8004a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f000 f81d 	bl	8004a6c <_isatty_r>
 8004a32:	b128      	cbz	r0, 8004a40 <__smakebuf_r+0x70>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	431d      	orrs	r5, r3
 8004a44:	81a5      	strh	r5, [r4, #12]
 8004a46:	e7cf      	b.n	80049e8 <__smakebuf_r+0x18>

08004a48 <_fstat_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d07      	ldr	r5, [pc, #28]	; (8004a68 <_fstat_r+0x20>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	f7fc f822 	bl	8000a9e <_fstat>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d102      	bne.n	8004a64 <_fstat_r+0x1c>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	b103      	cbz	r3, 8004a64 <_fstat_r+0x1c>
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	bd38      	pop	{r3, r4, r5, pc}
 8004a66:	bf00      	nop
 8004a68:	200002b0 	.word	0x200002b0

08004a6c <_isatty_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d06      	ldr	r5, [pc, #24]	; (8004a88 <_isatty_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7fc f821 	bl	8000abe <_isatty>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_isatty_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_isatty_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	200002b0 	.word	0x200002b0

08004a8c <_sbrk_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d06      	ldr	r5, [pc, #24]	; (8004aa8 <_sbrk_r+0x1c>)
 8004a90:	2300      	movs	r3, #0
 8004a92:	4604      	mov	r4, r0
 8004a94:	4608      	mov	r0, r1
 8004a96:	602b      	str	r3, [r5, #0]
 8004a98:	f7fc f82a 	bl	8000af0 <_sbrk>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_sbrk_r+0x1a>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_sbrk_r+0x1a>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	200002b0 	.word	0x200002b0

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
