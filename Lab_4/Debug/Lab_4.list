
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b8  080060b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c0  080060c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000074  0800613c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800613c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012610  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  000326f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bab  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c47f  00000000  00000000  000368e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001381d  00000000  00000000  00062d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010903b  00000000  00000000  0007657f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004660  00000000  00000000  0017f5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00183c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005fd8 	.word	0x08005fd8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08005fd8 	.word	0x08005fd8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b970 	b.w	8000960 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9e08      	ldr	r6, [sp, #32]
 800069e:	460d      	mov	r5, r1
 80006a0:	4604      	mov	r4, r0
 80006a2:	460f      	mov	r7, r1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d14a      	bne.n	800073e <__udivmoddi4+0xa6>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4694      	mov	ip, r2
 80006ac:	d965      	bls.n	800077a <__udivmoddi4+0xe2>
 80006ae:	fab2 f382 	clz	r3, r2
 80006b2:	b143      	cbz	r3, 80006c6 <__udivmoddi4+0x2e>
 80006b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b8:	f1c3 0220 	rsb	r2, r3, #32
 80006bc:	409f      	lsls	r7, r3
 80006be:	fa20 f202 	lsr.w	r2, r0, r2
 80006c2:	4317      	orrs	r7, r2
 80006c4:	409c      	lsls	r4, r3
 80006c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006ca:	fa1f f58c 	uxth.w	r5, ip
 80006ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80006d2:	0c22      	lsrs	r2, r4, #16
 80006d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006dc:	fb01 f005 	mul.w	r0, r1, r5
 80006e0:	4290      	cmp	r0, r2
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x62>
 80006e4:	eb1c 0202 	adds.w	r2, ip, r2
 80006e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006ec:	f080 811c 	bcs.w	8000928 <__udivmoddi4+0x290>
 80006f0:	4290      	cmp	r0, r2
 80006f2:	f240 8119 	bls.w	8000928 <__udivmoddi4+0x290>
 80006f6:	3902      	subs	r1, #2
 80006f8:	4462      	add	r2, ip
 80006fa:	1a12      	subs	r2, r2, r0
 80006fc:	b2a4      	uxth	r4, r4
 80006fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000702:	fb0e 2210 	mls	r2, lr, r0, r2
 8000706:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800070a:	fb00 f505 	mul.w	r5, r0, r5
 800070e:	42a5      	cmp	r5, r4
 8000710:	d90a      	bls.n	8000728 <__udivmoddi4+0x90>
 8000712:	eb1c 0404 	adds.w	r4, ip, r4
 8000716:	f100 32ff 	add.w	r2, r0, #4294967295
 800071a:	f080 8107 	bcs.w	800092c <__udivmoddi4+0x294>
 800071e:	42a5      	cmp	r5, r4
 8000720:	f240 8104 	bls.w	800092c <__udivmoddi4+0x294>
 8000724:	4464      	add	r4, ip
 8000726:	3802      	subs	r0, #2
 8000728:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800072c:	1b64      	subs	r4, r4, r5
 800072e:	2100      	movs	r1, #0
 8000730:	b11e      	cbz	r6, 800073a <__udivmoddi4+0xa2>
 8000732:	40dc      	lsrs	r4, r3
 8000734:	2300      	movs	r3, #0
 8000736:	e9c6 4300 	strd	r4, r3, [r6]
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	428b      	cmp	r3, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0xbc>
 8000742:	2e00      	cmp	r6, #0
 8000744:	f000 80ed 	beq.w	8000922 <__udivmoddi4+0x28a>
 8000748:	2100      	movs	r1, #0
 800074a:	e9c6 0500 	strd	r0, r5, [r6]
 800074e:	4608      	mov	r0, r1
 8000750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000754:	fab3 f183 	clz	r1, r3
 8000758:	2900      	cmp	r1, #0
 800075a:	d149      	bne.n	80007f0 <__udivmoddi4+0x158>
 800075c:	42ab      	cmp	r3, r5
 800075e:	d302      	bcc.n	8000766 <__udivmoddi4+0xce>
 8000760:	4282      	cmp	r2, r0
 8000762:	f200 80f8 	bhi.w	8000956 <__udivmoddi4+0x2be>
 8000766:	1a84      	subs	r4, r0, r2
 8000768:	eb65 0203 	sbc.w	r2, r5, r3
 800076c:	2001      	movs	r0, #1
 800076e:	4617      	mov	r7, r2
 8000770:	2e00      	cmp	r6, #0
 8000772:	d0e2      	beq.n	800073a <__udivmoddi4+0xa2>
 8000774:	e9c6 4700 	strd	r4, r7, [r6]
 8000778:	e7df      	b.n	800073a <__udivmoddi4+0xa2>
 800077a:	b902      	cbnz	r2, 800077e <__udivmoddi4+0xe6>
 800077c:	deff      	udf	#255	; 0xff
 800077e:	fab2 f382 	clz	r3, r2
 8000782:	2b00      	cmp	r3, #0
 8000784:	f040 8090 	bne.w	80008a8 <__udivmoddi4+0x210>
 8000788:	1a8a      	subs	r2, r1, r2
 800078a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078e:	fa1f fe8c 	uxth.w	lr, ip
 8000792:	2101      	movs	r1, #1
 8000794:	fbb2 f5f7 	udiv	r5, r2, r7
 8000798:	fb07 2015 	mls	r0, r7, r5, r2
 800079c:	0c22      	lsrs	r2, r4, #16
 800079e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007a2:	fb0e f005 	mul.w	r0, lr, r5
 80007a6:	4290      	cmp	r0, r2
 80007a8:	d908      	bls.n	80007bc <__udivmoddi4+0x124>
 80007aa:	eb1c 0202 	adds.w	r2, ip, r2
 80007ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0x122>
 80007b4:	4290      	cmp	r0, r2
 80007b6:	f200 80cb 	bhi.w	8000950 <__udivmoddi4+0x2b8>
 80007ba:	4645      	mov	r5, r8
 80007bc:	1a12      	subs	r2, r2, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007c4:	fb07 2210 	mls	r2, r7, r0, r2
 80007c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007cc:	fb0e fe00 	mul.w	lr, lr, r0
 80007d0:	45a6      	cmp	lr, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x14e>
 80007d4:	eb1c 0404 	adds.w	r4, ip, r4
 80007d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x14c>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f200 80bb 	bhi.w	800095a <__udivmoddi4+0x2c2>
 80007e4:	4610      	mov	r0, r2
 80007e6:	eba4 040e 	sub.w	r4, r4, lr
 80007ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ee:	e79f      	b.n	8000730 <__udivmoddi4+0x98>
 80007f0:	f1c1 0720 	rsb	r7, r1, #32
 80007f4:	408b      	lsls	r3, r1
 80007f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80007fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000802:	fa20 f307 	lsr.w	r3, r0, r7
 8000806:	40fd      	lsrs	r5, r7
 8000808:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800080c:	4323      	orrs	r3, r4
 800080e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000812:	fa1f fe8c 	uxth.w	lr, ip
 8000816:	fb09 5518 	mls	r5, r9, r8, r5
 800081a:	0c1c      	lsrs	r4, r3, #16
 800081c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000820:	fb08 f50e 	mul.w	r5, r8, lr
 8000824:	42a5      	cmp	r5, r4
 8000826:	fa02 f201 	lsl.w	r2, r2, r1
 800082a:	fa00 f001 	lsl.w	r0, r0, r1
 800082e:	d90b      	bls.n	8000848 <__udivmoddi4+0x1b0>
 8000830:	eb1c 0404 	adds.w	r4, ip, r4
 8000834:	f108 3aff 	add.w	sl, r8, #4294967295
 8000838:	f080 8088 	bcs.w	800094c <__udivmoddi4+0x2b4>
 800083c:	42a5      	cmp	r5, r4
 800083e:	f240 8085 	bls.w	800094c <__udivmoddi4+0x2b4>
 8000842:	f1a8 0802 	sub.w	r8, r8, #2
 8000846:	4464      	add	r4, ip
 8000848:	1b64      	subs	r4, r4, r5
 800084a:	b29d      	uxth	r5, r3
 800084c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000850:	fb09 4413 	mls	r4, r9, r3, r4
 8000854:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000858:	fb03 fe0e 	mul.w	lr, r3, lr
 800085c:	45a6      	cmp	lr, r4
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x1da>
 8000860:	eb1c 0404 	adds.w	r4, ip, r4
 8000864:	f103 35ff 	add.w	r5, r3, #4294967295
 8000868:	d26c      	bcs.n	8000944 <__udivmoddi4+0x2ac>
 800086a:	45a6      	cmp	lr, r4
 800086c:	d96a      	bls.n	8000944 <__udivmoddi4+0x2ac>
 800086e:	3b02      	subs	r3, #2
 8000870:	4464      	add	r4, ip
 8000872:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000876:	fba3 9502 	umull	r9, r5, r3, r2
 800087a:	eba4 040e 	sub.w	r4, r4, lr
 800087e:	42ac      	cmp	r4, r5
 8000880:	46c8      	mov	r8, r9
 8000882:	46ae      	mov	lr, r5
 8000884:	d356      	bcc.n	8000934 <__udivmoddi4+0x29c>
 8000886:	d053      	beq.n	8000930 <__udivmoddi4+0x298>
 8000888:	b156      	cbz	r6, 80008a0 <__udivmoddi4+0x208>
 800088a:	ebb0 0208 	subs.w	r2, r0, r8
 800088e:	eb64 040e 	sbc.w	r4, r4, lr
 8000892:	fa04 f707 	lsl.w	r7, r4, r7
 8000896:	40ca      	lsrs	r2, r1
 8000898:	40cc      	lsrs	r4, r1
 800089a:	4317      	orrs	r7, r2
 800089c:	e9c6 7400 	strd	r7, r4, [r6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a8:	f1c3 0120 	rsb	r1, r3, #32
 80008ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80008b0:	fa20 f201 	lsr.w	r2, r0, r1
 80008b4:	fa25 f101 	lsr.w	r1, r5, r1
 80008b8:	409d      	lsls	r5, r3
 80008ba:	432a      	orrs	r2, r5
 80008bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c8:	fb07 1510 	mls	r5, r7, r0, r1
 80008cc:	0c11      	lsrs	r1, r2, #16
 80008ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008d2:	fb00 f50e 	mul.w	r5, r0, lr
 80008d6:	428d      	cmp	r5, r1
 80008d8:	fa04 f403 	lsl.w	r4, r4, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x258>
 80008de:	eb1c 0101 	adds.w	r1, ip, r1
 80008e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008e6:	d22f      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 80008e8:	428d      	cmp	r5, r1
 80008ea:	d92d      	bls.n	8000948 <__udivmoddi4+0x2b0>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1b49      	subs	r1, r1, r5
 80008f2:	b292      	uxth	r2, r2
 80008f4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008f8:	fb07 1115 	mls	r1, r7, r5, r1
 80008fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000900:	fb05 f10e 	mul.w	r1, r5, lr
 8000904:	4291      	cmp	r1, r2
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x282>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000910:	d216      	bcs.n	8000940 <__udivmoddi4+0x2a8>
 8000912:	4291      	cmp	r1, r2
 8000914:	d914      	bls.n	8000940 <__udivmoddi4+0x2a8>
 8000916:	3d02      	subs	r5, #2
 8000918:	4462      	add	r2, ip
 800091a:	1a52      	subs	r2, r2, r1
 800091c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000920:	e738      	b.n	8000794 <__udivmoddi4+0xfc>
 8000922:	4631      	mov	r1, r6
 8000924:	4630      	mov	r0, r6
 8000926:	e708      	b.n	800073a <__udivmoddi4+0xa2>
 8000928:	4639      	mov	r1, r7
 800092a:	e6e6      	b.n	80006fa <__udivmoddi4+0x62>
 800092c:	4610      	mov	r0, r2
 800092e:	e6fb      	b.n	8000728 <__udivmoddi4+0x90>
 8000930:	4548      	cmp	r0, r9
 8000932:	d2a9      	bcs.n	8000888 <__udivmoddi4+0x1f0>
 8000934:	ebb9 0802 	subs.w	r8, r9, r2
 8000938:	eb65 0e0c 	sbc.w	lr, r5, ip
 800093c:	3b01      	subs	r3, #1
 800093e:	e7a3      	b.n	8000888 <__udivmoddi4+0x1f0>
 8000940:	4645      	mov	r5, r8
 8000942:	e7ea      	b.n	800091a <__udivmoddi4+0x282>
 8000944:	462b      	mov	r3, r5
 8000946:	e794      	b.n	8000872 <__udivmoddi4+0x1da>
 8000948:	4640      	mov	r0, r8
 800094a:	e7d1      	b.n	80008f0 <__udivmoddi4+0x258>
 800094c:	46d0      	mov	r8, sl
 800094e:	e77b      	b.n	8000848 <__udivmoddi4+0x1b0>
 8000950:	3d02      	subs	r5, #2
 8000952:	4462      	add	r2, ip
 8000954:	e732      	b.n	80007bc <__udivmoddi4+0x124>
 8000956:	4608      	mov	r0, r1
 8000958:	e70a      	b.n	8000770 <__udivmoddi4+0xd8>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e742      	b.n	80007e6 <__udivmoddi4+0x14e>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	b29a      	uxth	r2, r3
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <_write+0x28>)
 800097c:	f003 fd26 	bl	80043cc <HAL_UART_Transmit>
	return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000e4 	.word	0x200000e4

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fd9f 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f849 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 f925 	bl	8000bec <MX_GPIO_Init>
  MX_I2C2_Init();
 80009a2:	f000 f897 	bl	8000ad4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80009a6:	f000 f8d5 	bl	8000b54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // initialize the four sensors
//  HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 1000);
//  HAL_UART_Transmit(&huart1, msg2, sizeof(msg2), 1000);
  BSP_HSENSOR_Init();
 80009aa:	f000 fc89 	bl	80012c0 <BSP_HSENSOR_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  humidity = BSP_HSENSOR_ReadHumidity();
 80009ae:	f000 fca7 	bl	8001300 <BSP_HSENSOR_ReadHumidity>
 80009b2:	eef0 7a40 	vmov.f32	s15, s0
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <main+0x94>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]
	  int humInt1 = humidity;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <main+0x94>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c6:	ee17 3a90 	vmov	r3, s15
 80009ca:	60fb      	str	r3, [r7, #12]
	  float humfrac = humidity - humInt1;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <main+0x94>)
 80009ce:	ed93 7a00 	vldr	s14, [r3]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e0:	edc7 7a02 	vstr	s15, [r7, #8]
	  int humInt2 = trunc(humfrac * 100);
 80009e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80009e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a28 <main+0x98>
 80009ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f0:	ee17 0a90 	vmov	r0, s15
 80009f4:	f7ff fdb8 	bl	8000568 <__aeabi_f2d>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	ec43 2b10 	vmov	d0, r2, r3
 8000a00:	f005 fab0 	bl	8005f64 <trunc>
 8000a04:	ec53 2b10 	vmov	r2, r3, d0
 8000a08:	4610      	mov	r0, r2
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f7ff fe04 	bl	8000618 <__aeabi_d2iz>
 8000a10:	4603      	mov	r3, r0
 8000a12:	607b      	str	r3, [r7, #4]
	  printf("I'm trying to get this shit working");
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <main+0x9c>)
 8000a16:	f004 fc31 	bl	800527c <iprintf>
	  //snprintf(str_hum,100," Humidity = %d.02%d\n\r", humInt1, humInt2);
	 // HAL_UART_Transmit(&huart2, (uint8_t*) str_hum, sizeof(str_hum), 1000);
//	  BSP_ACCELERO_AccGetXYZ(accel);
//	  BSP_GYRO_GetXYZ(gyro);
//	  BSP_MAGNETO_GetXYZ(magneto);
	  HAL_Delay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1e:	f000 fdcf 	bl	80015c0 <HAL_Delay>
  {
 8000a22:	e7c4      	b.n	80009ae <main+0x1e>
 8000a24:	20000178 	.word	0x20000178
 8000a28:	42c80000 	.word	0x42c80000
 8000a2c:	08005ff0 	.word	0x08005ff0

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	; 0x58
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2244      	movs	r2, #68	; 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fc71 	bl	8005326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a52:	2000      	movs	r0, #0
 8000a54:	f001 ffd6 	bl	8002a04 <HAL_PWREx_ControlVoltageScaling>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a5e:	f000 f8e9 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a62:	2310      	movs	r3, #16
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a76:	2301      	movs	r3, #1
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a7e:	233c      	movs	r3, #60	; 0x3c
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f85a 	bl	8002b4c <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9e:	f000 f8c9 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2105      	movs	r1, #5
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fc60 	bl	8003380 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac6:	f000 f8b5 	bl	8000c34 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3758      	adds	r7, #88	; 0x58
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_I2C2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <MX_I2C2_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000b10:	f001 f910 	bl	8001d34 <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f000 f88b 	bl	8000c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000b22:	f001 feb7 	bl	8002894 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 f882 	bl	8000c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_I2C2_Init+0x74>)
 8000b34:	f001 fef9 	bl	800292a <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 f879 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000090 	.word	0x20000090
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	307075b1 	.word	0x307075b1

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <MX_USART2_UART_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b9e:	f003 fbc5 	bl	800432c <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f844 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bb0:	f004 f9ea 	bl	8004f88 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f83b 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f004 fa1f 	bl	8005004 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f832 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bd2:	f004 f9a0 	bl	8004f16 <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f82a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e4 	.word	0x200000e4
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_GPIO_Init+0x44>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0ae      	sub	sp, #184	; 0xb8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2294      	movs	r2, #148	; 0x94
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fb3c 	bl	8005326 <memset>
  if(hi2c->Instance==I2C2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <HAL_I2C_MspInit+0xb0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d13b      	bne.n	8000d30 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fe19 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cd0:	f7ff ffb0 	bl	8000c34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf4:	2312      	movs	r3, #18
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	4619      	mov	r1, r3
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_I2C_MspInit+0xb8>)
 8000d14:	f000 fd8a 	bl	800182c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d22:	6593      	str	r3, [r2, #88]	; 0x58
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0xb4>)
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37b8      	adds	r7, #184	; 0xb8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005800 	.word	0x40005800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400

08000d44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_I2C_MspDeInit+0x3c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10f      	bne.n	8000d76 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_I2C_MspDeInit+0x40>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_I2C_MspDeInit+0x40>)
 8000d5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <HAL_I2C_MspDeInit+0x44>)
 8000d68:	f000 fef2 	bl	8001b50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_I2C_MspDeInit+0x44>)
 8000d72:	f000 feed 	bl	8001b50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40005800 	.word	0x40005800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000400 	.word	0x48000400

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ae      	sub	sp, #184	; 0xb8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2294      	movs	r2, #148	; 0x94
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 faba 	bl	8005326 <memset>
  if(huart->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <HAL_UART_MspInit+0xb0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d13b      	bne.n	8000e34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fd97 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ff2e 	bl	8000c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f000 fcfc 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b8      	adds	r7, #184	; 0xb8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40021000 	.word	0x40021000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 fb76 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e00a      	b.n	8000ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eaa:	f3af 8000 	nop.w
 8000eae:	4601      	mov	r1, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf0      	blt.n	8000eaa <_read+0x12>
  }

  return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efa:	605a      	str	r2, [r3, #4]
  return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f004 fa2a 	bl	80053c4 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200a0000 	.word	0x200a0000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	2000017c 	.word	0x2000017c
 8000fa4:	20000328 	.word	0x20000328

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f004 f9e9 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff fcc7 	bl	8000990 <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001004:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001010:	080060c8 	.word	0x080060c8
  ldr r2, =_sbss
 8001014:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001018:	20000328 	.word	0x20000328

0800101c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_IRQHandler>
	...

08001020 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <I2Cx_MspInit+0xa8>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <I2Cx_MspInit+0xa8>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001044:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	481b      	ldr	r0, [pc, #108]	; (80010cc <I2Cx_MspInit+0xac>)
 800105e:	f000 fbe5 	bl	800182c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <I2Cx_MspInit+0xac>)
 800106a:	f000 fbdf 	bl	800182c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <I2Cx_MspInit+0xa8>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <I2Cx_MspInit+0xa8>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001090:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <I2Cx_MspInit+0xa8>)
 8001098:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800109c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	210f      	movs	r1, #15
 80010a2:	2021      	movs	r0, #33	; 0x21
 80010a4:	f000 fb8b 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80010a8:	2021      	movs	r0, #33	; 0x21
 80010aa:	f000 fba4 	bl	80017f6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	210f      	movs	r1, #15
 80010b2:	2022      	movs	r0, #34	; 0x22
 80010b4:	f000 fb83 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80010b8:	2022      	movs	r0, #34	; 0x22
 80010ba:	f000 fb9c 	bl	80017f6 <HAL_NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <I2Cx_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <I2Cx_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff89 	bl	8001020 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fe10 	bl	8001d34 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 fbbc 	bl	8002894 <HAL_I2CEx_ConfigAnalogFilter>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005800 	.word	0x40005800
 8001128:	00702681 	.word	0x00702681

0800112c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af04      	add	r7, sp, #16
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4603      	mov	r3, r0
 800113c:	72fb      	strb	r3, [r7, #11]
 800113e:	460b      	mov	r3, r1
 8001140:	813b      	strh	r3, [r7, #8]
 8001142:	4613      	mov	r3, r2
 8001144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	b299      	uxth	r1, r3
 800114e:	88f8      	ldrh	r0, [r7, #6]
 8001150:	893a      	ldrh	r2, [r7, #8]
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4603      	mov	r3, r0
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 ffc4 	bl	80020f0 <HAL_I2C_Mem_Read>
 8001168:	4603      	mov	r3, r0
 800116a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	4619      	mov	r1, r3
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f832 	bl	80011e0 <I2Cx_Error>
  }
  return status;
 800117c:	7dfb      	ldrb	r3, [r7, #23]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b08a      	sub	sp, #40	; 0x28
 800118a:	af04      	add	r7, sp, #16
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4603      	mov	r3, r0
 8001196:	72fb      	strb	r3, [r7, #11]
 8001198:	460b      	mov	r3, r1
 800119a:	813b      	strh	r3, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	b299      	uxth	r1, r3
 80011a8:	88f8      	ldrh	r0, [r7, #6]
 80011aa:	893a      	ldrh	r2, [r7, #8]
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4603      	mov	r3, r0
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 fe83 	bl	8001ec8 <HAL_I2C_Mem_Write>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	4619      	mov	r1, r3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f805 	bl	80011e0 <I2Cx_Error>
  }
  return status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fe3c 	bl	8001e6a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff6c 	bl	80010d0 <I2Cx_Init>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <SENSOR_IO_Init+0x10>)
 8001206:	f7ff ff63 	bl	80010d0 <I2Cx_Init>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000180 	.word	0x20000180

08001214 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	b29a      	uxth	r2, r3
 800122a:	79f9      	ldrb	r1, [r7, #7]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	1d7b      	adds	r3, r7, #5
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <SENSOR_IO_Write+0x30>)
 8001238:	f7ff ffa5 	bl	8001186 <I2Cx_WriteMultiple>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000180 	.word	0x20000180

08001248 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	b29a      	uxth	r2, r3
 8001260:	79f9      	ldrb	r1, [r7, #7]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <SENSOR_IO_Read+0x38>)
 8001270:	f7ff ff5c 	bl	800112c <I2Cx_ReadMultiple>

  return read_value;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000180 	.word	0x20000180

08001284 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	603a      	str	r2, [r7, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	b29a      	uxth	r2, r3
 800129e:	79f9      	ldrb	r1, [r7, #7]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <SENSOR_IO_ReadMultiple+0x38>)
 80012ac:	f7ff ff3e 	bl	800112c <I2Cx_ReadMultiple>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29b      	uxth	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000180 	.word	0x20000180

080012c0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <BSP_HSENSOR_Init+0x38>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	20be      	movs	r0, #190	; 0xbe
 80012cc:	4798      	blx	r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	2bbc      	cmp	r3, #188	; 0xbc
 80012d2:	d002      	beq.n	80012da <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e009      	b.n	80012ee <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <BSP_HSENSOR_Init+0x3c>)
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <BSP_HSENSOR_Init+0x38>)
 80012de:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <BSP_HSENSOR_Init+0x3c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	20be      	movs	r0, #190	; 0xbe
 80012e8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80012ee:	687b      	ldr	r3, [r7, #4]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000004 	.word	0x20000004
 80012fc:	200001d4 	.word	0x200001d4

08001300 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	20be      	movs	r0, #190	; 0xbe
 800130c:	4798      	blx	r3
 800130e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001d4 	.word	0x200001d4

0800131c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2120      	movs	r1, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff8b 	bl	8001248 <SENSOR_IO_Read>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	f023 0303 	bic.w	r3, r3, #3
 800134c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800135c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	2120      	movs	r1, #32
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff54 	bl	8001214 <SENSOR_IO_Write>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001382:	f7ff ff3d 	bl	8001200 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	210f      	movs	r1, #15
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5b 	bl	8001248 <SENSOR_IO_Read>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	f107 020c 	add.w	r2, r7, #12
 80013b2:	2302      	movs	r3, #2
 80013b4:	21b0      	movs	r1, #176	; 0xb0
 80013b6:	f7ff ff65 	bl	8001284 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	b2d8      	uxtb	r0, r3
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	2302      	movs	r3, #2
 80013d4:	21b6      	movs	r1, #182	; 0xb6
 80013d6:	f7ff ff55 	bl	8001284 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	2302      	movs	r3, #2
 80013f2:	21ba      	movs	r1, #186	; 0xba
 80013f4:	f7ff ff46 	bl	8001284 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	7b3b      	ldrb	r3, [r7, #12]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	f107 020c 	add.w	r2, r7, #12
 800140e:	2302      	movs	r3, #2
 8001410:	21a8      	movs	r1, #168	; 0xa8
 8001412:	f7ff ff37 	bl	8001284 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	7b3b      	ldrb	r3, [r7, #12]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001428:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001436:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800143a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001448:	ee67 6a27 	vmul.f32	s13, s14, s15
 800144c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001450:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001462:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001476:	edd7 7a04 	vldr	s15, [r7, #16]
 800147a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001486:	edd7 7a04 	vldr	s15, [r7, #16]
 800148a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80014d0 <HTS221_H_ReadHumidity+0x130>
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd01      	ble.n	800149c <HTS221_H_ReadHumidity+0xfc>
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HTS221_H_ReadHumidity+0x134>)
 800149a:	e00a      	b.n	80014b2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800149c:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d502      	bpl.n	80014b0 <HTS221_H_ReadHumidity+0x110>
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e000      	b.n	80014b2 <HTS221_H_ReadHumidity+0x112>
 80014b0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80014b2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80014b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	447a0000 	.word	0x447a0000
 80014d4:	447a0000 	.word	0x447a0000

080014d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f960 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f80d 	bl	8001508 <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e001      	b.n	80014fe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fa:	f7ff fba1 	bl	8000c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d023      	beq.n	8001564 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_InitTick+0x70>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_InitTick+0x6c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f96d 	bl	8001812 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d809      	bhi.n	8001558 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f937 	bl	80017be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_InitTick+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e007      	b.n	8001568 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e004      	b.n	8001568 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e001      	b.n	8001568 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000014 	.word	0x20000014
 8001578:	20000000 	.word	0x20000000
 800157c:	20000010 	.word	0x20000010

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000014 	.word	0x20000014
 80015a4:	200001d8 	.word	0x200001d8

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200001d8 	.word	0x200001d8

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000014 	.word	0x20000014

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e166      	b.n	8001b0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8158 	beq.w	8001b04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d005      	beq.n	800186c <HAL_GPIO_Init+0x40>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d130      	bne.n	80018ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 0201 	and.w	r2, r3, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d017      	beq.n	800190a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d123      	bne.n	800195e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0203 	and.w	r2, r3, #3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b2 	beq.w	8001b04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6613      	str	r3, [r2, #96]	; 0x60
 80019ac:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b8:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_GPIO_Init+0x300>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e2:	d02b      	beq.n	8001a3c <HAL_GPIO_Init+0x210>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x304>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d025      	beq.n	8001a38 <HAL_GPIO_Init+0x20c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_GPIO_Init+0x308>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d01f      	beq.n	8001a34 <HAL_GPIO_Init+0x208>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <HAL_GPIO_Init+0x30c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d019      	beq.n	8001a30 <HAL_GPIO_Init+0x204>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_GPIO_Init+0x310>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x200>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x314>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1fc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x318>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1f8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x31c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1f4>
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	e00e      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a20:	2308      	movs	r3, #8
 8001a22:	e00c      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ae91 	bne.w	800183c <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	48001800 	.word	0x48001800
 8001b48:	48001c00 	.word	0x48001c00
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001b5e:	e0c9      	b.n	8001cf4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b60:	2201      	movs	r2, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80bc 	beq.w	8001cee <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b76:	4a66      	ldr	r2, [pc, #408]	; (8001d10 <HAL_GPIO_DeInit+0x1c0>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b9e:	d02b      	beq.n	8001bf8 <HAL_GPIO_DeInit+0xa8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a5c      	ldr	r2, [pc, #368]	; (8001d14 <HAL_GPIO_DeInit+0x1c4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d025      	beq.n	8001bf4 <HAL_GPIO_DeInit+0xa4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a5b      	ldr	r2, [pc, #364]	; (8001d18 <HAL_GPIO_DeInit+0x1c8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01f      	beq.n	8001bf0 <HAL_GPIO_DeInit+0xa0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_GPIO_DeInit+0x1cc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d019      	beq.n	8001bec <HAL_GPIO_DeInit+0x9c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a59      	ldr	r2, [pc, #356]	; (8001d20 <HAL_GPIO_DeInit+0x1d0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_DeInit+0x98>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_GPIO_DeInit+0x1d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_DeInit+0x94>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_GPIO_DeInit+0x1d8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_DeInit+0x90>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_DeInit+0x1dc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_DeInit+0x8c>
 8001bd8:	2307      	movs	r3, #7
 8001bda:	e00e      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001bdc:	2308      	movs	r3, #8
 8001bde:	e00c      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001be0:	2306      	movs	r3, #6
 8001be2:	e00a      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001be4:	2305      	movs	r3, #5
 8001be6:	e008      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001bec:	2303      	movs	r3, #3
 8001bee:	e004      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e002      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_GPIO_DeInit+0xaa>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	4093      	lsls	r3, r2
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d132      	bne.n	8001c70 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4947      	ldr	r1, [pc, #284]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001c18:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4943      	ldr	r1, [pc, #268]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001c26:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4940      	ldr	r1, [pc, #256]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001c34:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	493c      	ldr	r1, [pc, #240]	; (8001d30 <HAL_GPIO_DeInit+0x1e0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_GPIO_DeInit+0x1c0>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43da      	mvns	r2, r3
 8001c62:	482b      	ldr	r0, [pc, #172]	; (8001d10 <HAL_GPIO_DeInit+0x1c0>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	400a      	ands	r2, r1
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2103      	movs	r1, #3
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	08d2      	lsrs	r2, r2, #3
 8001ca4:	4019      	ands	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f af2f 	bne.w	8001b60 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40010000 	.word	0x40010000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	48001000 	.word	0x48001000
 8001d24:	48001400 	.word	0x48001400
 8001d28:	48001800 	.word	0x48001800
 8001d2c:	48001c00 	.word	0x48001c00
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e08d      	b.n	8001e62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe ff94 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e006      	b.n	8001dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d108      	bne.n	8001dd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	e007      	b.n	8001de6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69d9      	ldr	r1, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e021      	b.n	8001ec0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe ff55 	bl	8000d44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	817b      	strh	r3, [r7, #10]
 8001eda:	460b      	mov	r3, r1
 8001edc:	813b      	strh	r3, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 80f9 	bne.w	80020e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_I2C_Mem_Write+0x34>
 8001ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0ed      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Mem_Write+0x4e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0e6      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1e:	f7ff fb43 	bl	80015a8 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fac3 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0d1      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2221      	movs	r2, #33	; 0x21
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a3a      	ldr	r2, [r7, #32]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f68:	88f8      	ldrh	r0, [r7, #6]
 8001f6a:	893a      	ldrh	r2, [r7, #8]
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4603      	mov	r3, r0
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f9d3 	bl	8002324 <I2C_RequestMemoryWrite>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0a9      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d90e      	bls.n	8001fb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fc3d 	bl	8002830 <I2C_TransferConfig>
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fc2c 	bl	8002830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fabc 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e07b      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d034      	beq.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d130      	bne.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	2200      	movs	r2, #0
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa3f 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e04d      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d90e      	bls.n	8002070 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fbe1 	bl	8002830 <I2C_TransferConfig>
 800206e:	e00f      	b.n	8002090 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207e:	b2da      	uxtb	r2, r3
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	2300      	movs	r3, #0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fbd0 	bl	8002830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d19e      	bne.n	8001fd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 faa2 	bl	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e01a      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2220      	movs	r2, #32
 80020b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_I2C_Mem_Write+0x224>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	fe00e800 	.word	0xfe00e800

080020f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 80fd 	bne.w	8002312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_I2C_Mem_Read+0x34>
 800211e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0f1      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_I2C_Mem_Read+0x4e>
 800213a:	2302      	movs	r3, #2
 800213c:	e0ea      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002146:	f7ff fa2f 	bl	80015a8 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2319      	movs	r3, #25
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f9af 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0d5      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2222      	movs	r2, #34	; 0x22
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002190:	88f8      	ldrh	r0, [r7, #6]
 8002192:	893a      	ldrh	r2, [r7, #8]
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4603      	mov	r3, r0
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f913 	bl	80023cc <I2C_RequestMemoryRead>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0ad      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2bff      	cmp	r3, #255	; 0xff
 80021c0:	d90e      	bls.n	80021e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	22ff      	movs	r2, #255	; 0xff
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_I2C_Mem_Read+0x22c>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fb29 	bl	8002830 <I2C_TransferConfig>
 80021de:	e00f      	b.n	8002200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	8979      	ldrh	r1, [r7, #10]
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_I2C_Mem_Read+0x22c>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fb18 	bl	8002830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	2104      	movs	r1, #4
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f956 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07c      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d034      	beq.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d130      	bne.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	2200      	movs	r2, #0
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f927 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04d      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2bff      	cmp	r3, #255	; 0xff
 8002280:	d90e      	bls.n	80022a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	b2da      	uxtb	r2, r3
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fac9 	bl	8002830 <I2C_TransferConfig>
 800229e:	e00f      	b.n	80022c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	8979      	ldrh	r1, [r7, #10]
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fab8 	bl	8002830 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d19a      	bne.n	8002200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f98a 	bl	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e01a      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_I2C_Mem_Read+0x230>)
 80022f2:	400b      	ands	r3, r1
 80022f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	80002400 	.word	0x80002400
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	460b      	mov	r3, r1
 8002338:	813b      	strh	r3, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <I2C_RequestMemoryWrite+0xa4>)
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fa6f 	bl	8002830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8ff 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e02c      	b.n	80023c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800236c:	893b      	ldrh	r3, [r7, #8]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
 8002376:	e015      	b.n	80023a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29b      	uxth	r3, r3
 800237e:	b2da      	uxtb	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	69b9      	ldr	r1, [r7, #24]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f8e5 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e012      	b.n	80023c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800239a:	893b      	ldrh	r3, [r7, #8]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2200      	movs	r2, #0
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f884 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	80002000 	.word	0x80002000

080023cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <I2C_RequestMemoryRead+0xa4>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa1c 	bl	8002830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f8ac 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e02c      	b.n	8002466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
 800241c:	e015      	b.n	800244a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800241e:	893b      	ldrh	r3, [r7, #8]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f892 	bl	800255a <I2C_WaitOnTXISFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e012      	b.n	8002466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002440:	893b      	ldrh	r3, [r7, #8]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	; 0x40
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f831 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	80002000 	.word	0x80002000

08002474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d103      	bne.n	8002492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	619a      	str	r2, [r3, #24]
  }
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e031      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d02d      	beq.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7ff f867 	bl	80015a8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d122      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d113      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	429a      	cmp	r2, r3
 800254e:	d0be      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002566:	e033      	b.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f87f 	bl	8002670 <I2C_IsErrorOccurred>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e031      	b.n	80025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d025      	beq.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002584:	f7ff f810 	bl	80015a8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	429a      	cmp	r2, r3
 8002592:	d302      	bcc.n	800259a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11a      	bne.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d013      	beq.n	80025d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d1c4      	bne.n	8002568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f4:	e02f      	b.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f838 	bl	8002670 <I2C_IsErrorOccurred>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02d      	b.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7fe ffcd 	bl	80015a8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11a      	bne.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d013      	beq.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d1c8      	bne.n	80025f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d068      	beq.n	800276e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2210      	movs	r2, #16
 80026a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a4:	e049      	b.n	800273a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d045      	beq.n	800273a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe ff7b 	bl	80015a8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_IsErrorOccurred+0x54>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d13a      	bne.n	800273a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e6:	d121      	bne.n	800272c <I2C_IsErrorOccurred+0xbc>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ee:	d01d      	beq.n	800272c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d01a      	beq.n	800272c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002704:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002706:	f7fe ff4f 	bl	80015a8 <HAL_GetTick>
 800270a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	e00e      	b.n	800272c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800270e:	f7fe ff4b 	bl	80015a8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b19      	cmp	r3, #25
 800271a:	d907      	bls.n	800272c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800272a:	e006      	b.n	800273a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b20      	cmp	r3, #32
 8002738:	d1e9      	bne.n	800270e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d003      	beq.n	8002750 <I2C_IsErrorOccurred+0xe0>
 8002748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0aa      	beq.n	80026a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe45 	bl	8002474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <I2C_IsErrorOccurred+0x1bc>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800281e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002822:	4618      	mov	r0, r3
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	fe00e800 	.word	0xfe00e800

08002830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	4613      	mov	r3, r2
 8002840:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002848:	7a7b      	ldrb	r3, [r7, #9]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002850:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	4313      	orrs	r3, r2
 800285a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800285e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	0d5b      	lsrs	r3, r3, #21
 800286a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <I2C_TransferConfig+0x60>)
 8002870:	430b      	orrs	r3, r1
 8002872:	43db      	mvns	r3, r3
 8002874:	ea02 0103 	and.w	r1, r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	03ff63ff 	.word	0x03ff63ff

08002894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d138      	bne.n	800291c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e032      	b.n	800291e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d139      	bne.n	80029b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800294a:	2302      	movs	r3, #2
 800294c:	e033      	b.n	80029b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800297c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d102      	bne.n	80029dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	e00b      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d102      	bne.n	80029f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	e000      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d158      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e057      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e04d      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d141      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d131      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2232      	movs	r2, #50	; 0x32
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae2:	e002      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d102      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d112      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e011      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b30:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f000 bc08 	b.w	8003370 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4b96      	ldr	r3, [pc, #600]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80e4 	beq.w	8002d4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4c>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	f040 808b 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 8087 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b98:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x64>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e3df      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4b81      	ldr	r3, [pc, #516]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_RCC_OscConfig+0x7e>
 8002bc0:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a>
 8002bca:	4b7c      	ldr	r3, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d223      	bcs.n	8002c22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fdcc 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e3c0      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a72      	ldr	r2, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	496d      	ldr	r1, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0c:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4968      	ldr	r1, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e025      	b.n	8002c6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4960      	ldr	r1, [pc, #384]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	495b      	ldr	r1, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd8c 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e380      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6e:	f000 fcc1 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	4950      	ldr	r1, [pc, #320]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a4e      	ldr	r2, [pc, #312]	; (8002dc4 <HAL_RCC_OscConfig+0x278>)
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fc38 	bl	8001508 <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d052      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	e364      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d032      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc75 	bl	80015a8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fc71 	bl	80015a8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e34d      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4930      	ldr	r1, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	492b      	ldr	r1, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e01a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc42 	bl	80015a8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d28:	f7fe fc3e 	bl	80015a8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e31a      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1dc>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d073      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x21c>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d063      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e2f7      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x24c>
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e025      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d114      	bne.n	8002dcc <HAL_RCC_OscConfig+0x280>
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a02      	ldr	r2, [pc, #8]	; (8002dbc <HAL_RCC_OscConfig+0x270>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08006014 	.word	0x08006014
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	4ba0      	ldr	r3, [pc, #640]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a9f      	ldr	r2, [pc, #636]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b9d      	ldr	r3, [pc, #628]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a9c      	ldr	r2, [pc, #624]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fbdc 	bl	80015a8 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fbd8 	bl	80015a8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e2b4      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	4b92      	ldr	r3, [pc, #584]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2a8>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fbc8 	bl	80015a8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fbc4 	bl	80015a8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2a0      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2d0>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x310>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x328>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e27d      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4973      	ldr	r1, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	e040      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6e      	ldr	r2, [pc, #440]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fb83 	bl	80015a8 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fb7f 	bl	80015a8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e25b      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	495f      	ldr	r1, [pc, #380]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e018      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fb5f 	bl	80015a8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fb5b 	bl	80015a8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e237      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fb3a 	bl	80015a8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe fb36 	bl	80015a8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e212      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ef      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
 8002f58:	e01b      	b.n	8002f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fb1d 	bl	80015a8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe fb19 	bl	80015a8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1f5      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ef      	bne.n	8002f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a6 	beq.w	80030ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	4b21      	ldr	r3, [pc, #132]	; (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_RCC_OscConfig+0x508>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fae0 	bl	80015a8 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe fadc 	bl	80015a8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1b8      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_RCC_OscConfig+0x508>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x4d8>
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003022:	e029      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d115      	bne.n	8003058 <HAL_RCC_OscConfig+0x50c>
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	4b9d      	ldr	r3, [pc, #628]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a9c      	ldr	r2, [pc, #624]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003068:	4b99      	ldr	r3, [pc, #612]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a98      	ldr	r2, [pc, #608]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d016      	beq.n	80030ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fa92 	bl	80015a8 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fe fa8e 	bl	80015a8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e168      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ed      	beq.n	8003088 <HAL_RCC_OscConfig+0x53c>
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fa7b 	bl	80015a8 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fa77 	bl	80015a8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e151      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ed      	bne.n	80030b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a7a      	ldr	r2, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03c      	beq.n	8003172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fa4a 	bl	80015a8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fe fa46 	bl	80015a8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e122      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800312a:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCC_OscConfig+0x5cc>
 8003138:	e01b      	b.n	8003172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003140:	4a63      	ldr	r2, [pc, #396]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe fa2d 	bl	80015a8 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fe fa29 	bl	80015a8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e105      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ef      	bne.n	8003152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80f9 	beq.w	800336e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 80cf 	bne.w	8003324 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003186:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	429a      	cmp	r2, r3
 8003198:	d12c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	3b01      	subs	r3, #1
 80031a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d123      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d11b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d113      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	3b01      	subs	r3, #1
 80031da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d109      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	3b01      	subs	r3, #1
 80031ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d071      	beq.n	80032d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d068      	beq.n	80032cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0ac      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800321c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003222:	f7fe f9c1 	bl	80015a8 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe f9bd 	bl	80015a8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e099      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800324e:	4013      	ands	r3, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003258:	3a01      	subs	r2, #1
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003262:	0212      	lsls	r2, r2, #8
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0552      	lsls	r2, r2, #21
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003276:	0852      	lsrs	r2, r2, #1
 8003278:	3a01      	subs	r2, #1
 800327a:	0652      	lsls	r2, r2, #25
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003282:	06d2      	lsls	r2, r2, #27
 8003284:	430a      	orrs	r2, r1
 8003286:	4912      	ldr	r1, [pc, #72]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032a4:	f7fe f980 	bl	80015a8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe f97c 	bl	80015a8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e058      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ca:	e050      	b.n	800336e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e04f      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
 80032d0:	40021000 	.word	0x40021000
 80032d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d144      	bne.n	800336e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032fc:	f7fe f954 	bl	80015a8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f950 	bl	80015a8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e02c      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x7b8>
 8003322:	e024      	b.n	800336e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d01f      	beq.n	800336a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe f937 	bl	80015a8 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe f933 	bl	80015a8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4905      	ldr	r1, [pc, #20]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x830>)
 8003364:	4013      	ands	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
 8003368:	e001      	b.n	800336e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	feeefffc 	.word	0xfeeefffc

08003380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e11d      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b90      	ldr	r3, [pc, #576]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d910      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 020f 	bic.w	r2, r3, #15
 80033ae:	498b      	ldr	r1, [pc, #556]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e105      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d908      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	497b      	ldr	r1, [pc, #492]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d079      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d11e      	bne.n	8003448 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0dc      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800341a:	f000 fa09 	bl	8003830 <RCC_GetSysClockFreqFromPLLSource>
 800341e:	4603      	mov	r3, r0
 8003420:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <HAL_RCC_ClockConfig+0x264>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d946      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003426:	4b6e      	ldr	r3, [pc, #440]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d140      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003432:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343a:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e035      	b.n	80034b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d107      	bne.n	8003460 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003450:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d115      	bne.n	8003488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b9      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003468:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0ad      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0a5      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003488:	f000 f8b4 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800348c:	4603      	mov	r3, r0
 800348e:	4a55      	ldr	r2, [pc, #340]	; (80035e4 <HAL_RCC_ClockConfig+0x264>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d90f      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b4:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 0203 	bic.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4947      	ldr	r1, [pc, #284]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c6:	f7fe f86f 	bl	80015a8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fe f86b 	bl	80015a8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e077      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 020c 	and.w	r2, r3, #12
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d1eb      	bne.n	80034ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034fc:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003506:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003520:	429a      	cmp	r2, r3
 8003522:	d208      	bcs.n	8003536 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	492b      	ldr	r1, [pc, #172]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d210      	bcs.n	8003566 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 020f 	bic.w	r2, r3, #15
 800354c:	4923      	ldr	r1, [pc, #140]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e036      	b.n	80035d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4918      	ldr	r1, [pc, #96]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4910      	ldr	r1, [pc, #64]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a4:	f000 f826 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	490c      	ldr	r1, [pc, #48]	; (80035e8 <HAL_RCC_ClockConfig+0x268>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x26c>)
 80035c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_ClockConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd ff9d 	bl	8001508 <HAL_InitTick>
 80035ce:	4603      	mov	r3, r0
 80035d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	04c4b400 	.word	0x04c4b400
 80035e8:	08006014 	.word	0x08006014
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000010 	.word	0x20000010

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d121      	bne.n	8003666 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d11e      	bne.n	8003666 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003628:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e005      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003650:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003664:	e00a      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d102      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_GetSysClockFreq+0x110>)
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e004      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d101      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_RCC_GetSysClockFreq+0x114>)
 800367a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d134      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0xa6>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d003      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003698:	e005      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCC_GetSysClockFreq+0x110>)
 800369c:	617b      	str	r3, [r7, #20]
      break;
 800369e:	e005      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_GetSysClockFreq+0x114>)
 80036a2:	617b      	str	r3, [r7, #20]
      break;
 80036a4:	e002      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	617b      	str	r3, [r7, #20]
      break;
 80036aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3301      	adds	r3, #1
 80036b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	fb03 f202 	mul.w	r2, r3, r2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	0e5b      	lsrs	r3, r3, #25
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	3301      	adds	r3, #1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036ec:	69bb      	ldr	r3, [r7, #24]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	0800602c 	.word	0x0800602c
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4904      	ldr	r1, [pc, #16]	; (800374c <HAL_RCC_GetPCLK1Freq+0x28>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000
 800374c:	08006024 	.word	0x08006024

08003750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003754:	f7ff ffda 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0adb      	lsrs	r3, r3, #11
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4904      	ldr	r1, [pc, #16]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	08006024 	.word	0x08006024

0800377c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003794:	f7ff f916 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 8003798:	6178      	str	r0, [r7, #20]
 800379a:	e014      	b.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b22      	ldr	r3, [pc, #136]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a21      	ldr	r2, [pc, #132]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037b4:	f7ff f906 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 80037b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d10b      	bne.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d913      	bls.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2ba0      	cmp	r3, #160	; 0xa0
 80037d8:	d902      	bls.n	80037e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037da:	2302      	movs	r3, #2
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e00d      	b.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e0:	2301      	movs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	e00a      	b.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b7f      	cmp	r3, #127	; 0x7f
 80037ea:	d902      	bls.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80037ec:	2302      	movs	r3, #2
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e004      	b.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d101      	bne.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f8:	2301      	movs	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 020f 	bic.w	r2, r3, #15
 8003804:	4909      	ldr	r1, [pc, #36]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	40022000 	.word	0x40022000

08003830 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d00b      	beq.n	800385e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d825      	bhi.n	8003898 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d008      	beq.n	8003864 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d11f      	bne.n	8003898 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800385a:	613b      	str	r3, [r7, #16]
    break;
 800385c:	e01f      	b.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800385e:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003860:	613b      	str	r3, [r7, #16]
    break;
 8003862:	e01c      	b.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e005      	b.n	800388c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	613b      	str	r3, [r7, #16]
    break;
 8003896:	e002      	b.n	800389e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
    break;
 800389c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	3301      	adds	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	fb03 f202 	mul.w	r2, r3, r2
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0e5b      	lsrs	r3, r3, #25
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	3301      	adds	r3, #1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038de:	683b      	ldr	r3, [r7, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40021000 	.word	0x40021000
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200
 80038f8:	0800602c 	.word	0x0800602c

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003904:	2300      	movs	r3, #0
 8003906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003908:	2300      	movs	r3, #0
 800390a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d040      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d02a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d825      	bhi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003924:	2b60      	cmp	r3, #96	; 0x60
 8003926:	d026      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003928:	2b60      	cmp	r3, #96	; 0x60
 800392a:	d821      	bhi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d006      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d81d      	bhi.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003938:	2b20      	cmp	r3, #32
 800393a:	d010      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800393c:	e018      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a88      	ldr	r2, [pc, #544]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394a:	e015      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fb02 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395c:	e00c      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3320      	adds	r3, #32
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fbed 	bl	8004144 <RCCEx_PLLSAI2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	74fb      	strb	r3, [r7, #19]
      break;
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003984:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398c:	4975      	ldr	r1, [pc, #468]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003994:	e001      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d047      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d030      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b4:	d82a      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ba:	d02a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c0:	d824      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d81e      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d6:	d010      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039d8:	e018      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e6:	e015      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fab4 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f8:	e00c      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3320      	adds	r3, #32
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fb9f 	bl	8004144 <RCCEx_PLLSAI2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	74fb      	strb	r3, [r7, #19]
      break;
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	494e      	ldr	r1, [pc, #312]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a30:	e001      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 809f 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a48:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	4a40      	ldr	r2, [pc, #256]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a86:	f7fd fd8f 	bl	80015a8 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8e:	f7fd fd8b 	bl	80015a8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d902      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	74fb      	strb	r3, [r7, #19]
        break;
 8003aa0:	e005      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ef      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d15b      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01f      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d019      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fd4a 	bl	80015a8 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b16:	e00b      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd fd46 	bl	80015a8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d902      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b2e:	e006      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ec      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	74bb      	strb	r3, [r7, #18]
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b70:	7c7b      	ldrb	r3, [r7, #17]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4a9f      	ldr	r2, [pc, #636]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8e:	4b9a      	ldr	r3, [pc, #616]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	4996      	ldr	r1, [pc, #600]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb0:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 020c 	bic.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	498e      	ldr	r1, [pc, #568]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd2:	4b89      	ldr	r3, [pc, #548]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	4985      	ldr	r1, [pc, #532]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c02:	497d      	ldr	r1, [pc, #500]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c16:	4b78      	ldr	r3, [pc, #480]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	4974      	ldr	r1, [pc, #464]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	496c      	ldr	r1, [pc, #432]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b67      	ldr	r3, [pc, #412]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	4963      	ldr	r1, [pc, #396]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c7c:	4b5e      	ldr	r3, [pc, #376]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8a:	495b      	ldr	r1, [pc, #364]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	4952      	ldr	r1, [pc, #328]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	494a      	ldr	r1, [pc, #296]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce2:	4b45      	ldr	r3, [pc, #276]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	4941      	ldr	r1, [pc, #260]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d04:	4b3c      	ldr	r3, [pc, #240]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	4939      	ldr	r1, [pc, #228]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d26:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	4930      	ldr	r1, [pc, #192]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d44:	d106      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d50:	60d3      	str	r3, [r2, #12]
 8003d52:	e011      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f8f9 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d04d      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8c:	d108      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d9e:	e012      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dbe:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dce:	d106      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
 8003ddc:	e020      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de6:	d109      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a02      	ldr	r2, [pc, #8]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df2:	60d3      	str	r3, [r2, #12]
 8003df4:	e014      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f8a5 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d028      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e2c:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3a:	4947      	ldr	r1, [pc, #284]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4c:	4b42      	ldr	r3, [pc, #264]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e56:	60d3      	str	r3, [r2, #12]
 8003e58:	e011      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f876 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01e      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	492f      	ldr	r1, [pc, #188]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f851 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eda:	f023 0204 	bic.w	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	491c      	ldr	r1, [pc, #112]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ef8:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003efe:	f023 0218 	bic.w	r2, r3, #24
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	4913      	ldr	r1, [pc, #76]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d017      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2c:	490a      	ldr	r1, [pc, #40]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f6a:	4b72      	ldr	r3, [pc, #456]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00e      	beq.n	8003f94 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f76:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0203 	and.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d103      	bne.n	8003f8e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
       ||
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d142      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	e03f      	b.n	8004014 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d018      	beq.n	8003fce <RCCEx_PLLSAI1_Config+0x72>
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d825      	bhi.n	8003fec <RCCEx_PLLSAI1_Config+0x90>
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d002      	beq.n	8003faa <RCCEx_PLLSAI1_Config+0x4e>
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d009      	beq.n	8003fbc <RCCEx_PLLSAI1_Config+0x60>
 8003fa8:	e020      	b.n	8003fec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003faa:	4b62      	ldr	r3, [pc, #392]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11d      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fba:	e01a      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d116      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fcc:	e013      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fce:	4b59      	ldr	r3, [pc, #356]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fda:	4b56      	ldr	r3, [pc, #344]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fea:	e006      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff0:	e004      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ffa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004002:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4949      	ldr	r1, [pc, #292]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 8086 	bne.w	8004128 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800401c:	4b45      	ldr	r3, [pc, #276]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a44      	ldr	r2, [pc, #272]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd fabe 	bl	80015a8 <HAL_GetTick>
 800402c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402e:	e009      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004030:	f7fd faba 	bl	80015a8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d902      	bls.n	8004044 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	73fb      	strb	r3, [r7, #15]
        break;
 8004042:	e005      	b.n	8004050 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ef      	bne.n	8004030 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d168      	bne.n	8004128 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d113      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004062:	4013      	ands	r3, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	06d2      	lsls	r2, r2, #27
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	3a01      	subs	r2, #1
 8004078:	0112      	lsls	r2, r2, #4
 800407a:	430a      	orrs	r2, r1
 800407c:	492d      	ldr	r1, [pc, #180]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]
 8004082:	e02d      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d115      	bne.n	80040b6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	0211      	lsls	r1, r2, #8
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6912      	ldr	r2, [r2, #16]
 800409c:	0852      	lsrs	r2, r2, #1
 800409e:	3a01      	subs	r2, #1
 80040a0:	0552      	lsls	r2, r2, #21
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6852      	ldr	r2, [r2, #4]
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0112      	lsls	r2, r2, #4
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4921      	ldr	r1, [pc, #132]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
 80040b4:	e014      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	4b21      	ldr	r3, [pc, #132]	; (8004140 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6892      	ldr	r2, [r2, #8]
 80040c2:	0211      	lsls	r1, r2, #8
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6952      	ldr	r2, [r2, #20]
 80040c8:	0852      	lsrs	r2, r2, #1
 80040ca:	3a01      	subs	r2, #1
 80040cc:	0652      	lsls	r2, r2, #25
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0112      	lsls	r2, r2, #4
 80040d8:	430a      	orrs	r2, r1
 80040da:	4916      	ldr	r1, [pc, #88]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a13      	ldr	r2, [pc, #76]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fa5c 	bl	80015a8 <HAL_GetTick>
 80040f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f2:	e009      	b.n	8004108 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f4:	f7fd fa58 	bl	80015a8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d902      	bls.n	8004108 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	73fb      	strb	r3, [r7, #15]
          break;
 8004106:	e005      	b.n	8004114 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ef      	beq.n	80040f4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	4904      	ldr	r1, [pc, #16]	; (8004134 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	07ff800f 	.word	0x07ff800f
 800413c:	ff9f800f 	.word	0xff9f800f
 8004140:	f9ff800f 	.word	0xf9ff800f

08004144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004152:	4b72      	ldr	r3, [pc, #456]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800415e:	4b6f      	ldr	r3, [pc, #444]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0203 	and.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d103      	bne.n	8004176 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
       ||
 8004172:	2b00      	cmp	r3, #0
 8004174:	d142      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e03f      	b.n	80041fc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d018      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x72>
 8004184:	2b03      	cmp	r3, #3
 8004186:	d825      	bhi.n	80041d4 <RCCEx_PLLSAI2_Config+0x90>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d002      	beq.n	8004192 <RCCEx_PLLSAI2_Config+0x4e>
 800418c:	2b02      	cmp	r3, #2
 800418e:	d009      	beq.n	80041a4 <RCCEx_PLLSAI2_Config+0x60>
 8004190:	e020      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004192:	4b62      	ldr	r3, [pc, #392]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11d      	bne.n	80041da <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a2:	e01a      	b.n	80041da <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a4:	4b5d      	ldr	r3, [pc, #372]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b4:	e013      	b.n	80041de <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041b6:	4b59      	ldr	r3, [pc, #356]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041c2:	4b56      	ldr	r3, [pc, #344]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041d2:	e006      	b.n	80041e2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e004      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80041ea:	4b4c      	ldr	r3, [pc, #304]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4949      	ldr	r1, [pc, #292]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 8086 	bne.w	8004310 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a44      	ldr	r2, [pc, #272]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 800420a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd f9ca 	bl	80015a8 <HAL_GetTick>
 8004214:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004216:	e009      	b.n	800422c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004218:	f7fd f9c6 	bl	80015a8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d902      	bls.n	800422c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	73fb      	strb	r3, [r7, #15]
        break;
 800422a:	e005      	b.n	8004238 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ef      	bne.n	8004218 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d168      	bne.n	8004310 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d113      	bne.n	800426c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004244:	4b35      	ldr	r3, [pc, #212]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <RCCEx_PLLSAI2_Config+0x1dc>)
 800424a:	4013      	ands	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	06d2      	lsls	r2, r2, #27
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6852      	ldr	r2, [r2, #4]
 800425e:	3a01      	subs	r2, #1
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	430a      	orrs	r2, r1
 8004264:	492d      	ldr	r1, [pc, #180]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	614b      	str	r3, [r1, #20]
 800426a:	e02d      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d115      	bne.n	800429e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004272:	4b2a      	ldr	r3, [pc, #168]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	4b2b      	ldr	r3, [pc, #172]	; (8004324 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	0211      	lsls	r1, r2, #8
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6912      	ldr	r2, [r2, #16]
 8004284:	0852      	lsrs	r2, r2, #1
 8004286:	3a01      	subs	r2, #1
 8004288:	0552      	lsls	r2, r2, #21
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6852      	ldr	r2, [r2, #4]
 8004290:	3a01      	subs	r2, #1
 8004292:	0112      	lsls	r2, r2, #4
 8004294:	430a      	orrs	r2, r1
 8004296:	4921      	ldr	r1, [pc, #132]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	614b      	str	r3, [r1, #20]
 800429c:	e014      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	4b21      	ldr	r3, [pc, #132]	; (8004328 <RCCEx_PLLSAI2_Config+0x1e4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	0211      	lsls	r1, r2, #8
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6952      	ldr	r2, [r2, #20]
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6852      	ldr	r2, [r2, #4]
 80042bc:	3a01      	subs	r2, #1
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	430a      	orrs	r2, r1
 80042c2:	4916      	ldr	r1, [pc, #88]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd f968 	bl	80015a8 <HAL_GetTick>
 80042d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042da:	e009      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042dc:	f7fd f964 	bl	80015a8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d902      	bls.n	80042f0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	73fb      	strb	r3, [r7, #15]
          break;
 80042ee:	e005      	b.n	80042fc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ef      	beq.n	80042dc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	4904      	ldr	r1, [pc, #16]	; (800431c <RCCEx_PLLSAI2_Config+0x1d8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	07ff800f 	.word	0x07ff800f
 8004324:	ff9f800f 	.word	0xff9f800f
 8004328:	f9ff800f 	.word	0xf9ff800f

0800432c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e042      	b.n	80043c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fd1b 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2224      	movs	r2, #36	; 0x24
 800435a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fbb4 	bl	8004ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8b5 	bl	80044ec <UART_SetConfig>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e01b      	b.n	80043c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fc33 	bl	8004c28 <UART_CheckIdleState>
 80043c2:	4603      	mov	r3, r0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d17c      	bne.n	80044e0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_UART_Transmit+0x26>
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e075      	b.n	80044e2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004406:	f7fd f8cf 	bl	80015a8 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004424:	d108      	bne.n	8004438 <HAL_UART_Transmit+0x6c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e003      	b.n	8004440 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004440:	e031      	b.n	80044a6 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fc95 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e03e      	b.n	80044e2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004476:	b292      	uxth	r2, r2
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3302      	adds	r3, #2
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	e008      	b.n	8004494 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	b292      	uxth	r2, r2
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1c7      	bne.n	8004442 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2140      	movs	r1, #64	; 0x40
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fc5d 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e006      	b.n	80044e2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b08c      	sub	sp, #48	; 0x30
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	431a      	orrs	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4baa      	ldr	r3, [pc, #680]	; (80047c4 <UART_SetConfig+0x2d8>)
 800451c:	4013      	ands	r3, r2
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a9f      	ldr	r2, [pc, #636]	; (80047c8 <UART_SetConfig+0x2dc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004554:	4313      	orrs	r3, r2
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004562:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456c:	430b      	orrs	r3, r1
 800456e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	f023 010f 	bic.w	r1, r3, #15
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a90      	ldr	r2, [pc, #576]	; (80047cc <UART_SetConfig+0x2e0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d125      	bne.n	80045dc <UART_SetConfig+0xf0>
 8004590:	4b8f      	ldr	r3, [pc, #572]	; (80047d0 <UART_SetConfig+0x2e4>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d81a      	bhi.n	80045d4 <UART_SetConfig+0xe8>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0xb8>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045c5 	.word	0x080045c5
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045cd 	.word	0x080045cd
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ba:	e116      	b.n	80047ea <UART_SetConfig+0x2fe>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c2:	e112      	b.n	80047ea <UART_SetConfig+0x2fe>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e10e      	b.n	80047ea <UART_SetConfig+0x2fe>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e10a      	b.n	80047ea <UART_SetConfig+0x2fe>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e106      	b.n	80047ea <UART_SetConfig+0x2fe>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <UART_SetConfig+0x2e8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d138      	bne.n	8004658 <UART_SetConfig+0x16c>
 80045e6:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <UART_SetConfig+0x2e4>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	d82d      	bhi.n	8004650 <UART_SetConfig+0x164>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x110>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004651 	.word	0x08004651
 8004604:	08004651 	.word	0x08004651
 8004608:	08004651 	.word	0x08004651
 800460c:	08004641 	.word	0x08004641
 8004610:	08004651 	.word	0x08004651
 8004614:	08004651 	.word	0x08004651
 8004618:	08004651 	.word	0x08004651
 800461c:	08004639 	.word	0x08004639
 8004620:	08004651 	.word	0x08004651
 8004624:	08004651 	.word	0x08004651
 8004628:	08004651 	.word	0x08004651
 800462c:	08004649 	.word	0x08004649
 8004630:	2300      	movs	r3, #0
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e0d8      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e0d4      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e0d0      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464e:	e0cc      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004656:	e0c8      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a5e      	ldr	r2, [pc, #376]	; (80047d8 <UART_SetConfig+0x2ec>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d125      	bne.n	80046ae <UART_SetConfig+0x1c2>
 8004662:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <UART_SetConfig+0x2e4>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d016      	beq.n	800469e <UART_SetConfig+0x1b2>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d818      	bhi.n	80046a6 <UART_SetConfig+0x1ba>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d00a      	beq.n	800468e <UART_SetConfig+0x1a2>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d814      	bhi.n	80046a6 <UART_SetConfig+0x1ba>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <UART_SetConfig+0x19a>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d008      	beq.n	8004696 <UART_SetConfig+0x1aa>
 8004684:	e00f      	b.n	80046a6 <UART_SetConfig+0x1ba>
 8004686:	2300      	movs	r3, #0
 8004688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468c:	e0ad      	b.n	80047ea <UART_SetConfig+0x2fe>
 800468e:	2302      	movs	r3, #2
 8004690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004694:	e0a9      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004696:	2304      	movs	r3, #4
 8004698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469c:	e0a5      	b.n	80047ea <UART_SetConfig+0x2fe>
 800469e:	2308      	movs	r3, #8
 80046a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a4:	e0a1      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046a6:	2310      	movs	r3, #16
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ac:	e09d      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4a      	ldr	r2, [pc, #296]	; (80047dc <UART_SetConfig+0x2f0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d125      	bne.n	8004704 <UART_SetConfig+0x218>
 80046b8:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <UART_SetConfig+0x2e4>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046c2:	2bc0      	cmp	r3, #192	; 0xc0
 80046c4:	d016      	beq.n	80046f4 <UART_SetConfig+0x208>
 80046c6:	2bc0      	cmp	r3, #192	; 0xc0
 80046c8:	d818      	bhi.n	80046fc <UART_SetConfig+0x210>
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d00a      	beq.n	80046e4 <UART_SetConfig+0x1f8>
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d814      	bhi.n	80046fc <UART_SetConfig+0x210>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <UART_SetConfig+0x1f0>
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d008      	beq.n	80046ec <UART_SetConfig+0x200>
 80046da:	e00f      	b.n	80046fc <UART_SetConfig+0x210>
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e082      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e07e      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e07a      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e076      	b.n	80047ea <UART_SetConfig+0x2fe>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e072      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a35      	ldr	r2, [pc, #212]	; (80047e0 <UART_SetConfig+0x2f4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d12a      	bne.n	8004764 <UART_SetConfig+0x278>
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <UART_SetConfig+0x2e4>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d01a      	beq.n	8004754 <UART_SetConfig+0x268>
 800471e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004722:	d81b      	bhi.n	800475c <UART_SetConfig+0x270>
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d00c      	beq.n	8004744 <UART_SetConfig+0x258>
 800472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472e:	d815      	bhi.n	800475c <UART_SetConfig+0x270>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <UART_SetConfig+0x250>
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d008      	beq.n	800474c <UART_SetConfig+0x260>
 800473a:	e00f      	b.n	800475c <UART_SetConfig+0x270>
 800473c:	2300      	movs	r3, #0
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e052      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004744:	2302      	movs	r3, #2
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e04e      	b.n	80047ea <UART_SetConfig+0x2fe>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e04a      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e046      	b.n	80047ea <UART_SetConfig+0x2fe>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e042      	b.n	80047ea <UART_SetConfig+0x2fe>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a17      	ldr	r2, [pc, #92]	; (80047c8 <UART_SetConfig+0x2dc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d13a      	bne.n	80047e4 <UART_SetConfig+0x2f8>
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <UART_SetConfig+0x2e4>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800477c:	d01a      	beq.n	80047b4 <UART_SetConfig+0x2c8>
 800477e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004782:	d81b      	bhi.n	80047bc <UART_SetConfig+0x2d0>
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	d00c      	beq.n	80047a4 <UART_SetConfig+0x2b8>
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d815      	bhi.n	80047bc <UART_SetConfig+0x2d0>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <UART_SetConfig+0x2b0>
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004798:	d008      	beq.n	80047ac <UART_SetConfig+0x2c0>
 800479a:	e00f      	b.n	80047bc <UART_SetConfig+0x2d0>
 800479c:	2300      	movs	r3, #0
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e022      	b.n	80047ea <UART_SetConfig+0x2fe>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e01e      	b.n	80047ea <UART_SetConfig+0x2fe>
 80047ac:	2304      	movs	r3, #4
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b2:	e01a      	b.n	80047ea <UART_SetConfig+0x2fe>
 80047b4:	2308      	movs	r3, #8
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ba:	e016      	b.n	80047ea <UART_SetConfig+0x2fe>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c2:	e012      	b.n	80047ea <UART_SetConfig+0x2fe>
 80047c4:	cfff69f3 	.word	0xcfff69f3
 80047c8:	40008000 	.word	0x40008000
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40004400 	.word	0x40004400
 80047d8:	40004800 	.word	0x40004800
 80047dc:	40004c00 	.word	0x40004c00
 80047e0:	40005000 	.word	0x40005000
 80047e4:	2310      	movs	r3, #16
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4aae      	ldr	r2, [pc, #696]	; (8004aa8 <UART_SetConfig+0x5bc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	f040 8097 	bne.w	8004924 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d823      	bhi.n	8004846 <UART_SetConfig+0x35a>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x318>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004847 	.word	0x08004847
 800480c:	08004831 	.word	0x08004831
 8004810:	08004847 	.word	0x08004847
 8004814:	08004837 	.word	0x08004837
 8004818:	08004847 	.word	0x08004847
 800481c:	08004847 	.word	0x08004847
 8004820:	08004847 	.word	0x08004847
 8004824:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe ff7c 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b9e      	ldr	r3, [pc, #632]	; (8004aac <UART_SetConfig+0x5c0>)
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe fedd 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004850:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8130 	beq.w	8004aba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	4a94      	ldr	r2, [pc, #592]	; (8004ab0 <UART_SetConfig+0x5c4>)
 8004860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004864:	461a      	mov	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	fbb3 f3f2 	udiv	r3, r3, r2
 800486c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d305      	bcc.n	800488a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	429a      	cmp	r2, r3
 8004888:	d903      	bls.n	8004892 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004890:	e113      	b.n	8004aba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	2200      	movs	r2, #0
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	60fa      	str	r2, [r7, #12]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <UART_SetConfig+0x5c4>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2200      	movs	r2, #0
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048b4:	f7fb fed8 	bl	8000668 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	020b      	lsls	r3, r1, #8
 80048ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ce:	0202      	lsls	r2, r0, #8
 80048d0:	6979      	ldr	r1, [r7, #20]
 80048d2:	6849      	ldr	r1, [r1, #4]
 80048d4:	0849      	lsrs	r1, r1, #1
 80048d6:	2000      	movs	r0, #0
 80048d8:	460c      	mov	r4, r1
 80048da:	4605      	mov	r5, r0
 80048dc:	eb12 0804 	adds.w	r8, r2, r4
 80048e0:	eb43 0905 	adc.w	r9, r3, r5
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	469a      	mov	sl, r3
 80048ec:	4693      	mov	fp, r2
 80048ee:	4652      	mov	r2, sl
 80048f0:	465b      	mov	r3, fp
 80048f2:	4640      	mov	r0, r8
 80048f4:	4649      	mov	r1, r9
 80048f6:	f7fb feb7 	bl	8000668 <__aeabi_uldivmod>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4613      	mov	r3, r2
 8004900:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004908:	d308      	bcc.n	800491c <UART_SetConfig+0x430>
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004910:	d204      	bcs.n	800491c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a3a      	ldr	r2, [r7, #32]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e0ce      	b.n	8004aba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004922:	e0ca      	b.n	8004aba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492c:	d166      	bne.n	80049fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800492e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004932:	2b08      	cmp	r3, #8
 8004934:	d827      	bhi.n	8004986 <UART_SetConfig+0x49a>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x450>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fee0 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004966:	e014      	b.n	8004992 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fe fef2 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800496e:	e010      	b.n	8004992 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b4e      	ldr	r3, [pc, #312]	; (8004aac <UART_SetConfig+0x5c0>)
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004974:	e00d      	b.n	8004992 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fe3d 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004984:	e005      	b.n	8004992 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8090 	beq.w	8004aba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	4a44      	ldr	r2, [pc, #272]	; (8004ab0 <UART_SetConfig+0x5c4>)
 80049a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ac:	005a      	lsls	r2, r3, #1
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	441a      	add	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	d916      	bls.n	80049f4 <UART_SetConfig+0x508>
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d212      	bcs.n	80049f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	8bfb      	ldrh	r3, [r7, #30]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	8bfa      	ldrh	r2, [r7, #30]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e062      	b.n	8004aba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049fa:	e05e      	b.n	8004aba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d828      	bhi.n	8004a56 <UART_SetConfig+0x56a>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0x520>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a57 	.word	0x08004a57
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a57 	.word	0x08004a57
 8004a28:	08004a57 	.word	0x08004a57
 8004a2c:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7fe fe78 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8004a34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a36:	e014      	b.n	8004a62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7fe fe8a 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a3e:	e010      	b.n	8004a62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <UART_SetConfig+0x5c0>)
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a44:	e00d      	b.n	8004a62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe fdd5 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8004a4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a4c:	e009      	b.n	8004a62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a54:	e005      	b.n	8004a62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a60:	bf00      	nop
    }

    if (pclk != 0U)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d028      	beq.n	8004aba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <UART_SetConfig+0x5c4>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	441a      	add	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d910      	bls.n	8004ab4 <UART_SetConfig+0x5c8>
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d20c      	bcs.n	8004ab4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e009      	b.n	8004aba <UART_SetConfig+0x5ce>
 8004aa6:	bf00      	nop
 8004aa8:	40008000 	.word	0x40008000
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	0800605c 	.word	0x0800605c
      }
      else
      {
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2200      	movs	r2, #0
 8004ace:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ad6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3730      	adds	r7, #48	; 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be2:	d10a      	bne.n	8004bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b098      	sub	sp, #96	; 0x60
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c38:	f7fc fcb6 	bl	80015a8 <HAL_GetTick>
 8004c3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d12f      	bne.n	8004cac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f88e 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d022      	beq.n	8004cac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
 8004c86:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e6      	bne.n	8004c66 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e063      	b.n	8004d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d149      	bne.n	8004d4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f857 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d03c      	beq.n	8004d4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3308      	adds	r3, #8
 8004d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d26:	61fa      	str	r2, [r7, #28]
 8004d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	617b      	str	r3, [r7, #20]
   return(result);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e5      	bne.n	8004d06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e012      	b.n	8004d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3758      	adds	r7, #88	; 0x58
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8c:	e049      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d045      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fc fc07 	bl	80015a8 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <UART_WaitOnFlagUntilTimeout+0x30>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e048      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d031      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d110      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f838 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e029      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d111      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f81e 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d0a6      	beq.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b095      	sub	sp, #84	; 0x54
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
 8004e72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e3      	bne.n	8004e84 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d118      	bne.n	8004ef6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6979      	ldr	r1, [r7, #20]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f0a:	bf00      	nop
 8004f0c:	3754      	adds	r7, #84	; 0x54
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_UARTEx_DisableFifoMode+0x16>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e027      	b.n	8004f7c <HAL_UARTEx_DisableFifoMode+0x66>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e02d      	b.n	8004ffc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	; 0x24
 8004fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f84f 	bl	8005080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e02d      	b.n	8005078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f811 	bl	8005080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508c:	2b00      	cmp	r3, #0
 800508e:	d108      	bne.n	80050a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050a0:	e031      	b.n	8005106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050a2:	2308      	movs	r3, #8
 80050a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050a6:	2308      	movs	r3, #8
 80050a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0e5b      	lsrs	r3, r3, #25
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	0f5b      	lsrs	r3, r3, #29
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050ca:	7bbb      	ldrb	r3, [r7, #14]
 80050cc:	7b3a      	ldrb	r2, [r7, #12]
 80050ce:	4911      	ldr	r1, [pc, #68]	; (8005114 <UARTEx_SetNbDataToProcess+0x94>)
 80050d0:	5c8a      	ldrb	r2, [r1, r2]
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050d6:	7b3a      	ldrb	r2, [r7, #12]
 80050d8:	490f      	ldr	r1, [pc, #60]	; (8005118 <UARTEx_SetNbDataToProcess+0x98>)
 80050da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	7b7a      	ldrb	r2, [r7, #13]
 80050ec:	4909      	ldr	r1, [pc, #36]	; (8005114 <UARTEx_SetNbDataToProcess+0x94>)
 80050ee:	5c8a      	ldrb	r2, [r1, r2]
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050f4:	7b7a      	ldrb	r2, [r7, #13]
 80050f6:	4908      	ldr	r1, [pc, #32]	; (8005118 <UARTEx_SetNbDataToProcess+0x98>)
 80050f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	08006074 	.word	0x08006074
 8005118:	0800607c 	.word	0x0800607c

0800511c <std>:
 800511c:	2300      	movs	r3, #0
 800511e:	b510      	push	{r4, lr}
 8005120:	4604      	mov	r4, r0
 8005122:	e9c0 3300 	strd	r3, r3, [r0]
 8005126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512a:	6083      	str	r3, [r0, #8]
 800512c:	8181      	strh	r1, [r0, #12]
 800512e:	6643      	str	r3, [r0, #100]	; 0x64
 8005130:	81c2      	strh	r2, [r0, #14]
 8005132:	6183      	str	r3, [r0, #24]
 8005134:	4619      	mov	r1, r3
 8005136:	2208      	movs	r2, #8
 8005138:	305c      	adds	r0, #92	; 0x5c
 800513a:	f000 f8f4 	bl	8005326 <memset>
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x38>)
 8005140:	6263      	str	r3, [r4, #36]	; 0x24
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <std+0x3c>)
 8005144:	62a3      	str	r3, [r4, #40]	; 0x28
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <std+0x40>)
 8005148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <std+0x44>)
 800514c:	6224      	str	r4, [r4, #32]
 800514e:	6323      	str	r3, [r4, #48]	; 0x30
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	080052a1 	.word	0x080052a1
 8005158:	080052c3 	.word	0x080052c3
 800515c:	080052fb 	.word	0x080052fb
 8005160:	0800531f 	.word	0x0800531f

08005164 <stdio_exit_handler>:
 8005164:	4a02      	ldr	r2, [pc, #8]	; (8005170 <stdio_exit_handler+0xc>)
 8005166:	4903      	ldr	r1, [pc, #12]	; (8005174 <stdio_exit_handler+0x10>)
 8005168:	4803      	ldr	r0, [pc, #12]	; (8005178 <stdio_exit_handler+0x14>)
 800516a:	f000 b869 	b.w	8005240 <_fwalk_sglue>
 800516e:	bf00      	nop
 8005170:	20000018 	.word	0x20000018
 8005174:	08005cc1 	.word	0x08005cc1
 8005178:	20000024 	.word	0x20000024

0800517c <cleanup_stdio>:
 800517c:	6841      	ldr	r1, [r0, #4]
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <cleanup_stdio+0x34>)
 8005180:	4299      	cmp	r1, r3
 8005182:	b510      	push	{r4, lr}
 8005184:	4604      	mov	r4, r0
 8005186:	d001      	beq.n	800518c <cleanup_stdio+0x10>
 8005188:	f000 fd9a 	bl	8005cc0 <_fflush_r>
 800518c:	68a1      	ldr	r1, [r4, #8]
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <cleanup_stdio+0x38>)
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <cleanup_stdio+0x1e>
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fd93 	bl	8005cc0 <_fflush_r>
 800519a:	68e1      	ldr	r1, [r4, #12]
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <cleanup_stdio+0x3c>)
 800519e:	4299      	cmp	r1, r3
 80051a0:	d004      	beq.n	80051ac <cleanup_stdio+0x30>
 80051a2:	4620      	mov	r0, r4
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a8:	f000 bd8a 	b.w	8005cc0 <_fflush_r>
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	200001dc 	.word	0x200001dc
 80051b4:	20000244 	.word	0x20000244
 80051b8:	200002ac 	.word	0x200002ac

080051bc <global_stdio_init.part.0>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <global_stdio_init.part.0+0x30>)
 80051c0:	4c0b      	ldr	r4, [pc, #44]	; (80051f0 <global_stdio_init.part.0+0x34>)
 80051c2:	4a0c      	ldr	r2, [pc, #48]	; (80051f4 <global_stdio_init.part.0+0x38>)
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	4620      	mov	r0, r4
 80051c8:	2200      	movs	r2, #0
 80051ca:	2104      	movs	r1, #4
 80051cc:	f7ff ffa6 	bl	800511c <std>
 80051d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051d4:	2201      	movs	r2, #1
 80051d6:	2109      	movs	r1, #9
 80051d8:	f7ff ffa0 	bl	800511c <std>
 80051dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051e0:	2202      	movs	r2, #2
 80051e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e6:	2112      	movs	r1, #18
 80051e8:	f7ff bf98 	b.w	800511c <std>
 80051ec:	20000314 	.word	0x20000314
 80051f0:	200001dc 	.word	0x200001dc
 80051f4:	08005165 	.word	0x08005165

080051f8 <__sfp_lock_acquire>:
 80051f8:	4801      	ldr	r0, [pc, #4]	; (8005200 <__sfp_lock_acquire+0x8>)
 80051fa:	f000 b90d 	b.w	8005418 <__retarget_lock_acquire_recursive>
 80051fe:	bf00      	nop
 8005200:	2000031d 	.word	0x2000031d

08005204 <__sfp_lock_release>:
 8005204:	4801      	ldr	r0, [pc, #4]	; (800520c <__sfp_lock_release+0x8>)
 8005206:	f000 b908 	b.w	800541a <__retarget_lock_release_recursive>
 800520a:	bf00      	nop
 800520c:	2000031d 	.word	0x2000031d

08005210 <__sinit>:
 8005210:	b510      	push	{r4, lr}
 8005212:	4604      	mov	r4, r0
 8005214:	f7ff fff0 	bl	80051f8 <__sfp_lock_acquire>
 8005218:	6a23      	ldr	r3, [r4, #32]
 800521a:	b11b      	cbz	r3, 8005224 <__sinit+0x14>
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005220:	f7ff bff0 	b.w	8005204 <__sfp_lock_release>
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <__sinit+0x28>)
 8005226:	6223      	str	r3, [r4, #32]
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <__sinit+0x2c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f5      	bne.n	800521c <__sinit+0xc>
 8005230:	f7ff ffc4 	bl	80051bc <global_stdio_init.part.0>
 8005234:	e7f2      	b.n	800521c <__sinit+0xc>
 8005236:	bf00      	nop
 8005238:	0800517d 	.word	0x0800517d
 800523c:	20000314 	.word	0x20000314

08005240 <_fwalk_sglue>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	4607      	mov	r7, r0
 8005246:	4688      	mov	r8, r1
 8005248:	4614      	mov	r4, r2
 800524a:	2600      	movs	r6, #0
 800524c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005250:	f1b9 0901 	subs.w	r9, r9, #1
 8005254:	d505      	bpl.n	8005262 <_fwalk_sglue+0x22>
 8005256:	6824      	ldr	r4, [r4, #0]
 8005258:	2c00      	cmp	r4, #0
 800525a:	d1f7      	bne.n	800524c <_fwalk_sglue+0xc>
 800525c:	4630      	mov	r0, r6
 800525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005262:	89ab      	ldrh	r3, [r5, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d907      	bls.n	8005278 <_fwalk_sglue+0x38>
 8005268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800526c:	3301      	adds	r3, #1
 800526e:	d003      	beq.n	8005278 <_fwalk_sglue+0x38>
 8005270:	4629      	mov	r1, r5
 8005272:	4638      	mov	r0, r7
 8005274:	47c0      	blx	r8
 8005276:	4306      	orrs	r6, r0
 8005278:	3568      	adds	r5, #104	; 0x68
 800527a:	e7e9      	b.n	8005250 <_fwalk_sglue+0x10>

0800527c <iprintf>:
 800527c:	b40f      	push	{r0, r1, r2, r3}
 800527e:	b507      	push	{r0, r1, r2, lr}
 8005280:	4906      	ldr	r1, [pc, #24]	; (800529c <iprintf+0x20>)
 8005282:	ab04      	add	r3, sp, #16
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	f853 2b04 	ldr.w	r2, [r3], #4
 800528a:	6881      	ldr	r1, [r0, #8]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	f000 f9e7 	bl	8005660 <_vfiprintf_r>
 8005292:	b003      	add	sp, #12
 8005294:	f85d eb04 	ldr.w	lr, [sp], #4
 8005298:	b004      	add	sp, #16
 800529a:	4770      	bx	lr
 800529c:	20000070 	.word	0x20000070

080052a0 <__sread>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	f000 f868 	bl	800537c <_read_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	bfab      	itete	ge
 80052b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052b2:	89a3      	ldrhlt	r3, [r4, #12]
 80052b4:	181b      	addge	r3, r3, r0
 80052b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ba:	bfac      	ite	ge
 80052bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80052be:	81a3      	strhlt	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__swrite>:
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	461f      	mov	r7, r3
 80052c8:	898b      	ldrh	r3, [r1, #12]
 80052ca:	05db      	lsls	r3, r3, #23
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	4616      	mov	r6, r2
 80052d2:	d505      	bpl.n	80052e0 <__swrite+0x1e>
 80052d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d8:	2302      	movs	r3, #2
 80052da:	2200      	movs	r2, #0
 80052dc:	f000 f83c 	bl	8005358 <_lseek_r>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	4632      	mov	r2, r6
 80052ee:	463b      	mov	r3, r7
 80052f0:	4628      	mov	r0, r5
 80052f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	f000 b853 	b.w	80053a0 <_write_r>

080052fa <__sseek>:
 80052fa:	b510      	push	{r4, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005302:	f000 f829 	bl	8005358 <_lseek_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	bf15      	itete	ne
 800530c:	6560      	strne	r0, [r4, #84]	; 0x54
 800530e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005316:	81a3      	strheq	r3, [r4, #12]
 8005318:	bf18      	it	ne
 800531a:	81a3      	strhne	r3, [r4, #12]
 800531c:	bd10      	pop	{r4, pc}

0800531e <__sclose>:
 800531e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005322:	f000 b809 	b.w	8005338 <_close_r>

08005326 <memset>:
 8005326:	4402      	add	r2, r0
 8005328:	4603      	mov	r3, r0
 800532a:	4293      	cmp	r3, r2
 800532c:	d100      	bne.n	8005330 <memset+0xa>
 800532e:	4770      	bx	lr
 8005330:	f803 1b01 	strb.w	r1, [r3], #1
 8005334:	e7f9      	b.n	800532a <memset+0x4>
	...

08005338 <_close_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d06      	ldr	r5, [pc, #24]	; (8005354 <_close_r+0x1c>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fb fdc5 	bl	8000ed2 <_close>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_close_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_close_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20000318 	.word	0x20000318

08005358 <_lseek_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d07      	ldr	r5, [pc, #28]	; (8005378 <_lseek_r+0x20>)
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
 8005360:	4611      	mov	r1, r2
 8005362:	2200      	movs	r2, #0
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f7fb fdda 	bl	8000f20 <_lseek>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_lseek_r+0x1e>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_lseek_r+0x1e>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000318 	.word	0x20000318

0800537c <_read_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	; (800539c <_read_r+0x20>)
 8005380:	4604      	mov	r4, r0
 8005382:	4608      	mov	r0, r1
 8005384:	4611      	mov	r1, r2
 8005386:	2200      	movs	r2, #0
 8005388:	602a      	str	r2, [r5, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f7fb fd84 	bl	8000e98 <_read>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_read_r+0x1e>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_read_r+0x1e>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000318 	.word	0x20000318

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fad8 	bl	8000964 <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000318 	.word	0x20000318

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000070 	.word	0x20000070

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	; (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	; (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	; (8005414 <__libc_init_array+0x44>)
 80053e4:	f000 fdf8 	bl	8005fd8 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	080060c0 	.word	0x080060c0
 800540c:	080060c0 	.word	0x080060c0
 8005410:	080060c0 	.word	0x080060c0
 8005414:	080060c4 	.word	0x080060c4

08005418 <__retarget_lock_acquire_recursive>:
 8005418:	4770      	bx	lr

0800541a <__retarget_lock_release_recursive>:
 800541a:	4770      	bx	lr

0800541c <_free_r>:
 800541c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541e:	2900      	cmp	r1, #0
 8005420:	d044      	beq.n	80054ac <_free_r+0x90>
 8005422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005426:	9001      	str	r0, [sp, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f1a1 0404 	sub.w	r4, r1, #4
 800542e:	bfb8      	it	lt
 8005430:	18e4      	addlt	r4, r4, r3
 8005432:	f000 f8df 	bl	80055f4 <__malloc_lock>
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <_free_r+0x94>)
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	b933      	cbnz	r3, 800544c <_free_r+0x30>
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	6014      	str	r4, [r2, #0]
 8005442:	b003      	add	sp, #12
 8005444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005448:	f000 b8da 	b.w	8005600 <__malloc_unlock>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d908      	bls.n	8005462 <_free_r+0x46>
 8005450:	6825      	ldr	r5, [r4, #0]
 8005452:	1961      	adds	r1, r4, r5
 8005454:	428b      	cmp	r3, r1
 8005456:	bf01      	itttt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	1949      	addeq	r1, r1, r5
 800545e:	6021      	streq	r1, [r4, #0]
 8005460:	e7ed      	b.n	800543e <_free_r+0x22>
 8005462:	461a      	mov	r2, r3
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b10b      	cbz	r3, 800546c <_free_r+0x50>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d9fa      	bls.n	8005462 <_free_r+0x46>
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	1855      	adds	r5, r2, r1
 8005470:	42a5      	cmp	r5, r4
 8005472:	d10b      	bne.n	800548c <_free_r+0x70>
 8005474:	6824      	ldr	r4, [r4, #0]
 8005476:	4421      	add	r1, r4
 8005478:	1854      	adds	r4, r2, r1
 800547a:	42a3      	cmp	r3, r4
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	d1e0      	bne.n	8005442 <_free_r+0x26>
 8005480:	681c      	ldr	r4, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	6053      	str	r3, [r2, #4]
 8005486:	440c      	add	r4, r1
 8005488:	6014      	str	r4, [r2, #0]
 800548a:	e7da      	b.n	8005442 <_free_r+0x26>
 800548c:	d902      	bls.n	8005494 <_free_r+0x78>
 800548e:	230c      	movs	r3, #12
 8005490:	6003      	str	r3, [r0, #0]
 8005492:	e7d6      	b.n	8005442 <_free_r+0x26>
 8005494:	6825      	ldr	r5, [r4, #0]
 8005496:	1961      	adds	r1, r4, r5
 8005498:	428b      	cmp	r3, r1
 800549a:	bf04      	itt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	bf04      	itt	eq
 80054a4:	1949      	addeq	r1, r1, r5
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	6054      	str	r4, [r2, #4]
 80054aa:	e7ca      	b.n	8005442 <_free_r+0x26>
 80054ac:	b003      	add	sp, #12
 80054ae:	bd30      	pop	{r4, r5, pc}
 80054b0:	20000320 	.word	0x20000320

080054b4 <sbrk_aligned>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4e0e      	ldr	r6, [pc, #56]	; (80054f0 <sbrk_aligned+0x3c>)
 80054b8:	460c      	mov	r4, r1
 80054ba:	6831      	ldr	r1, [r6, #0]
 80054bc:	4605      	mov	r5, r0
 80054be:	b911      	cbnz	r1, 80054c6 <sbrk_aligned+0x12>
 80054c0:	f000 fcbc 	bl	8005e3c <_sbrk_r>
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fcb7 	bl	8005e3c <_sbrk_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d00a      	beq.n	80054e8 <sbrk_aligned+0x34>
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d007      	beq.n	80054ec <sbrk_aligned+0x38>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fcac 	bl	8005e3c <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d101      	bne.n	80054ec <sbrk_aligned+0x38>
 80054e8:	f04f 34ff 	mov.w	r4, #4294967295
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	20000324 	.word	0x20000324

080054f4 <_malloc_r>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	1ccd      	adds	r5, r1, #3
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	2d00      	cmp	r5, #0
 8005508:	4607      	mov	r7, r0
 800550a:	db01      	blt.n	8005510 <_malloc_r+0x1c>
 800550c:	42a9      	cmp	r1, r5
 800550e:	d905      	bls.n	800551c <_malloc_r+0x28>
 8005510:	230c      	movs	r3, #12
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	2600      	movs	r6, #0
 8005516:	4630      	mov	r0, r6
 8005518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055f0 <_malloc_r+0xfc>
 8005520:	f000 f868 	bl	80055f4 <__malloc_lock>
 8005524:	f8d8 3000 	ldr.w	r3, [r8]
 8005528:	461c      	mov	r4, r3
 800552a:	bb5c      	cbnz	r4, 8005584 <_malloc_r+0x90>
 800552c:	4629      	mov	r1, r5
 800552e:	4638      	mov	r0, r7
 8005530:	f7ff ffc0 	bl	80054b4 <sbrk_aligned>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	4604      	mov	r4, r0
 8005538:	d155      	bne.n	80055e6 <_malloc_r+0xf2>
 800553a:	f8d8 4000 	ldr.w	r4, [r8]
 800553e:	4626      	mov	r6, r4
 8005540:	2e00      	cmp	r6, #0
 8005542:	d145      	bne.n	80055d0 <_malloc_r+0xdc>
 8005544:	2c00      	cmp	r4, #0
 8005546:	d048      	beq.n	80055da <_malloc_r+0xe6>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	4631      	mov	r1, r6
 800554c:	4638      	mov	r0, r7
 800554e:	eb04 0903 	add.w	r9, r4, r3
 8005552:	f000 fc73 	bl	8005e3c <_sbrk_r>
 8005556:	4581      	cmp	r9, r0
 8005558:	d13f      	bne.n	80055da <_malloc_r+0xe6>
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	1a6d      	subs	r5, r5, r1
 800555e:	4629      	mov	r1, r5
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff ffa7 	bl	80054b4 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d037      	beq.n	80055da <_malloc_r+0xe6>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	f8d8 3000 	ldr.w	r3, [r8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d038      	beq.n	80055ea <_malloc_r+0xf6>
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	42a2      	cmp	r2, r4
 800557c:	d12b      	bne.n	80055d6 <_malloc_r+0xe2>
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e00f      	b.n	80055a4 <_malloc_r+0xb0>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	1b52      	subs	r2, r2, r5
 8005588:	d41f      	bmi.n	80055ca <_malloc_r+0xd6>
 800558a:	2a0b      	cmp	r2, #11
 800558c:	d917      	bls.n	80055be <_malloc_r+0xca>
 800558e:	1961      	adds	r1, r4, r5
 8005590:	42a3      	cmp	r3, r4
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	6059      	strne	r1, [r3, #4]
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	bf08      	it	eq
 800559c:	f8c8 1000 	streq.w	r1, [r8]
 80055a0:	5162      	str	r2, [r4, r5]
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	4638      	mov	r0, r7
 80055a6:	f104 060b 	add.w	r6, r4, #11
 80055aa:	f000 f829 	bl	8005600 <__malloc_unlock>
 80055ae:	f026 0607 	bic.w	r6, r6, #7
 80055b2:	1d23      	adds	r3, r4, #4
 80055b4:	1af2      	subs	r2, r6, r3
 80055b6:	d0ae      	beq.n	8005516 <_malloc_r+0x22>
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	50a3      	str	r3, [r4, r2]
 80055bc:	e7ab      	b.n	8005516 <_malloc_r+0x22>
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	d1dd      	bne.n	8005580 <_malloc_r+0x8c>
 80055c4:	f8c8 2000 	str.w	r2, [r8]
 80055c8:	e7ec      	b.n	80055a4 <_malloc_r+0xb0>
 80055ca:	4623      	mov	r3, r4
 80055cc:	6864      	ldr	r4, [r4, #4]
 80055ce:	e7ac      	b.n	800552a <_malloc_r+0x36>
 80055d0:	4634      	mov	r4, r6
 80055d2:	6876      	ldr	r6, [r6, #4]
 80055d4:	e7b4      	b.n	8005540 <_malloc_r+0x4c>
 80055d6:	4613      	mov	r3, r2
 80055d8:	e7cc      	b.n	8005574 <_malloc_r+0x80>
 80055da:	230c      	movs	r3, #12
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4638      	mov	r0, r7
 80055e0:	f000 f80e 	bl	8005600 <__malloc_unlock>
 80055e4:	e797      	b.n	8005516 <_malloc_r+0x22>
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	e7dc      	b.n	80055a4 <_malloc_r+0xb0>
 80055ea:	605b      	str	r3, [r3, #4]
 80055ec:	deff      	udf	#255	; 0xff
 80055ee:	bf00      	nop
 80055f0:	20000320 	.word	0x20000320

080055f4 <__malloc_lock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_lock+0x8>)
 80055f6:	f7ff bf0f 	b.w	8005418 <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	2000031c 	.word	0x2000031c

08005600 <__malloc_unlock>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__malloc_unlock+0x8>)
 8005602:	f7ff bf0a 	b.w	800541a <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	2000031c 	.word	0x2000031c

0800560c <__sfputc_r>:
 800560c:	6893      	ldr	r3, [r2, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	b410      	push	{r4}
 8005614:	6093      	str	r3, [r2, #8]
 8005616:	da08      	bge.n	800562a <__sfputc_r+0x1e>
 8005618:	6994      	ldr	r4, [r2, #24]
 800561a:	42a3      	cmp	r3, r4
 800561c:	db01      	blt.n	8005622 <__sfputc_r+0x16>
 800561e:	290a      	cmp	r1, #10
 8005620:	d103      	bne.n	800562a <__sfputc_r+0x1e>
 8005622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005626:	f000 bb73 	b.w	8005d10 <__swbuf_r>
 800562a:	6813      	ldr	r3, [r2, #0]
 800562c:	1c58      	adds	r0, r3, #1
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	7019      	strb	r1, [r3, #0]
 8005632:	4608      	mov	r0, r1
 8005634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005638:	4770      	bx	lr

0800563a <__sfputs_r>:
 800563a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	4614      	mov	r4, r2
 8005642:	18d5      	adds	r5, r2, r3
 8005644:	42ac      	cmp	r4, r5
 8005646:	d101      	bne.n	800564c <__sfputs_r+0x12>
 8005648:	2000      	movs	r0, #0
 800564a:	e007      	b.n	800565c <__sfputs_r+0x22>
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	463a      	mov	r2, r7
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffda 	bl	800560c <__sfputc_r>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d1f3      	bne.n	8005644 <__sfputs_r+0xa>
 800565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005660 <_vfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	b09d      	sub	sp, #116	; 0x74
 8005668:	4614      	mov	r4, r2
 800566a:	4698      	mov	r8, r3
 800566c:	4606      	mov	r6, r0
 800566e:	b118      	cbz	r0, 8005678 <_vfiprintf_r+0x18>
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b90b      	cbnz	r3, 8005678 <_vfiprintf_r+0x18>
 8005674:	f7ff fdcc 	bl	8005210 <__sinit>
 8005678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d405      	bmi.n	800568a <_vfiprintf_r+0x2a>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d402      	bmi.n	800568a <_vfiprintf_r+0x2a>
 8005684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005686:	f7ff fec7 	bl	8005418 <__retarget_lock_acquire_recursive>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	071b      	lsls	r3, r3, #28
 800568e:	d501      	bpl.n	8005694 <_vfiprintf_r+0x34>
 8005690:	692b      	ldr	r3, [r5, #16]
 8005692:	b99b      	cbnz	r3, 80056bc <_vfiprintf_r+0x5c>
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f000 fb78 	bl	8005d8c <__swsetup_r>
 800569c:	b170      	cbz	r0, 80056bc <_vfiprintf_r+0x5c>
 800569e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056a0:	07dc      	lsls	r4, r3, #31
 80056a2:	d504      	bpl.n	80056ae <_vfiprintf_r+0x4e>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	b01d      	add	sp, #116	; 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	0598      	lsls	r0, r3, #22
 80056b2:	d4f7      	bmi.n	80056a4 <_vfiprintf_r+0x44>
 80056b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056b6:	f7ff feb0 	bl	800541a <__retarget_lock_release_recursive>
 80056ba:	e7f3      	b.n	80056a4 <_vfiprintf_r+0x44>
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	; 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ca:	2330      	movs	r3, #48	; 0x30
 80056cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005880 <_vfiprintf_r+0x220>
 80056d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d4:	f04f 0901 	mov.w	r9, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	469a      	mov	sl, r3
 80056dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e0:	b10a      	cbz	r2, 80056e6 <_vfiprintf_r+0x86>
 80056e2:	2a25      	cmp	r2, #37	; 0x25
 80056e4:	d1f9      	bne.n	80056da <_vfiprintf_r+0x7a>
 80056e6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ea:	d00b      	beq.n	8005704 <_vfiprintf_r+0xa4>
 80056ec:	465b      	mov	r3, fp
 80056ee:	4622      	mov	r2, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa1 	bl	800563a <__sfputs_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	f000 80a9 	beq.w	8005850 <_vfiprintf_r+0x1f0>
 80056fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005700:	445a      	add	r2, fp
 8005702:	9209      	str	r2, [sp, #36]	; 0x24
 8005704:	f89a 3000 	ldrb.w	r3, [sl]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a1 	beq.w	8005850 <_vfiprintf_r+0x1f0>
 800570e:	2300      	movs	r3, #0
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005718:	f10a 0a01 	add.w	sl, sl, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	9307      	str	r3, [sp, #28]
 8005720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005724:	931a      	str	r3, [sp, #104]	; 0x68
 8005726:	4654      	mov	r4, sl
 8005728:	2205      	movs	r2, #5
 800572a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572e:	4854      	ldr	r0, [pc, #336]	; (8005880 <_vfiprintf_r+0x220>)
 8005730:	f7fa fd66 	bl	8000200 <memchr>
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	b9d8      	cbnz	r0, 8005770 <_vfiprintf_r+0x110>
 8005738:	06d1      	lsls	r1, r2, #27
 800573a:	bf44      	itt	mi
 800573c:	2320      	movmi	r3, #32
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005742:	0713      	lsls	r3, r2, #28
 8005744:	bf44      	itt	mi
 8005746:	232b      	movmi	r3, #43	; 0x2b
 8005748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574c:	f89a 3000 	ldrb.w	r3, [sl]
 8005750:	2b2a      	cmp	r3, #42	; 0x2a
 8005752:	d015      	beq.n	8005780 <_vfiprintf_r+0x120>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4654      	mov	r4, sl
 8005758:	2000      	movs	r0, #0
 800575a:	f04f 0c0a 	mov.w	ip, #10
 800575e:	4621      	mov	r1, r4
 8005760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005764:	3b30      	subs	r3, #48	; 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d94d      	bls.n	8005806 <_vfiprintf_r+0x1a6>
 800576a:	b1b0      	cbz	r0, 800579a <_vfiprintf_r+0x13a>
 800576c:	9207      	str	r2, [sp, #28]
 800576e:	e014      	b.n	800579a <_vfiprintf_r+0x13a>
 8005770:	eba0 0308 	sub.w	r3, r0, r8
 8005774:	fa09 f303 	lsl.w	r3, r9, r3
 8005778:	4313      	orrs	r3, r2
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	46a2      	mov	sl, r4
 800577e:	e7d2      	b.n	8005726 <_vfiprintf_r+0xc6>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	1d19      	adds	r1, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	9103      	str	r1, [sp, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbb      	ittet	lt
 800578c:	425b      	neglt	r3, r3
 800578e:	f042 0202 	orrlt.w	r2, r2, #2
 8005792:	9307      	strge	r3, [sp, #28]
 8005794:	9307      	strlt	r3, [sp, #28]
 8005796:	bfb8      	it	lt
 8005798:	9204      	strlt	r2, [sp, #16]
 800579a:	7823      	ldrb	r3, [r4, #0]
 800579c:	2b2e      	cmp	r3, #46	; 0x2e
 800579e:	d10c      	bne.n	80057ba <_vfiprintf_r+0x15a>
 80057a0:	7863      	ldrb	r3, [r4, #1]
 80057a2:	2b2a      	cmp	r3, #42	; 0x2a
 80057a4:	d134      	bne.n	8005810 <_vfiprintf_r+0x1b0>
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	1d1a      	adds	r2, r3, #4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	9203      	str	r2, [sp, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfb8      	it	lt
 80057b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057b6:	3402      	adds	r4, #2
 80057b8:	9305      	str	r3, [sp, #20]
 80057ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005890 <_vfiprintf_r+0x230>
 80057be:	7821      	ldrb	r1, [r4, #0]
 80057c0:	2203      	movs	r2, #3
 80057c2:	4650      	mov	r0, sl
 80057c4:	f7fa fd1c 	bl	8000200 <memchr>
 80057c8:	b138      	cbz	r0, 80057da <_vfiprintf_r+0x17a>
 80057ca:	9b04      	ldr	r3, [sp, #16]
 80057cc:	eba0 000a 	sub.w	r0, r0, sl
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	4082      	lsls	r2, r0
 80057d4:	4313      	orrs	r3, r2
 80057d6:	3401      	adds	r4, #1
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057de:	4829      	ldr	r0, [pc, #164]	; (8005884 <_vfiprintf_r+0x224>)
 80057e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057e4:	2206      	movs	r2, #6
 80057e6:	f7fa fd0b 	bl	8000200 <memchr>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d03f      	beq.n	800586e <_vfiprintf_r+0x20e>
 80057ee:	4b26      	ldr	r3, [pc, #152]	; (8005888 <_vfiprintf_r+0x228>)
 80057f0:	bb1b      	cbnz	r3, 800583a <_vfiprintf_r+0x1da>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	3307      	adds	r3, #7
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	3308      	adds	r3, #8
 80057fc:	9303      	str	r3, [sp, #12]
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	443b      	add	r3, r7
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
 8005804:	e768      	b.n	80056d8 <_vfiprintf_r+0x78>
 8005806:	fb0c 3202 	mla	r2, ip, r2, r3
 800580a:	460c      	mov	r4, r1
 800580c:	2001      	movs	r0, #1
 800580e:	e7a6      	b.n	800575e <_vfiprintf_r+0xfe>
 8005810:	2300      	movs	r3, #0
 8005812:	3401      	adds	r4, #1
 8005814:	9305      	str	r3, [sp, #20]
 8005816:	4619      	mov	r1, r3
 8005818:	f04f 0c0a 	mov.w	ip, #10
 800581c:	4620      	mov	r0, r4
 800581e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005822:	3a30      	subs	r2, #48	; 0x30
 8005824:	2a09      	cmp	r2, #9
 8005826:	d903      	bls.n	8005830 <_vfiprintf_r+0x1d0>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0c6      	beq.n	80057ba <_vfiprintf_r+0x15a>
 800582c:	9105      	str	r1, [sp, #20]
 800582e:	e7c4      	b.n	80057ba <_vfiprintf_r+0x15a>
 8005830:	fb0c 2101 	mla	r1, ip, r1, r2
 8005834:	4604      	mov	r4, r0
 8005836:	2301      	movs	r3, #1
 8005838:	e7f0      	b.n	800581c <_vfiprintf_r+0x1bc>
 800583a:	ab03      	add	r3, sp, #12
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	462a      	mov	r2, r5
 8005840:	4b12      	ldr	r3, [pc, #72]	; (800588c <_vfiprintf_r+0x22c>)
 8005842:	a904      	add	r1, sp, #16
 8005844:	4630      	mov	r0, r6
 8005846:	f3af 8000 	nop.w
 800584a:	4607      	mov	r7, r0
 800584c:	1c78      	adds	r0, r7, #1
 800584e:	d1d6      	bne.n	80057fe <_vfiprintf_r+0x19e>
 8005850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005852:	07d9      	lsls	r1, r3, #31
 8005854:	d405      	bmi.n	8005862 <_vfiprintf_r+0x202>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	059a      	lsls	r2, r3, #22
 800585a:	d402      	bmi.n	8005862 <_vfiprintf_r+0x202>
 800585c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800585e:	f7ff fddc 	bl	800541a <__retarget_lock_release_recursive>
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	065b      	lsls	r3, r3, #25
 8005866:	f53f af1d 	bmi.w	80056a4 <_vfiprintf_r+0x44>
 800586a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800586c:	e71c      	b.n	80056a8 <_vfiprintf_r+0x48>
 800586e:	ab03      	add	r3, sp, #12
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	462a      	mov	r2, r5
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <_vfiprintf_r+0x22c>)
 8005876:	a904      	add	r1, sp, #16
 8005878:	4630      	mov	r0, r6
 800587a:	f000 f879 	bl	8005970 <_printf_i>
 800587e:	e7e4      	b.n	800584a <_vfiprintf_r+0x1ea>
 8005880:	08006084 	.word	0x08006084
 8005884:	0800608e 	.word	0x0800608e
 8005888:	00000000 	.word	0x00000000
 800588c:	0800563b 	.word	0x0800563b
 8005890:	0800608a 	.word	0x0800608a

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4699      	mov	r9, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfb8      	it	lt
 80058a8:	4613      	movlt	r3, r2
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058b0:	4607      	mov	r7, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc26      	bgt.n	800592a <_printf_common+0x96>
 80058dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058e0:	1e13      	subs	r3, r2, #0
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d42b      	bmi.n	8005944 <_printf_common+0xb0>
 80058ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058f0:	4649      	mov	r1, r9
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c0      	blx	r8
 80058f6:	3001      	adds	r0, #1
 80058f8:	d01e      	beq.n	8005938 <_printf_common+0xa4>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6922      	ldr	r2, [r4, #16]
 80058fe:	f003 0306 	and.w	r3, r3, #6
 8005902:	2b04      	cmp	r3, #4
 8005904:	bf02      	ittt	eq
 8005906:	68e5      	ldreq	r5, [r4, #12]
 8005908:	6833      	ldreq	r3, [r6, #0]
 800590a:	1aed      	subeq	r5, r5, r3
 800590c:	68a3      	ldr	r3, [r4, #8]
 800590e:	bf0c      	ite	eq
 8005910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005914:	2500      	movne	r5, #0
 8005916:	4293      	cmp	r3, r2
 8005918:	bfc4      	itt	gt
 800591a:	1a9b      	subgt	r3, r3, r2
 800591c:	18ed      	addgt	r5, r5, r3
 800591e:	2600      	movs	r6, #0
 8005920:	341a      	adds	r4, #26
 8005922:	42b5      	cmp	r5, r6
 8005924:	d11a      	bne.n	800595c <_printf_common+0xc8>
 8005926:	2000      	movs	r0, #0
 8005928:	e008      	b.n	800593c <_printf_common+0xa8>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4649      	mov	r1, r9
 8005930:	4638      	mov	r0, r7
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d103      	bne.n	8005940 <_printf_common+0xac>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	3501      	adds	r5, #1
 8005942:	e7c6      	b.n	80058d2 <_printf_common+0x3e>
 8005944:	18e1      	adds	r1, r4, r3
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	2030      	movs	r0, #48	; 0x30
 800594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594e:	4422      	add	r2, r4
 8005950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005958:	3302      	adds	r3, #2
 800595a:	e7c7      	b.n	80058ec <_printf_common+0x58>
 800595c:	2301      	movs	r3, #1
 800595e:	4622      	mov	r2, r4
 8005960:	4649      	mov	r1, r9
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa4>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d9      	b.n	8005922 <_printf_common+0x8e>
	...

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	7e0f      	ldrb	r7, [r1, #24]
 8005976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005978:	2f78      	cmp	r7, #120	; 0x78
 800597a:	4691      	mov	r9, r2
 800597c:	4680      	mov	r8, r0
 800597e:	460c      	mov	r4, r1
 8005980:	469a      	mov	sl, r3
 8005982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	; 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d4 	beq.w	8005b3a <_printf_i+0x1ca>
 8005992:	2f58      	cmp	r7, #88	; 0x58
 8005994:	f000 80c0 	beq.w	8005b18 <_printf_i+0x1a8>
 8005998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a101      	add	r1, pc, #4	; (adr r1, 80059b0 <_printf_i+0x40>)
 80059ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b21 	.word	0x08005b21
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	08005adb 	.word	0x08005adb
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b43 	.word	0x08005b43
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a49 	.word	0x08005a49
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005ae3 	.word	0x08005ae3
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e09f      	b.n	8005b5c <_printf_i+0x1ec>
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	0607      	lsls	r7, r0, #24
 8005a22:	f103 0104 	add.w	r1, r3, #4
 8005a26:	6029      	str	r1, [r5, #0]
 8005a28:	d501      	bpl.n	8005a2e <_printf_i+0xbe>
 8005a2a:	681e      	ldr	r6, [r3, #0]
 8005a2c:	e003      	b.n	8005a36 <_printf_i+0xc6>
 8005a2e:	0646      	lsls	r6, r0, #25
 8005a30:	d5fb      	bpl.n	8005a2a <_printf_i+0xba>
 8005a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a36:	2e00      	cmp	r6, #0
 8005a38:	da03      	bge.n	8005a42 <_printf_i+0xd2>
 8005a3a:	232d      	movs	r3, #45	; 0x2d
 8005a3c:	4276      	negs	r6, r6
 8005a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a42:	485a      	ldr	r0, [pc, #360]	; (8005bac <_printf_i+0x23c>)
 8005a44:	230a      	movs	r3, #10
 8005a46:	e012      	b.n	8005a6e <_printf_i+0xfe>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	6029      	str	r1, [r5, #0]
 8005a50:	0605      	lsls	r5, r0, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xe8>
 8005a54:	681e      	ldr	r6, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0xee>
 8005a58:	0641      	lsls	r1, r0, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xe4>
 8005a5c:	881e      	ldrh	r6, [r3, #0]
 8005a5e:	4853      	ldr	r0, [pc, #332]	; (8005bac <_printf_i+0x23c>)
 8005a60:	2f6f      	cmp	r7, #111	; 0x6f
 8005a62:	bf0c      	ite	eq
 8005a64:	2308      	moveq	r3, #8
 8005a66:	230a      	movne	r3, #10
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6e:	6865      	ldr	r5, [r4, #4]
 8005a70:	60a5      	str	r5, [r4, #8]
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	bfa2      	ittt	ge
 8005a76:	6821      	ldrge	r1, [r4, #0]
 8005a78:	f021 0104 	bicge.w	r1, r1, #4
 8005a7c:	6021      	strge	r1, [r4, #0]
 8005a7e:	b90e      	cbnz	r6, 8005a84 <_printf_i+0x114>
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	d04b      	beq.n	8005b1c <_printf_i+0x1ac>
 8005a84:	4615      	mov	r5, r2
 8005a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a8e:	5dc7      	ldrb	r7, [r0, r7]
 8005a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a94:	4637      	mov	r7, r6
 8005a96:	42bb      	cmp	r3, r7
 8005a98:	460e      	mov	r6, r1
 8005a9a:	d9f4      	bls.n	8005a86 <_printf_i+0x116>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10b      	bne.n	8005ab8 <_printf_i+0x148>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07de      	lsls	r6, r3, #31
 8005aa4:	d508      	bpl.n	8005ab8 <_printf_i+0x148>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6861      	ldr	r1, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	bfde      	ittt	le
 8005aae:	2330      	movle	r3, #48	; 0x30
 8005ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ab8:	1b52      	subs	r2, r2, r5
 8005aba:	6122      	str	r2, [r4, #16]
 8005abc:	f8cd a000 	str.w	sl, [sp]
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	aa03      	add	r2, sp, #12
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f7ff fee4 	bl	8005894 <_printf_common>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d14a      	bne.n	8005b66 <_printf_i+0x1f6>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	b004      	add	sp, #16
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f043 0320 	orr.w	r3, r3, #32
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	4833      	ldr	r0, [pc, #204]	; (8005bb0 <_printf_i+0x240>)
 8005ae4:	2778      	movs	r7, #120	; 0x78
 8005ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	6829      	ldr	r1, [r5, #0]
 8005aee:	061f      	lsls	r7, r3, #24
 8005af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005af4:	d402      	bmi.n	8005afc <_printf_i+0x18c>
 8005af6:	065f      	lsls	r7, r3, #25
 8005af8:	bf48      	it	mi
 8005afa:	b2b6      	uxthmi	r6, r6
 8005afc:	07df      	lsls	r7, r3, #31
 8005afe:	bf48      	it	mi
 8005b00:	f043 0320 	orrmi.w	r3, r3, #32
 8005b04:	6029      	str	r1, [r5, #0]
 8005b06:	bf48      	it	mi
 8005b08:	6023      	strmi	r3, [r4, #0]
 8005b0a:	b91e      	cbnz	r6, 8005b14 <_printf_i+0x1a4>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	f023 0320 	bic.w	r3, r3, #32
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	2310      	movs	r3, #16
 8005b16:	e7a7      	b.n	8005a68 <_printf_i+0xf8>
 8005b18:	4824      	ldr	r0, [pc, #144]	; (8005bac <_printf_i+0x23c>)
 8005b1a:	e7e4      	b.n	8005ae6 <_printf_i+0x176>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	e7bd      	b.n	8005a9c <_printf_i+0x12c>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	6826      	ldr	r6, [r4, #0]
 8005b24:	6961      	ldr	r1, [r4, #20]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6028      	str	r0, [r5, #0]
 8005b2a:	0635      	lsls	r5, r6, #24
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0x1c4>
 8005b30:	6019      	str	r1, [r3, #0]
 8005b32:	e002      	b.n	8005b3a <_printf_i+0x1ca>
 8005b34:	0670      	lsls	r0, r6, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0x1c0>
 8005b38:	8019      	strh	r1, [r3, #0]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	4615      	mov	r5, r2
 8005b40:	e7bc      	b.n	8005abc <_printf_i+0x14c>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	1d1a      	adds	r2, r3, #4
 8005b46:	602a      	str	r2, [r5, #0]
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f7fa fb56 	bl	8000200 <memchr>
 8005b54:	b108      	cbz	r0, 8005b5a <_printf_i+0x1ea>
 8005b56:	1b40      	subs	r0, r0, r5
 8005b58:	6060      	str	r0, [r4, #4]
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b64:	e7aa      	b.n	8005abc <_printf_i+0x14c>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0ad      	beq.n	8005ad0 <_printf_i+0x160>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	079b      	lsls	r3, r3, #30
 8005b78:	d413      	bmi.n	8005ba2 <_printf_i+0x232>
 8005b7a:	68e0      	ldr	r0, [r4, #12]
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	4298      	cmp	r0, r3
 8005b80:	bfb8      	it	lt
 8005b82:	4618      	movlt	r0, r3
 8005b84:	e7a6      	b.n	8005ad4 <_printf_i+0x164>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	47d0      	blx	sl
 8005b90:	3001      	adds	r0, #1
 8005b92:	d09d      	beq.n	8005ad0 <_printf_i+0x160>
 8005b94:	3501      	adds	r5, #1
 8005b96:	68e3      	ldr	r3, [r4, #12]
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	1a5b      	subs	r3, r3, r1
 8005b9c:	42ab      	cmp	r3, r5
 8005b9e:	dcf2      	bgt.n	8005b86 <_printf_i+0x216>
 8005ba0:	e7eb      	b.n	8005b7a <_printf_i+0x20a>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	f104 0619 	add.w	r6, r4, #25
 8005ba8:	e7f5      	b.n	8005b96 <_printf_i+0x226>
 8005baa:	bf00      	nop
 8005bac:	08006095 	.word	0x08006095
 8005bb0:	080060a6 	.word	0x080060a6

08005bb4 <__sflush_r>:
 8005bb4:	898a      	ldrh	r2, [r1, #12]
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	0710      	lsls	r0, r2, #28
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	d458      	bmi.n	8005c74 <__sflush_r+0xc0>
 8005bc2:	684b      	ldr	r3, [r1, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc05      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dc02      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d0f9      	beq.n	8005bce <__sflush_r+0x1a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be0:	682f      	ldr	r7, [r5, #0]
 8005be2:	6a21      	ldr	r1, [r4, #32]
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	d032      	beq.n	8005c4e <__sflush_r+0x9a>
 8005be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	075a      	lsls	r2, r3, #29
 8005bee:	d505      	bpl.n	8005bfc <__sflush_r+0x48>
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	1ac0      	subs	r0, r0, r3
 8005bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf6:	b10b      	cbz	r3, 8005bfc <__sflush_r+0x48>
 8005bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfa:	1ac0      	subs	r0, r0, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	d106      	bne.n	8005c1c <__sflush_r+0x68>
 8005c0e:	6829      	ldr	r1, [r5, #0]
 8005c10:	291d      	cmp	r1, #29
 8005c12:	d82b      	bhi.n	8005c6c <__sflush_r+0xb8>
 8005c14:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <__sflush_r+0x108>)
 8005c16:	410a      	asrs	r2, r1
 8005c18:	07d6      	lsls	r6, r2, #31
 8005c1a:	d427      	bmi.n	8005c6c <__sflush_r+0xb8>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	6062      	str	r2, [r4, #4]
 8005c20:	04d9      	lsls	r1, r3, #19
 8005c22:	6922      	ldr	r2, [r4, #16]
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	d504      	bpl.n	8005c32 <__sflush_r+0x7e>
 8005c28:	1c42      	adds	r2, r0, #1
 8005c2a:	d101      	bne.n	8005c30 <__sflush_r+0x7c>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b903      	cbnz	r3, 8005c32 <__sflush_r+0x7e>
 8005c30:	6560      	str	r0, [r4, #84]	; 0x54
 8005c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c34:	602f      	str	r7, [r5, #0]
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d0c9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <__sflush_r+0x94>
 8005c42:	4628      	mov	r0, r5
 8005c44:	f7ff fbea 	bl	800541c <_free_r>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4c:	e7c0      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	1c41      	adds	r1, r0, #1
 8005c56:	d1c8      	bne.n	8005bea <__sflush_r+0x36>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c5      	beq.n	8005bea <__sflush_r+0x36>
 8005c5e:	2b1d      	cmp	r3, #29
 8005c60:	d001      	beq.n	8005c66 <__sflush_r+0xb2>
 8005c62:	2b16      	cmp	r3, #22
 8005c64:	d101      	bne.n	8005c6a <__sflush_r+0xb6>
 8005c66:	602f      	str	r7, [r5, #0]
 8005c68:	e7b1      	b.n	8005bce <__sflush_r+0x1a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	e7ad      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c74:	690f      	ldr	r7, [r1, #16]
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d0a9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c7a:	0793      	lsls	r3, r2, #30
 8005c7c:	680e      	ldr	r6, [r1, #0]
 8005c7e:	bf08      	it	eq
 8005c80:	694b      	ldreq	r3, [r1, #20]
 8005c82:	600f      	str	r7, [r1, #0]
 8005c84:	bf18      	it	ne
 8005c86:	2300      	movne	r3, #0
 8005c88:	eba6 0807 	sub.w	r8, r6, r7
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	dd9c      	ble.n	8005bce <__sflush_r+0x1a>
 8005c94:	6a21      	ldr	r1, [r4, #32]
 8005c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c98:	4643      	mov	r3, r8
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dc06      	bgt.n	8005cb2 <__sflush_r+0xfe>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e78e      	b.n	8005bd0 <__sflush_r+0x1c>
 8005cb2:	4407      	add	r7, r0
 8005cb4:	eba8 0800 	sub.w	r8, r8, r0
 8005cb8:	e7e9      	b.n	8005c8e <__sflush_r+0xda>
 8005cba:	bf00      	nop
 8005cbc:	dfbffffe 	.word	0xdfbffffe

08005cc0 <_fflush_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b913      	cbnz	r3, 8005cd0 <_fflush_r+0x10>
 8005cca:	2500      	movs	r5, #0
 8005ccc:	4628      	mov	r0, r5
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	b118      	cbz	r0, 8005cda <_fflush_r+0x1a>
 8005cd2:	6a03      	ldr	r3, [r0, #32]
 8005cd4:	b90b      	cbnz	r3, 8005cda <_fflush_r+0x1a>
 8005cd6:	f7ff fa9b 	bl	8005210 <__sinit>
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f3      	beq.n	8005cca <_fflush_r+0xa>
 8005ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ce4:	07d0      	lsls	r0, r2, #31
 8005ce6:	d404      	bmi.n	8005cf2 <_fflush_r+0x32>
 8005ce8:	0599      	lsls	r1, r3, #22
 8005cea:	d402      	bmi.n	8005cf2 <_fflush_r+0x32>
 8005cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cee:	f7ff fb93 	bl	8005418 <__retarget_lock_acquire_recursive>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	f7ff ff5d 	bl	8005bb4 <__sflush_r>
 8005cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfc:	07da      	lsls	r2, r3, #31
 8005cfe:	4605      	mov	r5, r0
 8005d00:	d4e4      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	059b      	lsls	r3, r3, #22
 8005d06:	d4e1      	bmi.n	8005ccc <_fflush_r+0xc>
 8005d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0a:	f7ff fb86 	bl	800541a <__retarget_lock_release_recursive>
 8005d0e:	e7dd      	b.n	8005ccc <_fflush_r+0xc>

08005d10 <__swbuf_r>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	460e      	mov	r6, r1
 8005d14:	4614      	mov	r4, r2
 8005d16:	4605      	mov	r5, r0
 8005d18:	b118      	cbz	r0, 8005d22 <__swbuf_r+0x12>
 8005d1a:	6a03      	ldr	r3, [r0, #32]
 8005d1c:	b90b      	cbnz	r3, 8005d22 <__swbuf_r+0x12>
 8005d1e:	f7ff fa77 	bl	8005210 <__sinit>
 8005d22:	69a3      	ldr	r3, [r4, #24]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	071a      	lsls	r2, r3, #28
 8005d2a:	d525      	bpl.n	8005d78 <__swbuf_r+0x68>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b31b      	cbz	r3, 8005d78 <__swbuf_r+0x68>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	6922      	ldr	r2, [r4, #16]
 8005d34:	1a98      	subs	r0, r3, r2
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	b2f6      	uxtb	r6, r6
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	4637      	mov	r7, r6
 8005d3e:	dc04      	bgt.n	8005d4a <__swbuf_r+0x3a>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff ffbc 	bl	8005cc0 <_fflush_r>
 8005d48:	b9e0      	cbnz	r0, 8005d84 <__swbuf_r+0x74>
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	60a3      	str	r3, [r4, #8]
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	701e      	strb	r6, [r3, #0]
 8005d58:	6962      	ldr	r2, [r4, #20]
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d004      	beq.n	8005d6a <__swbuf_r+0x5a>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d506      	bpl.n	8005d74 <__swbuf_r+0x64>
 8005d66:	2e0a      	cmp	r6, #10
 8005d68:	d104      	bne.n	8005d74 <__swbuf_r+0x64>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f7ff ffa7 	bl	8005cc0 <_fflush_r>
 8005d72:	b938      	cbnz	r0, 8005d84 <__swbuf_r+0x74>
 8005d74:	4638      	mov	r0, r7
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 f806 	bl	8005d8c <__swsetup_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0d5      	beq.n	8005d30 <__swbuf_r+0x20>
 8005d84:	f04f 37ff 	mov.w	r7, #4294967295
 8005d88:	e7f4      	b.n	8005d74 <__swbuf_r+0x64>
	...

08005d8c <__swsetup_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <__swsetup_r+0xac>)
 8005d90:	4605      	mov	r5, r0
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	460c      	mov	r4, r1
 8005d96:	b118      	cbz	r0, 8005da0 <__swsetup_r+0x14>
 8005d98:	6a03      	ldr	r3, [r0, #32]
 8005d9a:	b90b      	cbnz	r3, 8005da0 <__swsetup_r+0x14>
 8005d9c:	f7ff fa38 	bl	8005210 <__sinit>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005da6:	0718      	lsls	r0, r3, #28
 8005da8:	d422      	bmi.n	8005df0 <__swsetup_r+0x64>
 8005daa:	06d9      	lsls	r1, r3, #27
 8005dac:	d407      	bmi.n	8005dbe <__swsetup_r+0x32>
 8005dae:	2309      	movs	r3, #9
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e034      	b.n	8005e28 <__swsetup_r+0x9c>
 8005dbe:	0758      	lsls	r0, r3, #29
 8005dc0:	d512      	bpl.n	8005de8 <__swsetup_r+0x5c>
 8005dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dc4:	b141      	cbz	r1, 8005dd8 <__swsetup_r+0x4c>
 8005dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dca:	4299      	cmp	r1, r3
 8005dcc:	d002      	beq.n	8005dd4 <__swsetup_r+0x48>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7ff fb24 	bl	800541c <_free_r>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6363      	str	r3, [r4, #52]	; 0x34
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	2300      	movs	r3, #0
 8005de2:	6063      	str	r3, [r4, #4]
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	f043 0308 	orr.w	r3, r3, #8
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	b94b      	cbnz	r3, 8005e08 <__swsetup_r+0x7c>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfe:	d003      	beq.n	8005e08 <__swsetup_r+0x7c>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f850 	bl	8005ea8 <__smakebuf_r>
 8005e08:	89a0      	ldrh	r0, [r4, #12]
 8005e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e0e:	f010 0301 	ands.w	r3, r0, #1
 8005e12:	d00a      	beq.n	8005e2a <__swsetup_r+0x9e>
 8005e14:	2300      	movs	r3, #0
 8005e16:	60a3      	str	r3, [r4, #8]
 8005e18:	6963      	ldr	r3, [r4, #20]
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	61a3      	str	r3, [r4, #24]
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	b943      	cbnz	r3, 8005e34 <__swsetup_r+0xa8>
 8005e22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e26:	d1c4      	bne.n	8005db2 <__swsetup_r+0x26>
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	0781      	lsls	r1, r0, #30
 8005e2c:	bf58      	it	pl
 8005e2e:	6963      	ldrpl	r3, [r4, #20]
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	e7f4      	b.n	8005e1e <__swsetup_r+0x92>
 8005e34:	2000      	movs	r0, #0
 8005e36:	e7f7      	b.n	8005e28 <__swsetup_r+0x9c>
 8005e38:	20000070 	.word	0x20000070

08005e3c <_sbrk_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d06      	ldr	r5, [pc, #24]	; (8005e58 <_sbrk_r+0x1c>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	f7fb f878 	bl	8000f3c <_sbrk>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_sbrk_r+0x1a>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_sbrk_r+0x1a>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	20000318 	.word	0x20000318

08005e5c <__swhatbuf_r>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	b096      	sub	sp, #88	; 0x58
 8005e68:	4615      	mov	r5, r2
 8005e6a:	461e      	mov	r6, r3
 8005e6c:	da0d      	bge.n	8005e8a <__swhatbuf_r+0x2e>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e74:	f04f 0100 	mov.w	r1, #0
 8005e78:	bf0c      	ite	eq
 8005e7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e7e:	2340      	movne	r3, #64	; 0x40
 8005e80:	2000      	movs	r0, #0
 8005e82:	6031      	str	r1, [r6, #0]
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	b016      	add	sp, #88	; 0x58
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	466a      	mov	r2, sp
 8005e8c:	f000 f848 	bl	8005f20 <_fstat_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	dbec      	blt.n	8005e6e <__swhatbuf_r+0x12>
 8005e94:	9901      	ldr	r1, [sp, #4]
 8005e96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e9e:	4259      	negs	r1, r3
 8005ea0:	4159      	adcs	r1, r3
 8005ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ea6:	e7eb      	b.n	8005e80 <__swhatbuf_r+0x24>

08005ea8 <__smakebuf_r>:
 8005ea8:	898b      	ldrh	r3, [r1, #12]
 8005eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005eac:	079d      	lsls	r5, r3, #30
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	d507      	bpl.n	8005ec4 <__smakebuf_r+0x1c>
 8005eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	6163      	str	r3, [r4, #20]
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	ab01      	add	r3, sp, #4
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f7ff ffc8 	bl	8005e5c <__swhatbuf_r>
 8005ecc:	9900      	ldr	r1, [sp, #0]
 8005ece:	4605      	mov	r5, r0
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff fb0f 	bl	80054f4 <_malloc_r>
 8005ed6:	b948      	cbnz	r0, 8005eec <__smakebuf_r+0x44>
 8005ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005edc:	059a      	lsls	r2, r3, #22
 8005ede:	d4ef      	bmi.n	8005ec0 <__smakebuf_r+0x18>
 8005ee0:	f023 0303 	bic.w	r3, r3, #3
 8005ee4:	f043 0302 	orr.w	r3, r3, #2
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	e7e3      	b.n	8005eb4 <__smakebuf_r+0xc>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	6020      	str	r0, [r4, #0]
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	6163      	str	r3, [r4, #20]
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	6120      	str	r0, [r4, #16]
 8005efe:	b15b      	cbz	r3, 8005f18 <__smakebuf_r+0x70>
 8005f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f04:	4630      	mov	r0, r6
 8005f06:	f000 f81d 	bl	8005f44 <_isatty_r>
 8005f0a:	b128      	cbz	r0, 8005f18 <__smakebuf_r+0x70>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	431d      	orrs	r5, r3
 8005f1c:	81a5      	strh	r5, [r4, #12]
 8005f1e:	e7cf      	b.n	8005ec0 <__smakebuf_r+0x18>

08005f20 <_fstat_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d07      	ldr	r5, [pc, #28]	; (8005f40 <_fstat_r+0x20>)
 8005f24:	2300      	movs	r3, #0
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	f7fa ffdc 	bl	8000eea <_fstat>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d102      	bne.n	8005f3c <_fstat_r+0x1c>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	b103      	cbz	r3, 8005f3c <_fstat_r+0x1c>
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	bd38      	pop	{r3, r4, r5, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000318 	.word	0x20000318

08005f44 <_isatty_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	; (8005f60 <_isatty_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fa ffdb 	bl	8000f0a <_isatty>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_isatty_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_isatty_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000318 	.word	0x20000318

08005f64 <trunc>:
 8005f64:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8005f68:	ec5c bb10 	vmov	fp, ip, d0
 8005f6c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8005f70:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8005f74:	2913      	cmp	r1, #19
 8005f76:	4664      	mov	r4, ip
 8005f78:	dc11      	bgt.n	8005f9e <trunc+0x3a>
 8005f7a:	2900      	cmp	r1, #0
 8005f7c:	bfa7      	ittee	ge
 8005f7e:	4b15      	ldrge	r3, [pc, #84]	; (8005fd4 <trunc+0x70>)
 8005f80:	fa43 f101 	asrge.w	r1, r3, r1
 8005f84:	2200      	movlt	r2, #0
 8005f86:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8005f8a:	bfa4      	itt	ge
 8005f8c:	2200      	movge	r2, #0
 8005f8e:	ea01 030c 	andge.w	r3, r1, ip
 8005f92:	4693      	mov	fp, r2
 8005f94:	469c      	mov	ip, r3
 8005f96:	ec4c bb10 	vmov	d0, fp, ip
 8005f9a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8005f9e:	2933      	cmp	r1, #51	; 0x33
 8005fa0:	dd0d      	ble.n	8005fbe <trunc+0x5a>
 8005fa2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005fa6:	d1f6      	bne.n	8005f96 <trunc+0x32>
 8005fa8:	4663      	mov	r3, ip
 8005faa:	ee10 2a10 	vmov	r2, s0
 8005fae:	ee10 0a10 	vmov	r0, s0
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	f7fa f97a 	bl	80002ac <__adddf3>
 8005fb8:	4683      	mov	fp, r0
 8005fba:	468c      	mov	ip, r1
 8005fbc:	e7eb      	b.n	8005f96 <trunc+0x32>
 8005fbe:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	40c3      	lsrs	r3, r0
 8005fc8:	ea2b 0603 	bic.w	r6, fp, r3
 8005fcc:	46b3      	mov	fp, r6
 8005fce:	46a4      	mov	ip, r4
 8005fd0:	e7e1      	b.n	8005f96 <trunc+0x32>
 8005fd2:	bf00      	nop
 8005fd4:	fff00000 	.word	0xfff00000

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
