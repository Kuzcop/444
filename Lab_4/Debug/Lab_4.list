
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200000b4  0800709c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800709c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bef  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003369  00000000  00000000  00036d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  0003a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddc  00000000  00000000  0003b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c76e  00000000  00000000  0003c05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b12  00000000  00000000  000687ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b9ce  00000000  00000000  000802dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004920  00000000  00000000  0018bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001905cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200000b4 	.word	0x200000b4
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006f50 	.word	0x08006f50

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200000b8 	.word	0x200000b8
 80001f8:	08006f50 	.word	0x08006f50

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 febe 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f864 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f996 	bl	8000834 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f946 	bl	800079c <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f8ee 	bl	80006f0 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_HSENSOR_Init();
 8000514:	f000 fe0c 	bl	8001130 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 8000518:	f000 fe38 	bl	800118c <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 800051c:	f000 fd88 	bl	8001030 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000520:	f000 fdc4 	bl	80010ac <BSP_GYRO_Init>
  BSP_QSPI_Init();
 8000524:	f000 fe5e 	bl	80011e4 <BSP_QSPI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4822      	ldr	r0, [pc, #136]	; (80005b8 <main+0xc0>)
 800052e:	f002 fad3 	bl	8002ad8 <HAL_GPIO_WritePin>
	 humidity = BSP_HSENSOR_ReadHumidity();
 8000532:	f000 fe1d 	bl	8001170 <BSP_HSENSOR_ReadHumidity>
 8000536:	eef0 7a40 	vmov.f32	s15, s0
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xc4>)
 800053c:	edc3 7a00 	vstr	s15, [r3]

	 if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8000540:	2000      	movs	r0, #0
 8000542:	f000 ffa5 	bl	8001490 <BSP_QSPI_Erase_Block>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <main+0x58>
		 Error_Handler();
 800054c:	f000 fa06 	bl	800095c <Error_Handler>
	 }

	 if(BSP_QSPI_Write(&humidity, HUMM_ADD + add_offset*sizeof(float), sizeof(float)) != QSPI_OK){
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <main+0xc8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	2204      	movs	r2, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4818      	ldr	r0, [pc, #96]	; (80005bc <main+0xc4>)
 800055c:	f000 ff12 	bl	8001384 <BSP_QSPI_Write>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x72>
		 Error_Handler();
 8000566:	f000 f9f9 	bl	800095c <Error_Handler>
	 }

	 if(BSP_QSPI_Read(&flash_humidity, HUMM_ADD + add_offset*sizeof(float), sizeof(float))!= QSPI_OK){
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <main+0xc8>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	2204      	movs	r2, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <main+0xcc>)
 8000576:	f000 feb3 	bl	80012e0 <BSP_QSPI_Read>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0x8c>
		 Error_Handler();
 8000580:	f000 f9ec 	bl	800095c <Error_Handler>
	 }

	 add_offset = (add_offset + 1)%10;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <main+0xc8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <main+0xd0>)
 800058c:	fb83 1302 	smull	r1, r3, r3, r2
 8000590:	1099      	asrs	r1, r3, #2
 8000592:	17d3      	asrs	r3, r2, #31
 8000594:	1ac9      	subs	r1, r1, r3
 8000596:	460b      	mov	r3, r1
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	440b      	add	r3, r1
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	1ad1      	subs	r1, r2, r3
 80005a0:	b2ca      	uxtb	r2, r1
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <main+0xc8>)
 80005a4:	701a      	strb	r2, [r3, #0]
	 flash_humidity = 0;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <main+0xcc>)
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	 HAL_Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f001 fed8 	bl	8002364 <HAL_Delay>
	 HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_SET);
 80005b4:	e7b8      	b.n	8000528 <main+0x30>
 80005b6:	bf00      	nop
 80005b8:	48001000 	.word	0x48001000
 80005bc:	20000208 	.word	0x20000208
 80005c0:	20000211 	.word	0x20000211
 80005c4:	2000020c 	.word	0x2000020c
 80005c8:	66666667 	.word	0x66666667

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fc8c 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f004 f986 	bl	8004900 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005fa:	f000 f9af 	bl	800095c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fe:	2310      	movs	r3, #16
 8000600:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000612:	2301      	movs	r3, #1
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800061a:	233c      	movs	r3, #60	; 0x3c
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fa0a 	bl	8004a48 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063a:	f000 f98f 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fe10 	bl	800527c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 f97b 	bl	800095c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3758      	adds	r7, #88	; 0x58
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <MX_I2C2_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_I2C2_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <MX_I2C2_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006ac:	f002 fa44 	bl	8002b38 <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 f951 	bl	800095c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006be:	f002 ffeb 	bl	8003698 <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 f948 	bl	800095c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006d0:	f003 f82d 	bl	800372e <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 f93f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	40005800 	.word	0x40005800
 80006ec:	307075b1 	.word	0x307075b1

080006f0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000706:	4a24      	ldr	r2, [pc, #144]	; (8000798 <MX_OCTOSPI1_Init+0xa8>)
 8000708:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 800070c:	2201      	movs	r2, #1
 800070e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800071c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000720:	2220      	movs	r2, #32
 8000722:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000738:	2201      	movs	r2, #1
 800073a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000750:	2208      	movs	r2, #8
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 8000756:	f003 f837 	bl	80037c8 <HAL_OSPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000760:	f000 f8fc 	bl	800095c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800076c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	f241 3288 	movw	r2, #5000	; 0x1388
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_OCTOSPI1_Init+0xa4>)
 800077c:	f003 fb22 	bl	8003dc4 <HAL_OSPIM_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000786:	f000 f8e9 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000124 	.word	0x20000124
 8000798:	a0001000 	.word	0xa0001000

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART1_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007e6:	f005 fd1f 	bl	8006228 <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f8b4 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART1_UART_Init+0x90>)
 80007f8:	f006 fab4 	bl	8006d64 <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f8ab 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x90>)
 800080a:	f006 fae9 	bl	8006de0 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f8a2 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART1_UART_Init+0x90>)
 800081a:	f006 fa6a 	bl	8006cf2 <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f89a 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000174 	.word	0x20000174
 8000830:	40013800 	.word	0x40013800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <MX_GPIO_Init+0xe4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a32      	ldr	r2, [pc, #200]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0xe4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a26      	ldr	r2, [pc, #152]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_GPIO_Init+0xe4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2108      	movs	r1, #8
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0xe8>)
 8000898:	f002 f91e 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a2:	481f      	ldr	r0, [pc, #124]	; (8000920 <MX_GPIO_Init+0xec>)
 80008a4:	f002 f918 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : errorLED_Pin */
  GPIO_InitStruct.Pin = errorLED_Pin;
 80008a8:	2308      	movs	r3, #8
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(errorLED_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4817      	ldr	r0, [pc, #92]	; (800091c <MX_GPIO_Init+0xe8>)
 80008c0:	f001 fe86 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushbutton_Pin */
  GPIO_InitStruct.Pin = pushbutton_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(pushbutton_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0xf0>)
 80008dc:	f001 fe78 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80008e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_GPIO_Init+0xec>)
 80008fa:	f001 fe69 	bl	80025d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f001 fe2d 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000908:	2028      	movs	r0, #40	; 0x28
 800090a:	f001 fe46 	bl	800259a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	48001000 	.word	0x48001000
 8000920:	48000400 	.word	0x48000400
 8000924:	48000800 	.word	0x48000800

08000928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	sensor = (sensor + 1)%4;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_GPIO_EXTI_Callback+0x30>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	425a      	negs	r2, r3
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	f002 0203 	and.w	r2, r2, #3
 8000942:	bf58      	it	pl
 8000944:	4253      	negpl	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GPIO_EXTI_Callback+0x30>)
 800094a:	701a      	strb	r2, [r3, #0]

}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	20000210 	.word	0x20000210

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2108      	movs	r1, #8
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <Error_Handler+0x18>)
 8000966:	f002 f8b7 	bl	8002ad8 <HAL_GPIO_WritePin>
	__BKPT();
 800096a:	be00      	bkpt	0x0000
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x14>
 8000972:	bf00      	nop
 8000974:	48001000 	.word	0x48001000

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0ae      	sub	sp, #184	; 0xb8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2294      	movs	r2, #148	; 0x94
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f006 fa89 	bl	8006ef8 <memset>
  if(hi2c->Instance==I2C2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <HAL_I2C_MspInit+0xb0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d13b      	bne.n	8000a68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fefb 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ffa8 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0xb8>)
 8000a4c:	f001 fdc0 	bl	80025d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	37b8      	adds	r7, #184	; 0xb8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005800 	.word	0x40005800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400

08000a7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_I2C_MspDeInit+0x3c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10f      	bne.n	8000aae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_I2C_MspDeInit+0x40>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_I2C_MspDeInit+0x40>)
 8000a94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <HAL_I2C_MspDeInit+0x44>)
 8000aa0:	f001 ff28 	bl	80028f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_I2C_MspDeInit+0x44>)
 8000aaa:	f001 ff23 	bl	80028f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0b0      	sub	sp, #192	; 0xc0
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	2294      	movs	r2, #148	; 0x94
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 fa07 	bl	8006ef8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <HAL_OSPI_MspInit+0xcc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d149      	bne.n	8000b88 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000af8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fe77 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8000b10:	f7ff ff24 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6513      	str	r3, [r2, #80]	; 0x50
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_OSPI_MspInit+0xd0>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b5c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000b76:	230a      	movs	r3, #10
 8000b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_OSPI_MspInit+0xd4>)
 8000b84:	f001 fd24 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	37c0      	adds	r7, #192	; 0xc0
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	a0001000 	.word	0xa0001000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48001000 	.word	0x48001000

08000b9c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_OSPI_MspDeInit+0x3c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d110      	bne.n	8000bd0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_OSPI_MspDeInit+0x40>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_OSPI_MspDeInit+0x40>)
 8000bb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_OSPI_MspDeInit+0x40>)
 8000bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_OSPI_MspDeInit+0x40>)
 8000bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bc4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000bc6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_OSPI_MspDeInit+0x44>)
 8000bcc:	f001 fe92 	bl	80028f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	a0001000 	.word	0xa0001000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48001000 	.word	0x48001000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ae      	sub	sp, #184	; 0xb8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2294      	movs	r2, #148	; 0x94
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 f977 	bl	8006ef8 <memset>
  if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_UART_MspInit+0xb0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13a      	bne.n	8000c8a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 fde9 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fe96 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c60:	23c0      	movs	r3, #192	; 0xc0
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0xb8>)
 8000c86:	f001 fca3 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	37b8      	adds	r7, #184	; 0xb8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>
	...

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <HardFault_Handler+0x14>)
 8000cb2:	f001 ff11 	bl	8002ad8 <HAL_GPIO_WritePin>
	__BKPT();
 8000cb6:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <HardFault_Handler+0x10>
 8000cba:	bf00      	nop
 8000cbc:	48001000 	.word	0x48001000

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f001 fb10 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushbutton_Pin);
 8000d0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d10:	f001 fefa 	bl	8002b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ffea 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f006 f8cd 	bl	8006f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fbc3 	bl	80004f8 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000d80:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 8000d84:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000d88:	200002cc 	.word	0x200002cc

08000d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_IRQHandler>
	...

08000d90 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000db0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <I2Cx_MspInit+0xac>)
 8000dce:	f001 fbff 	bl	80025d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <I2Cx_MspInit+0xac>)
 8000dda:	f001 fbf9 	bl	80025d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e00:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <I2Cx_MspInit+0xa8>)
 8000e08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e0c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	2021      	movs	r0, #33	; 0x21
 8000e14:	f001 fba5 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000e18:	2021      	movs	r0, #33	; 0x21
 8000e1a:	f001 fbbe 	bl	800259a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	210f      	movs	r1, #15
 8000e22:	2022      	movs	r0, #34	; 0x22
 8000e24:	f001 fb9d 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000e28:	2022      	movs	r0, #34	; 0x22
 8000e2a:	f001 fbb6 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <I2Cx_Init+0x54>)
 8000e4c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <I2Cx_Init+0x58>)
 8000e52:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff89 	bl	8000d90 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f001 fe5a 	bl	8002b38 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f002 fc06 	bl	8003698 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40005800 	.word	0x40005800
 8000e98:	00702681 	.word	0x00702681

08000e9c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af04      	add	r7, sp, #16
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72fb      	strb	r3, [r7, #11]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	813b      	strh	r3, [r7, #8]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	88f8      	ldrh	r0, [r7, #6]
 8000ec0:	893a      	ldrh	r2, [r7, #8]
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f002 f80e 	bl	8002ef4 <HAL_I2C_Mem_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 f832 	bl	8000f50 <I2Cx_Error>
  }
  return status;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b08a      	sub	sp, #40	; 0x28
 8000efa:	af04      	add	r7, sp, #16
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	4608      	mov	r0, r1
 8000f00:	4611      	mov	r1, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	72fb      	strb	r3, [r7, #11]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	813b      	strh	r3, [r7, #8]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	b299      	uxth	r1, r3
 8000f18:	88f8      	ldrh	r0, [r7, #6]
 8000f1a:	893a      	ldrh	r2, [r7, #8]
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f001 fecd 	bl	8002ccc <HAL_I2C_Mem_Write>
 8000f32:	4603      	mov	r3, r0
 8000f34:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f805 	bl	8000f50 <I2Cx_Error>
  }
  return status;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 fe86 	bl	8002c6e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff6c 	bl	8000e40 <I2Cx_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <SENSOR_IO_Init+0x10>)
 8000f76:	f7ff ff63 	bl	8000e40 <I2Cx_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000214 	.word	0x20000214

08000f84 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	79f9      	ldrb	r1, [r7, #7]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	1d7b      	adds	r3, r7, #5
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <SENSOR_IO_Write+0x30>)
 8000fa8:	f7ff ffa5 	bl	8000ef6 <I2Cx_WriteMultiple>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000214 	.word	0x20000214

08000fb8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	79f9      	ldrb	r1, [r7, #7]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 030f 	add.w	r3, r7, #15
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <SENSOR_IO_Read+0x38>)
 8000fe0:	f7ff ff5c 	bl	8000e9c <I2Cx_ReadMultiple>

  return read_value;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000214 	.word	0x20000214

08000ff4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	603a      	str	r2, [r7, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b29a      	uxth	r2, r3
 800100e:	79f9      	ldrb	r1, [r7, #7]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <SENSOR_IO_ReadMultiple+0x38>)
 800101c:	f7ff ff3e 	bl	8000e9c <I2Cx_ReadMultiple>
 8001020:	4603      	mov	r3, r0
 8001022:	b29b      	uxth	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000214 	.word	0x20000214

08001030 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800103a:	2300      	movs	r3, #0
 800103c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <BSP_ACCELERO_Init+0x74>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4798      	blx	r3
 8001044:	4603      	mov	r3, r0
 8001046:	2b6a      	cmp	r3, #106	; 0x6a
 8001048:	d002      	beq.n	8001050 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e024      	b.n	800109a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <BSP_ACCELERO_Init+0x78>)
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <BSP_ACCELERO_Init+0x74>)
 8001054:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001056:	2330      	movs	r3, #48	; 0x30
 8001058:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800105e:	2300      	movs	r3, #0
 8001060:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800106e:	797a      	ldrb	r2, [r7, #5]
 8001070:	7abb      	ldrb	r3, [r7, #10]
 8001072:	4313      	orrs	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001078:	7a3b      	ldrb	r3, [r7, #8]
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	b2db      	uxtb	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	b21b      	sxth	r3, r3
 800108c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <BSP_ACCELERO_Init+0x78>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	89ba      	ldrh	r2, [r7, #12]
 8001096:	4610      	mov	r0, r2
 8001098:	4798      	blx	r3
  }  

  return ret;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000044 	.word	0x20000044
 80010a8:	20000268 	.word	0x20000268

080010ac <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80010b6:	2300      	movs	r3, #0
 80010b8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <BSP_GYRO_Init+0x7c>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4798      	blx	r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b6a      	cmp	r3, #106	; 0x6a
 80010c4:	d002      	beq.n	80010cc <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e028      	b.n	800111e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <BSP_GYRO_Init+0x80>)
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <BSP_GYRO_Init+0x7c>)
 80010d0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80010d6:	2330      	movs	r3, #48	; 0x30
 80010d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80010ea:	230c      	movs	r3, #12
 80010ec:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80010ee:	7aba      	ldrb	r2, [r7, #10]
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80010f8:	7a3b      	ldrb	r3, [r7, #8]
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <BSP_GYRO_Init+0x80>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	89ba      	ldrh	r2, [r7, #12]
 8001116:	4610      	mov	r0, r2
 8001118:	4798      	blx	r3
    
    ret = GYRO_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000078 	.word	0x20000078
 800112c:	2000026c 	.word	0x2000026c

08001130 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <BSP_HSENSOR_Init+0x38>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	20be      	movs	r0, #190	; 0xbe
 800113c:	4798      	blx	r3
 800113e:	4603      	mov	r3, r0
 8001140:	2bbc      	cmp	r3, #188	; 0xbc
 8001142:	d002      	beq.n	800114a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	e009      	b.n	800115e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <BSP_HSENSOR_Init+0x3c>)
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <BSP_HSENSOR_Init+0x38>)
 800114e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <BSP_HSENSOR_Init+0x3c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	20be      	movs	r0, #190	; 0xbe
 8001158:	4798      	blx	r3
    ret = HSENSOR_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800115e:	687b      	ldr	r3, [r7, #4]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000004 	.word	0x20000004
 800116c:	20000270 	.word	0x20000270

08001170 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	20be      	movs	r0, #190	; 0xbe
 800117c:	4798      	blx	r3
 800117e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001182:	eeb0 0a67 	vmov.f32	s0, s15
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000270 	.word	0x20000270

0800118c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <BSP_MAGNETO_Init+0x50>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4798      	blx	r3
 800119c:	4603      	mov	r3, r0
 800119e:	2b3d      	cmp	r3, #61	; 0x3d
 80011a0:	d002      	beq.n	80011a8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e013      	b.n	80011d0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <BSP_MAGNETO_Init+0x54>)
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <BSP_MAGNETO_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80011ae:	2358      	movs	r3, #88	; 0x58
 80011b0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80011b2:	2300      	movs	r3, #0
 80011b4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80011ba:	2308      	movs	r3, #8
 80011bc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <BSP_MAGNETO_Init+0x54>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	463a      	mov	r2, r7
 80011ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ce:	4798      	blx	r3
  } 

  return ret;  
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000010 	.word	0x20000010
 80011e0:	20000274 	.word	0x20000274

080011e4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 80011ec:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <BSP_QSPI_Init+0xf8>)
 80011ee:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 80011f2:	f002 fb93 	bl	800391c <HAL_OSPI_DeInit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e067      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001200:	f000 f990 	bl	8001524 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001206:	2204      	movs	r2, #4
 8001208:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800121c:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8001230:	2320      	movs	r3, #32
 8001232:	e003      	b.n	800123c <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800123c:	461a      	mov	r2, r3
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001240:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001256:	2204      	movs	r2, #4
 8001258:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001276:	f002 faa7 	bl	80037c8 <HAL_OSPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e025      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001286:	f000 f98d 	bl	80015a4 <QSPI_ResetMemory>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8001290:	2304      	movs	r3, #4
 8001292:	e01d      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8001294:	2101      	movs	r1, #1
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 8001298:	f000 fa72 	bl	8001780 <QSPI_QuadMode>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e014      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80012a6:	2101      	movs	r1, #1
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 80012aa:	f000 fb15 	bl	80018d8 <QSPI_HighPerfMode>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00b      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <BSP_QSPI_Init+0xf4>)
 80012c0:	f002 fa82 	bl	80037c8 <HAL_OSPI_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000278 	.word	0x20000278
 80012dc:	a0001000 	.word	0xa0001000

080012e0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b098      	sub	sp, #96	; 0x60
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80012f4:	23eb      	movs	r3, #235	; 0xeb
 80012f6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8001308:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001318:	23aa      	movs	r3, #170	; 0xaa
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800131c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800132a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001338:	2304      	movs	r3, #4
 800133a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001340:	2300      	movs	r3, #0
 8001342:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	f241 3288 	movw	r2, #5000	; 0x1388
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <BSP_QSPI_Read+0xa0>)
 8001350:	f002 fb0b 	bl	800396a <HAL_OSPI_Command>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00b      	b.n	8001376 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <BSP_QSPI_Read+0xa0>)
 8001366:	f002 fbf4 	bl	8003b52 <HAL_OSPI_Receive>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3760      	adds	r7, #96	; 0x60
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000278 	.word	0x20000278

08001384 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09c      	sub	sp, #112	; 0x70
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800139a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d901      	bls.n	80013a6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80013ba:	2338      	movs	r3, #56	; 0x38
 80013bc:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80013ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80013de:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80013f0:	2300      	movs	r3, #0
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80013f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80013f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80013fc:	4823      	ldr	r0, [pc, #140]	; (800148c <BSP_QSPI_Write+0x108>)
 80013fe:	f000 f918 	bl	8001632 <QSPI_WriteEnable>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e03b      	b.n	8001484 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4619      	mov	r1, r3
 8001416:	481d      	ldr	r0, [pc, #116]	; (800148c <BSP_QSPI_Write+0x108>)
 8001418:	f002 faa7 	bl	800396a <HAL_OSPI_Command>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e02e      	b.n	8001484 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <BSP_QSPI_Write+0x108>)
 800142e:	f002 fb1d 	bl	8003a6c <HAL_OSPI_Transmit>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e023      	b.n	8001484 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800143c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <BSP_QSPI_Write+0x108>)
 8001442:	f000 f952 	bl	80016ea <QSPI_AutoPollingMemReady>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e019      	b.n	8001484 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001454:	4413      	add	r3, r2
 8001456:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001462:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001466:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001468:	429a      	cmp	r2, r3
 800146a:	d203      	bcs.n	8001474 <BSP_QSPI_Write+0xf0>
 800146c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800146e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	e001      	b.n	8001478 <BSP_QSPI_Write+0xf4>
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800147a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	429a      	cmp	r2, r3
 8001480:	d3b8      	bcc.n	80013f4 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3770      	adds	r7, #112	; 0x70
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000278 	.word	0x20000278

08001490 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b096      	sub	sp, #88	; 0x58
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80014a0:	23d8      	movs	r3, #216	; 0xd8
 80014a2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <BSP_QSPI_Erase_Block+0x90>)
 80014da:	f000 f8aa 	bl	8001632 <QSPI_WriteEnable>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e017      	b.n	8001518 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <BSP_QSPI_Erase_Block+0x90>)
 80014f4:	f002 fa39 	bl	800396a <HAL_OSPI_Command>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00a      	b.n	8001518 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001502:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <BSP_QSPI_Erase_Block+0x90>)
 8001508:	f000 f8ef 	bl	80016ea <QSPI_AutoPollingMemReady>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3758      	adds	r7, #88	; 0x58
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000278 	.word	0x20000278

08001524 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <BSP_QSPI_MspInit+0x78>)
 800152c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6513      	str	r3, [r2, #80]	; 0x50
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001558:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <BSP_QSPI_MspInit+0x78>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <BSP_QSPI_MspInit+0x78>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001572:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001576:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001584:	230a      	movs	r3, #10
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <BSP_QSPI_MspInit+0x7c>)
 8001590:	f001 f81e 	bl	80025d0 <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	48001000 	.word	0x48001000

080015a4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80015b4:	2366      	movs	r3, #102	; 0x66
 80015b6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80015d8:	2300      	movs	r3, #0
 80015da:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f002 f9bf 	bl	800396a <HAL_OSPI_Command>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e019      	b.n	800162a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80015f6:	2399      	movs	r3, #153	; 0x99
 80015f8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f002 f9b0 	bl	800396a <HAL_OSPI_Command>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00a      	b.n	800162a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001614:	f241 3188 	movw	r1, #5000	; 0x1388
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f866 	bl	80016ea <QSPI_AutoPollingMemReady>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3758      	adds	r7, #88	; 0x58
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b09c      	sub	sp, #112	; 0x70
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8001642:	2306      	movs	r3, #6
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001646:	2301      	movs	r3, #1
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800164a:	2300      	movs	r3, #0
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001666:	2300      	movs	r3, #0
 8001668:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f002 f978 	bl	800396a <HAL_OSPI_Command>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e02e      	b.n	80016e2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8001684:	2302      	movs	r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8001690:	2310      	movs	r3, #16
 8001692:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001694:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001698:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800169a:	2305      	movs	r3, #5
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800169e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f002 f957 	bl	800396a <HAL_OSPI_Command>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00d      	b.n	80016e2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f002 fae1 	bl	8003c98 <HAL_OSPI_AutoPolling>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3770      	adds	r7, #112	; 0x70
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b09c      	sub	sp, #112	; 0x70
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80016fc:	2305      	movs	r3, #5
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001700:	2301      	movs	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001718:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800172a:	2300      	movs	r3, #0
 800172c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8001732:	2301      	movs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800173a:	2310      	movs	r3, #16
 800173c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f002 f90b 	bl	800396a <HAL_OSPI_Command>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00c      	b.n	8001778 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f002 fa96 	bl	8003c98 <HAL_OSPI_AutoPolling>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3770      	adds	r7, #112	; 0x70
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b098      	sub	sp, #96	; 0x60
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001794:	2305      	movs	r3, #5
 8001796:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80017ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80017c2:	2300      	movs	r3, #0
 80017c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f002 f8ca 	bl	800396a <HAL_OSPI_Command>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e077      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017e0:	f107 030f 	add.w	r3, r7, #15
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f002 f9b1 	bl	8003b52 <HAL_OSPI_Receive>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06a      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff19 	bl	8001632 <QSPI_WriteEnable>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e062      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001816:	b2db      	uxtb	r3, r3
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e004      	b.n	8001826 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001822:	b2db      	uxtb	r3, r3
 8001824:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f002 f898 	bl	800396a <HAL_OSPI_Command>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e045      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001844:	f107 030f 	add.w	r3, r7, #15
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f002 f90c 	bl	8003a6c <HAL_OSPI_Transmit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e038      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800185e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff41 	bl	80016ea <QSPI_AutoPollingMemReady>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e02e      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001872:	2305      	movs	r3, #5
 8001874:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f002 f872 	bl	800396a <HAL_OSPI_Command>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e01f      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001890:	f107 030f 	add.w	r3, r7, #15
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f002 f959 	bl	8003b52 <HAL_OSPI_Receive>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e012      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <QSPI_QuadMode+0x13a>
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d007      	beq.n	80018ca <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3760      	adds	r7, #96	; 0x60
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b098      	sub	sp, #96	; 0x60
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80018ec:	2305      	movs	r3, #5
 80018ee:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800191a:	2300      	movs	r3, #0
 800191c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4619      	mov	r1, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f002 f81e 	bl	800396a <HAL_OSPI_Command>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e09a      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f002 f905 	bl	8003b52 <HAL_OSPI_Receive>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e08d      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001952:	2315      	movs	r3, #21
 8001954:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4619      	mov	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f002 f800 	bl	800396a <HAL_OSPI_Command>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e07c      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	3301      	adds	r3, #1
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f002 f8e6 	bl	8003b52 <HAL_OSPI_Receive>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e06e      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fe4e 	bl	8001632 <QSPI_WriteEnable>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e066      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	73bb      	strb	r3, [r7, #14]
 80019b0:	e004      	b.n	80019bc <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
 80019b4:	f023 0302 	bic.w	r3, r3, #2
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80019c0:	2303      	movs	r3, #3
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 ffcb 	bl	800396a <HAL_OSPI_Command>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e047      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f002 f83f 	bl	8003a6c <HAL_OSPI_Transmit>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e03a      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80019f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fe74 	bl	80016ea <QSPI_AutoPollingMemReady>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e030      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001a0c:	2315      	movs	r3, #21
 8001a0e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f001 ffa3 	bl	800396a <HAL_OSPI_Command>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e01f      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f002 f88a 	bl	8003b52 <HAL_OSPI_Receive>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e012      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <QSPI_HighPerfMode+0x180>
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d007      	beq.n	8001a68 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001a58:	7b7b      	ldrb	r3, [r7, #13]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3760      	adds	r7, #96	; 0x60
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2120      	movs	r1, #32
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa96 	bl	8000fb8 <SENSOR_IO_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f023 0304 	bic.w	r3, r3, #4
 8001a96:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f023 0303 	bic.w	r3, r3, #3
 8001aa6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	2120      	movs	r1, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fa5f 	bl	8000f84 <SENSOR_IO_Write>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001adc:	f7ff fa48 	bl	8000f70 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa66 	bl	8000fb8 <SENSOR_IO_Read>
 8001aec:	4603      	mov	r3, r0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	2302      	movs	r3, #2
 8001b10:	21b0      	movs	r1, #176	; 0xb0
 8001b12:	f7ff fa6f 	bl	8000ff4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001b16:	7b3b      	ldrb	r3, [r7, #12]
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001b1e:	7b7b      	ldrb	r3, [r7, #13]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	b2d8      	uxtb	r0, r3
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	2302      	movs	r3, #2
 8001b30:	21b6      	movs	r1, #182	; 0xb6
 8001b32:	f7ff fa5f 	bl	8000ff4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	7b3b      	ldrb	r3, [r7, #12]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	b2d8      	uxtb	r0, r3
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	21ba      	movs	r1, #186	; 0xba
 8001b50:	f7ff fa50 	bl	8000ff4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b54:	7b7b      	ldrb	r3, [r7, #13]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	7b3b      	ldrb	r3, [r7, #12]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	b2d8      	uxtb	r0, r3
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	21a8      	movs	r1, #168	; 0xa8
 8001b6e:	f7ff fa41 	bl	8000ff4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b72:	7b7b      	ldrb	r3, [r7, #13]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001b80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001b96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ba8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001bac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001bd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bde:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001c2c <HTS221_H_ReadHumidity+0x130>
 8001bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd01      	ble.n	8001bf8 <HTS221_H_ReadHumidity+0xfc>
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HTS221_H_ReadHumidity+0x134>)
 8001bf6:	e00a      	b.n	8001c0e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001bf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d502      	bpl.n	8001c0c <HTS221_H_ReadHumidity+0x110>
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HTS221_H_ReadHumidity+0x112>
 8001c0c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001c0e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c1c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	447a0000 	.word	0x447a0000
 8001c30:	447a0000 	.word	0x447a0000

08001c34 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001c40:	783b      	ldrb	r3, [r7, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	2120      	movs	r1, #32
 8001c46:	203c      	movs	r0, #60	; 0x3c
 8001c48:	f7ff f99c 	bl	8000f84 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2121      	movs	r1, #33	; 0x21
 8001c52:	203c      	movs	r0, #60	; 0x3c
 8001c54:	f7ff f996 	bl	8000f84 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2122      	movs	r1, #34	; 0x22
 8001c5e:	203c      	movs	r0, #60	; 0x3c
 8001c60:	f7ff f990 	bl	8000f84 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	461a      	mov	r2, r3
 8001c68:	2123      	movs	r1, #35	; 0x23
 8001c6a:	203c      	movs	r0, #60	; 0x3c
 8001c6c:	f7ff f98a 	bl	8000f84 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001c70:	793b      	ldrb	r3, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	2124      	movs	r1, #36	; 0x24
 8001c76:	203c      	movs	r0, #60	; 0x3c
 8001c78:	f7ff f984 	bl	8000f84 <SENSOR_IO_Write>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001c8e:	2122      	movs	r1, #34	; 0x22
 8001c90:	203c      	movs	r0, #60	; 0x3c
 8001c92:	f7ff f991 	bl	8000fb8 <SENSOR_IO_Read>
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f043 0303 	orr.w	r3, r3, #3
 8001ca8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	461a      	mov	r2, r3
 8001cae:	2122      	movs	r1, #34	; 0x22
 8001cb0:	203c      	movs	r0, #60	; 0x3c
 8001cb2:	f7ff f967 	bl	8000f84 <SENSOR_IO_Write>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001cc2:	f7ff f955 	bl	8000f70 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	203c      	movs	r0, #60	; 0x3c
 8001cca:	f7ff f975 	bl	8000fb8 <SENSOR_IO_Read>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001ce2:	2122      	movs	r1, #34	; 0x22
 8001ce4:	203c      	movs	r0, #60	; 0x3c
 8001ce6:	f7ff f967 	bl	8000fb8 <SENSOR_IO_Read>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	f023 0320 	bic.w	r3, r3, #32
 8001cf4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	461a      	mov	r2, r3
 8001d08:	2122      	movs	r1, #34	; 0x22
 8001d0a:	203c      	movs	r0, #60	; 0x3c
 8001d0c:	f7ff f93a 	bl	8000f84 <SENSOR_IO_Write>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001d2e:	2121      	movs	r1, #33	; 0x21
 8001d30:	203c      	movs	r0, #60	; 0x3c
 8001d32:	f7ff f941 	bl	8000fb8 <SENSOR_IO_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001d3a:	f107 0208 	add.w	r2, r7, #8
 8001d3e:	2306      	movs	r3, #6
 8001d40:	21a8      	movs	r1, #168	; 0xa8
 8001d42:	203c      	movs	r0, #60	; 0x3c
 8001d44:	f7ff f956 	bl	8000ff4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
 8001d4c:	e01c      	b.n	8001d88 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	3301      	adds	r3, #1
 8001d54:	3320      	adds	r3, #32
 8001d56:	443b      	add	r3, r7
 8001d58:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	3320      	adds	r3, #32
 8001d68:	443b      	add	r3, r7
 8001d6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	b212      	sxth	r2, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	443b      	add	r3, r7
 8001d7e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	3301      	adds	r3, #1
 8001d86:	77fb      	strb	r3, [r7, #31]
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d9df      	bls.n	8001d4e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001d94:	2b60      	cmp	r3, #96	; 0x60
 8001d96:	d013      	beq.n	8001dc0 <LIS3MDL_MagReadXYZ+0xa8>
 8001d98:	2b60      	cmp	r3, #96	; 0x60
 8001d9a:	dc14      	bgt.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
 8001d9c:	2b40      	cmp	r3, #64	; 0x40
 8001d9e:	d00c      	beq.n	8001dba <LIS3MDL_MagReadXYZ+0xa2>
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	dc10      	bgt.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <LIS3MDL_MagReadXYZ+0x96>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d003      	beq.n	8001db4 <LIS3MDL_MagReadXYZ+0x9c>
 8001dac:	e00b      	b.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <LIS3MDL_MagReadXYZ+0xfc>)
 8001db0:	61bb      	str	r3, [r7, #24]
    break;
 8001db2:	e008      	b.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <LIS3MDL_MagReadXYZ+0x100>)
 8001db6:	61bb      	str	r3, [r7, #24]
    break;
 8001db8:	e005      	b.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <LIS3MDL_MagReadXYZ+0x104>)
 8001dbc:	61bb      	str	r3, [r7, #24]
    break;
 8001dbe:	e002      	b.n	8001dc6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <LIS3MDL_MagReadXYZ+0x108>)
 8001dc2:	61bb      	str	r3, [r7, #24]
    break;    
 8001dc4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	77fb      	strb	r3, [r7, #31]
 8001dca:	e01a      	b.n	8001e02 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	443b      	add	r3, r7
 8001dd4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df4:	ee17 2a90 	vmov	r2, s15
 8001df8:	b212      	sxth	r2, r2
 8001dfa:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	77fb      	strb	r3, [r7, #31]
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d9e1      	bls.n	8001dcc <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	3e0f5c29 	.word	0x3e0f5c29
 8001e18:	3e947ae1 	.word	0x3e947ae1
 8001e1c:	3edc28f6 	.word	0x3edc28f6
 8001e20:	3f147ae1 	.word	0x3f147ae1

08001e24 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001e32:	2110      	movs	r1, #16
 8001e34:	20d4      	movs	r0, #212	; 0xd4
 8001e36:	f7ff f8bf 	bl	8000fb8 <SENSOR_IO_Read>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001e4a:	7bba      	ldrb	r2, [r7, #14]
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	461a      	mov	r2, r3
 8001e56:	2110      	movs	r1, #16
 8001e58:	20d4      	movs	r0, #212	; 0xd4
 8001e5a:	f7ff f893 	bl	8000f84 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001e5e:	2112      	movs	r1, #18
 8001e60:	20d4      	movs	r0, #212	; 0xd4
 8001e62:	f7ff f8a9 	bl	8000fb8 <SENSOR_IO_Read>
 8001e66:	4603      	mov	r3, r0
 8001e68:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001e78:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	461a      	mov	r2, r3
 8001e86:	2112      	movs	r1, #18
 8001e88:	20d4      	movs	r0, #212	; 0xd4
 8001e8a:	f7ff f87b 	bl	8000f84 <SENSOR_IO_Write>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	20d4      	movs	r0, #212	; 0xd4
 8001ea4:	f7ff f888 	bl	8000fb8 <SENSOR_IO_Read>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2110      	movs	r1, #16
 8001eba:	20d4      	movs	r0, #212	; 0xd4
 8001ebc:	f7ff f862 	bl	8000f84 <SENSOR_IO_Write>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001ecc:	f7ff f850 	bl	8000f70 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	20d4      	movs	r0, #212	; 0xd4
 8001ed4:	f7ff f870 	bl	8000fb8 <SENSOR_IO_Read>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}

08001ede <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001eec:	2115      	movs	r1, #21
 8001eee:	20d4      	movs	r0, #212	; 0xd4
 8001ef0:	f7ff f862 	bl	8000fb8 <SENSOR_IO_Read>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	f023 0310 	bic.w	r3, r3, #16
 8001efe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	461a      	mov	r2, r3
 8001f12:	2115      	movs	r1, #21
 8001f14:	20d4      	movs	r0, #212	; 0xd4
 8001f16:	f7ff f835 	bl	8000f84 <SENSOR_IO_Write>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	20d4      	movs	r0, #212	; 0xd4
 8001f3e:	f7ff f83b 	bl	8000fb8 <SENSOR_IO_Read>
 8001f42:	4603      	mov	r3, r0
 8001f44:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001f46:	f107 0208 	add.w	r2, r7, #8
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	2128      	movs	r1, #40	; 0x28
 8001f4e:	20d4      	movs	r0, #212	; 0xd4
 8001f50:	f7ff f850 	bl	8000ff4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
 8001f58:	e01c      	b.n	8001f94 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	3301      	adds	r3, #1
 8001f60:	3320      	adds	r3, #32
 8001f62:	443b      	add	r3, r7
 8001f64:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	3320      	adds	r3, #32
 8001f74:	443b      	add	r3, r7
 8001f76:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	7ffb      	ldrb	r3, [r7, #31]
 8001f82:	b212      	sxth	r2, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3320      	adds	r3, #32
 8001f88:	443b      	add	r3, r7
 8001f8a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	3301      	adds	r3, #1
 8001f92:	77fb      	strb	r3, [r7, #31]
 8001f94:	7ffb      	ldrb	r3, [r7, #31]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d9df      	bls.n	8001f5a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d829      	bhi.n	8001ff8 <LSM6DSL_AccReadXYZ+0xd4>
 8001fa4:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <LSM6DSL_AccReadXYZ+0x88>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	08001ff9 	.word	0x08001ff9
 8001fb4:	08001ff9 	.word	0x08001ff9
 8001fb8:	08001ff9 	.word	0x08001ff9
 8001fbc:	08001ff3 	.word	0x08001ff3
 8001fc0:	08001ff9 	.word	0x08001ff9
 8001fc4:	08001ff9 	.word	0x08001ff9
 8001fc8:	08001ff9 	.word	0x08001ff9
 8001fcc:	08001fe7 	.word	0x08001fe7
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	08001ff9 	.word	0x08001ff9
 8001fd8:	08001ff9 	.word	0x08001ff9
 8001fdc:	08001fed 	.word	0x08001fed
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <LSM6DSL_AccReadXYZ+0x120>)
 8001fe2:	61bb      	str	r3, [r7, #24]
    break;
 8001fe4:	e008      	b.n	8001ff8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <LSM6DSL_AccReadXYZ+0x124>)
 8001fe8:	61bb      	str	r3, [r7, #24]
    break;
 8001fea:	e005      	b.n	8001ff8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <LSM6DSL_AccReadXYZ+0x128>)
 8001fee:	61bb      	str	r3, [r7, #24]
    break;
 8001ff0:	e002      	b.n	8001ff8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <LSM6DSL_AccReadXYZ+0x12c>)
 8001ff4:	61bb      	str	r3, [r7, #24]
    break;    
 8001ff6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
 8001ffc:	e01a      	b.n	8002034 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	3320      	adds	r3, #32
 8002004:	443b      	add	r3, r7
 8002006:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002012:	edd7 7a06 	vldr	s15, [r7, #24]
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002026:	ee17 2a90 	vmov	r2, s15
 800202a:	b212      	sxth	r2, r2
 800202c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800202e:	7ffb      	ldrb	r3, [r7, #31]
 8002030:	3301      	adds	r3, #1
 8002032:	77fb      	strb	r3, [r7, #31]
 8002034:	7ffb      	ldrb	r3, [r7, #31]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d9e1      	bls.n	8001ffe <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	3d79db23 	.word	0x3d79db23
 8002048:	3df9db23 	.word	0x3df9db23
 800204c:	3e79db23 	.word	0x3e79db23
 8002050:	3ef9db23 	.word	0x3ef9db23

08002054 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002062:	2111      	movs	r1, #17
 8002064:	20d4      	movs	r0, #212	; 0xd4
 8002066:	f7fe ffa7 	bl	8000fb8 <SENSOR_IO_Read>
 800206a:	4603      	mov	r3, r0
 800206c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800207a:	7bba      	ldrb	r2, [r7, #14]
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	4313      	orrs	r3, r2
 8002080:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002082:	7bbb      	ldrb	r3, [r7, #14]
 8002084:	461a      	mov	r2, r3
 8002086:	2111      	movs	r1, #17
 8002088:	20d4      	movs	r0, #212	; 0xd4
 800208a:	f7fe ff7b 	bl	8000f84 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800208e:	2112      	movs	r1, #18
 8002090:	20d4      	movs	r0, #212	; 0xd4
 8002092:	f7fe ff91 	bl	8000fb8 <SENSOR_IO_Read>
 8002096:	4603      	mov	r3, r0
 8002098:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80020a8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80020aa:	7bba      	ldrb	r2, [r7, #14]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	461a      	mov	r2, r3
 80020b6:	2112      	movs	r1, #18
 80020b8:	20d4      	movs	r0, #212	; 0xd4
 80020ba:	f7fe ff63 	bl	8000f84 <SENSOR_IO_Write>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80020cc:	2300      	movs	r3, #0
 80020ce:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80020d0:	2111      	movs	r1, #17
 80020d2:	20d4      	movs	r0, #212	; 0xd4
 80020d4:	f7fe ff70 	bl	8000fb8 <SENSOR_IO_Read>
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	461a      	mov	r2, r3
 80020e8:	2111      	movs	r1, #17
 80020ea:	20d4      	movs	r0, #212	; 0xd4
 80020ec:	f7fe ff4a 	bl	8000f84 <SENSOR_IO_Write>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80020fc:	f7fe ff38 	bl	8000f70 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002100:	210f      	movs	r1, #15
 8002102:	20d4      	movs	r0, #212	; 0xd4
 8002104:	f7fe ff58 	bl	8000fb8 <SENSOR_IO_Read>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}

0800210e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800211c:	2116      	movs	r1, #22
 800211e:	20d4      	movs	r0, #212	; 0xd4
 8002120:	f7fe ff4a 	bl	8000fb8 <SENSOR_IO_Read>
 8002124:	4603      	mov	r3, r0
 8002126:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800213c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	461a      	mov	r2, r3
 8002142:	2116      	movs	r1, #22
 8002144:	20d4      	movs	r0, #212	; 0xd4
 8002146:	f7fe ff1d 	bl	8000f84 <SENSOR_IO_Write>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800216a:	2111      	movs	r1, #17
 800216c:	20d4      	movs	r0, #212	; 0xd4
 800216e:	f7fe ff23 	bl	8000fb8 <SENSOR_IO_Read>
 8002172:	4603      	mov	r3, r0
 8002174:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002176:	f107 0208 	add.w	r2, r7, #8
 800217a:	2306      	movs	r3, #6
 800217c:	2122      	movs	r1, #34	; 0x22
 800217e:	20d4      	movs	r0, #212	; 0xd4
 8002180:	f7fe ff38 	bl	8000ff4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	77fb      	strb	r3, [r7, #31]
 8002188:	e01c      	b.n	80021c4 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800218a:	7ffb      	ldrb	r3, [r7, #31]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	3301      	adds	r3, #1
 8002190:	3320      	adds	r3, #32
 8002192:	443b      	add	r3, r7
 8002194:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002198:	b29b      	uxth	r3, r3
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b29a      	uxth	r2, r3
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	3320      	adds	r3, #32
 80021a4:	443b      	add	r3, r7
 80021a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	b212      	sxth	r2, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	3320      	adds	r3, #32
 80021b8:	443b      	add	r3, r7
 80021ba:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	3301      	adds	r3, #1
 80021c2:	77fb      	strb	r3, [r7, #31]
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d9df      	bls.n	800218a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d829      	bhi.n	8002228 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002229 	.word	0x08002229
 80021e4:	08002229 	.word	0x08002229
 80021e8:	08002229 	.word	0x08002229
 80021ec:	08002217 	.word	0x08002217
 80021f0:	08002229 	.word	0x08002229
 80021f4:	08002229 	.word	0x08002229
 80021f8:	08002229 	.word	0x08002229
 80021fc:	0800221d 	.word	0x0800221d
 8002200:	08002229 	.word	0x08002229
 8002204:	08002229 	.word	0x08002229
 8002208:	08002229 	.word	0x08002229
 800220c:	08002223 	.word	0x08002223
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002212:	61bb      	str	r3, [r7, #24]
    break;
 8002214:	e008      	b.n	8002228 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002218:	61bb      	str	r3, [r7, #24]
    break;
 800221a:	e005      	b.n	8002228 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800221c:	4b15      	ldr	r3, [pc, #84]	; (8002274 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800221e:	61bb      	str	r3, [r7, #24]
    break;
 8002220:	e002      	b.n	8002228 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8002224:	61bb      	str	r3, [r7, #24]
    break;    
 8002226:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
 800222c:	e016      	b.n	800225c <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	3320      	adds	r3, #32
 8002234:	443b      	add	r3, r7
 8002236:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	edd7 7a06 	vldr	s15, [r7, #24]
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	3301      	adds	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d9e5      	bls.n	800222e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	410c0000 	.word	0x410c0000
 8002270:	418c0000 	.word	0x418c0000
 8002274:	420c0000 	.word	0x420c0000
 8002278:	428c0000 	.word	0x428c0000

0800227c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002286:	2003      	movs	r0, #3
 8002288:	f000 f960 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228c:	2000      	movs	r0, #0
 800228e:	f000 f80d 	bl	80022ac <HAL_InitTick>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	e001      	b.n	80022a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229e:	f7fe fb6b 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_InitTick+0x6c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_InitTick+0x70>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_InitTick+0x6c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f96d 	bl	80025b6 <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	d809      	bhi.n	80022fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e8:	2200      	movs	r2, #0
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f000 f937 	bl	8002562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_InitTick+0x74>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e007      	b.n	800230c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e004      	b.n	800230c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e001      	b.n	800230c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200000b0 	.word	0x200000b0
 800231c:	20000000 	.word	0x20000000
 8002320:	200000ac 	.word	0x200000ac

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200000b0 	.word	0x200000b0
 8002348:	200002c8 	.word	0x200002c8

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200002c8 	.word	0x200002c8

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200000b0 	.word	0x200000b0

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff3e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff31 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e166      	b.n	80028ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8158 	beq.w	80028a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d005      	beq.n	8002610 <HAL_GPIO_Init+0x40>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d130      	bne.n	8002672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0201 	and.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d017      	beq.n	80026ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b2 	beq.w	80028a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4b61      	ldr	r3, [pc, #388]	; (80028cc <HAL_GPIO_Init+0x2fc>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	4a60      	ldr	r2, [pc, #384]	; (80028cc <HAL_GPIO_Init+0x2fc>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6613      	str	r3, [r2, #96]	; 0x60
 8002750:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <HAL_GPIO_Init+0x2fc>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800275c:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_GPIO_Init+0x300>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002786:	d02b      	beq.n	80027e0 <HAL_GPIO_Init+0x210>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_GPIO_Init+0x304>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d025      	beq.n	80027dc <HAL_GPIO_Init+0x20c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a51      	ldr	r2, [pc, #324]	; (80028d8 <HAL_GPIO_Init+0x308>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01f      	beq.n	80027d8 <HAL_GPIO_Init+0x208>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_GPIO_Init+0x30c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d019      	beq.n	80027d4 <HAL_GPIO_Init+0x204>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a4f      	ldr	r2, [pc, #316]	; (80028e0 <HAL_GPIO_Init+0x310>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_GPIO_Init+0x200>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a4e      	ldr	r2, [pc, #312]	; (80028e4 <HAL_GPIO_Init+0x314>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00d      	beq.n	80027cc <HAL_GPIO_Init+0x1fc>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a4d      	ldr	r2, [pc, #308]	; (80028e8 <HAL_GPIO_Init+0x318>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x1f8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_GPIO_Init+0x31c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_GPIO_Init+0x1f4>
 80027c0:	2307      	movs	r3, #7
 80027c2:	e00e      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027c4:	2308      	movs	r3, #8
 80027c6:	e00c      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027c8:	2306      	movs	r3, #6
 80027ca:	e00a      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027cc:	2305      	movs	r3, #5
 80027ce:	e008      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027d0:	2304      	movs	r3, #4
 80027d2:	e006      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027d4:	2303      	movs	r3, #3
 80027d6:	e004      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027d8:	2302      	movs	r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_GPIO_Init+0x212>
 80027e0:	2300      	movs	r3, #0
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4093      	lsls	r3, r2
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027f2:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_GPIO_Init+0x300>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_GPIO_Init+0x320>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002824:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_GPIO_Init+0x320>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_GPIO_Init+0x320>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800284e:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <HAL_GPIO_Init+0x320>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_GPIO_Init+0x320>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_GPIO_Init+0x320>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_GPIO_Init+0x320>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_GPIO_Init+0x320>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f ae91 	bne.w	80025e0 <HAL_GPIO_Init+0x10>
  }
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	48000400 	.word	0x48000400
 80028d8:	48000800 	.word	0x48000800
 80028dc:	48000c00 	.word	0x48000c00
 80028e0:	48001000 	.word	0x48001000
 80028e4:	48001400 	.word	0x48001400
 80028e8:	48001800 	.word	0x48001800
 80028ec:	48001c00 	.word	0x48001c00
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002902:	e0c9      	b.n	8002a98 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002904:	2201      	movs	r2, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80bc 	beq.w	8002a92 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800291a:	4a66      	ldr	r2, [pc, #408]	; (8002ab4 <HAL_GPIO_DeInit+0x1c0>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002942:	d02b      	beq.n	800299c <HAL_GPIO_DeInit+0xa8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a5c      	ldr	r2, [pc, #368]	; (8002ab8 <HAL_GPIO_DeInit+0x1c4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d025      	beq.n	8002998 <HAL_GPIO_DeInit+0xa4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a5b      	ldr	r2, [pc, #364]	; (8002abc <HAL_GPIO_DeInit+0x1c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d01f      	beq.n	8002994 <HAL_GPIO_DeInit+0xa0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_GPIO_DeInit+0x1cc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d019      	beq.n	8002990 <HAL_GPIO_DeInit+0x9c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_GPIO_DeInit+0x1d0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_GPIO_DeInit+0x98>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_GPIO_DeInit+0x1d4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00d      	beq.n	8002988 <HAL_GPIO_DeInit+0x94>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_GPIO_DeInit+0x1d8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_DeInit+0x90>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <HAL_GPIO_DeInit+0x1dc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_GPIO_DeInit+0x8c>
 800297c:	2307      	movs	r3, #7
 800297e:	e00e      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002980:	2308      	movs	r3, #8
 8002982:	e00c      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002984:	2306      	movs	r3, #6
 8002986:	e00a      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002988:	2305      	movs	r3, #5
 800298a:	e008      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 800298c:	2304      	movs	r3, #4
 800298e:	e006      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002990:	2303      	movs	r3, #3
 8002992:	e004      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002994:	2302      	movs	r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_DeInit+0xaa>
 800299c:	2300      	movs	r3, #0
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d132      	bne.n	8002a14 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4947      	ldr	r1, [pc, #284]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80029bc:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	4943      	ldr	r1, [pc, #268]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80029ca:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4940      	ldr	r1, [pc, #256]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	493c      	ldr	r1, [pc, #240]	; (8002ad4 <HAL_GPIO_DeInit+0x1e0>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <HAL_GPIO_DeInit+0x1c0>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	482b      	ldr	r0, [pc, #172]	; (8002ab4 <HAL_GPIO_DeInit+0x1c0>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	08d2      	lsrs	r2, r2, #3
 8002a48:	4019      	ands	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2103      	movs	r1, #3
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af2f 	bne.w	8002904 <HAL_GPIO_DeInit+0x10>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000c00 	.word	0x48000c00
 8002ac4:	48001000 	.word	0x48001000
 8002ac8:	48001400 	.word	0x48001400
 8002acc:	48001800 	.word	0x48001800
 8002ad0:	48001c00 	.word	0x48001c00
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fefe 	bl	8000928 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08d      	b.n	8002c66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd ff2e 	bl	80009c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e006      	b.n	8002bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d108      	bne.n	8002bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e007      	b.n	8002bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e021      	b.n	8002cc4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd feef 	bl	8000a7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	f040 80f9 	bne.w	8002ee6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_I2C_Mem_Write+0x34>
 8002cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ed      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Mem_Write+0x4e>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0e6      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d22:	f7ff fb13 	bl	800234c <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2319      	movs	r3, #25
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fac3 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0d1      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6c:	88f8      	ldrh	r0, [r7, #6]
 8002d6e:	893a      	ldrh	r2, [r7, #8]
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9d3 	bl	8003128 <I2C_RequestMemoryWrite>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0a9      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d90e      	bls.n	8002dbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fc3d 	bl	8003634 <I2C_TransferConfig>
 8002dba:	e00f      	b.n	8002ddc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	8979      	ldrh	r1, [r7, #10]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fc2c 	bl	8003634 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fabc 	bl	800335e <I2C_WaitOnTXISFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e07b      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d034      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x1c8>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d130      	bne.n	8002e94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fa3f 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e04d      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d90e      	bls.n	8002e74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fbe1 	bl	8003634 <I2C_TransferConfig>
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fbd0 	bl	8003634 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d19e      	bne.n	8002ddc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 faa2 	bl	80033ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e01a      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_I2C_Mem_Write+0x224>)
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fe00e800 	.word	0xfe00e800

08002ef4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	f040 80fd 	bne.w	8003116 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x34>
 8002f22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0f1      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Mem_Read+0x4e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e0ea      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f4a:	f7ff f9ff 	bl	800234c <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f9af 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0d5      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2222      	movs	r2, #34	; 0x22
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f94:	88f8      	ldrh	r0, [r7, #6]
 8002f96:	893a      	ldrh	r2, [r7, #8]
 8002f98:	8979      	ldrh	r1, [r7, #10]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f913 	bl	80031d0 <I2C_RequestMemoryRead>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0ad      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2bff      	cmp	r3, #255	; 0xff
 8002fc4:	d90e      	bls.n	8002fe4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	8979      	ldrh	r1, [r7, #10]
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_I2C_Mem_Read+0x22c>)
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fb29 	bl	8003634 <I2C_TransferConfig>
 8002fe2:	e00f      	b.n	8003004 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	8979      	ldrh	r1, [r7, #10]
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_I2C_Mem_Read+0x22c>)
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fb18 	bl	8003634 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	2200      	movs	r2, #0
 800300c:	2104      	movs	r1, #4
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f956 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07c      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d034      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x1d0>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d130      	bne.n	80030c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f927 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e04d      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fac9 	bl	8003634 <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fab8 	bl	8003634 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d19a      	bne.n	8003004 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f98a 	bl	80033ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e01a      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2220      	movs	r2, #32
 80030e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_I2C_Mem_Read+0x230>)
 80030f6:	400b      	ands	r3, r1
 80030f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	80002400 	.word	0x80002400
 8003124:	fe00e800 	.word	0xfe00e800

08003128 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4603      	mov	r3, r0
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	460b      	mov	r3, r1
 800313c:	813b      	strh	r3, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <I2C_RequestMemoryWrite+0xa4>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fa6f 	bl	8003634 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	69b9      	ldr	r1, [r7, #24]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8ff 	bl	800335e <I2C_WaitOnTXISFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02c      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
 800317a:	e015      	b.n	80031a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f8e5 	bl	800335e <I2C_WaitOnTXISFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e012      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319e:	893b      	ldrh	r3, [r7, #8]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f884 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	80002000 	.word	0x80002000

080031d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	8979      	ldrh	r1, [r7, #10]
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <I2C_RequestMemoryRead+0xa4>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fa1c 	bl	8003634 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8ac 	bl	800335e <I2C_WaitOnTXISFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e02c      	b.n	800326a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003216:	893b      	ldrh	r3, [r7, #8]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
 8003220:	e015      	b.n	800324e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003222:	893b      	ldrh	r3, [r7, #8]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	b29b      	uxth	r3, r3
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f892 	bl	800335e <I2C_WaitOnTXISFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e012      	b.n	800326a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2200      	movs	r2, #0
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f831 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	80002000 	.word	0x80002000

08003278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d103      	bne.n	8003296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d007      	beq.n	80032b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	619a      	str	r2, [r3, #24]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d0:	e031      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d02d      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7ff f837 	bl	800234c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d122      	bne.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	429a      	cmp	r2, r3
 800330c:	d113      	bne.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	429a      	cmp	r2, r3
 8003352:	d0be      	beq.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800336a:	e033      	b.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f87f 	bl	8003474 <I2C_IsErrorOccurred>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e031      	b.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d025      	beq.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7fe ffe0 	bl	800234c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11a      	bne.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d013      	beq.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e007      	b.n	80033e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d1c4      	bne.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f8:	e02f      	b.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f838 	bl	8003474 <I2C_IsErrorOccurred>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e02d      	b.n	800346a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe ff9d 	bl	800234c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11a      	bne.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b20      	cmp	r3, #32
 8003430:	d013      	beq.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d1c8      	bne.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d068      	beq.n	8003572 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2210      	movs	r2, #16
 80034a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034a8:	e049      	b.n	800353e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d045      	beq.n	800353e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe ff4b 	bl	800234c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <I2C_IsErrorOccurred+0x54>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d13a      	bne.n	800353e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d121      	bne.n	8003530 <I2C_IsErrorOccurred+0xbc>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f2:	d01d      	beq.n	8003530 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d01a      	beq.n	8003530 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003508:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800350a:	f7fe ff1f 	bl	800234c <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003510:	e00e      	b.n	8003530 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003512:	f7fe ff1b 	bl	800234c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b19      	cmp	r3, #25
 800351e:	d907      	bls.n	8003530 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f043 0320 	orr.w	r3, r3, #32
 8003526:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800352e:	e006      	b.n	800353e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b20      	cmp	r3, #32
 800353c:	d1e9      	bne.n	8003512 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d003      	beq.n	8003554 <I2C_IsErrorOccurred+0xe0>
 800354c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0aa      	beq.n	80034aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2220      	movs	r2, #32
 8003562:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01c      	beq.n	8003622 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fe45 	bl	8003278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <I2C_IsErrorOccurred+0x1bc>)
 80035fa:	400b      	ands	r3, r1
 80035fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003626:	4618      	mov	r0, r3
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	fe00e800 	.word	0xfe00e800

08003634 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	4613      	mov	r3, r2
 8003644:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364c:	7a7b      	ldrb	r3, [r7, #9]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003654:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	4313      	orrs	r3, r2
 800365e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003662:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	0d5b      	lsrs	r3, r3, #21
 800366e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <I2C_TransferConfig+0x60>)
 8003674:	430b      	orrs	r3, r1
 8003676:	43db      	mvns	r3, r3
 8003678:	ea02 0103 	and.w	r1, r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	03ff63ff 	.word	0x03ff63ff

08003698 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d138      	bne.n	8003720 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e032      	b.n	8003722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	d139      	bne.n	80037b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800374e:	2302      	movs	r3, #2
 8003750:	e033      	b.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2224      	movs	r2, #36	; 0x24
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003780:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7fe fdba 	bl	800234c <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e092      	b.n	800390c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 808b 	bne.w	800390c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd f964 	bl	8000ac4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80037fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fad0 	bl	8003da6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <HAL_OSPI_Init+0x150>)
 800380e:	4013      	ands	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68d1      	ldr	r1, [r2, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6912      	ldr	r2, [r2, #16]
 8003818:	3a01      	subs	r2, #1
 800381a:	0412      	lsls	r2, r2, #16
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6952      	ldr	r2, [r2, #20]
 8003822:	3a01      	subs	r2, #1
 8003824:	0212      	lsls	r2, r2, #8
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	69d2      	ldr	r2, [r2, #28]
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0412      	lsls	r2, r2, #16
 8003846:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	021a      	lsls	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	2120      	movs	r1, #32
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fddc 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d146      	bne.n	800390c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80038b4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d107      	bne.n	80038f4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0202 	orr.w	r2, r2, #2
 80038f2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fc:	d103      	bne.n	8003906 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
 8003904:	e002      	b.n	800390c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	f8e0f8f4 	.word	0xf8e0f8f4

0800391c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e015      	b.n	8003960 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0202 	bic.w	r2, r2, #2
 8003952:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f921 	bl	8000b9c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af02      	add	r7, sp, #8
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003976:	f7fe fce9 	bl	800234c <HAL_GetTick>
 800397a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d104      	bne.n	8003998 <HAL_OSPI_Command+0x2e>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003996:	d10d      	bne.n	80039b4 <HAL_OSPI_Command+0x4a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b14      	cmp	r3, #20
 800399c:	d103      	bne.n	80039a6 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d006      	beq.n	80039b4 <HAL_OSPI_Command+0x4a>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b24      	cmp	r3, #36	; 0x24
 80039aa:	d153      	bne.n	8003a54 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d14f      	bne.n	8003a54 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2200      	movs	r2, #0
 80039bc:	2120      	movs	r1, #32
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fd34 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80039c8:	7ffb      	ldrb	r3, [r7, #31]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d148      	bne.n	8003a60 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fd60 	bl	800449c <OSPI_ConfigCmd>
 80039dc:	4603      	mov	r3, r0
 80039de:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80039e0:	7ffb      	ldrb	r3, [r7, #31]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13c      	bne.n	8003a60 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2201      	movs	r2, #1
 80039f6:	2102      	movs	r1, #2
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fd17 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2202      	movs	r2, #2
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003a0a:	e029      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2204      	movs	r2, #4
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a1a:	e021      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10b      	bne.n	8003a3c <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	2b24      	cmp	r3, #36	; 0x24
 8003a2a:	d103      	bne.n	8003a34 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a32:	e015      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2214      	movs	r2, #20
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a3a:	e011      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	2b14      	cmp	r3, #20
 8003a42:	d103      	bne.n	8003a4c <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2204      	movs	r2, #4
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a4a:	e009      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003a52:	e005      	b.n	8003a60 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	649a      	str	r2, [r3, #72]	; 0x48
 8003a5e:	e000      	b.n	8003a62 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003a60:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7fe fc68 	bl	800234c <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3350      	adds	r3, #80	; 0x50
 8003a84:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2208      	movs	r2, #8
 8003a94:	649a      	str	r2, [r3, #72]	; 0x48
 8003a96:	e057      	b.n	8003b48 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d14e      	bne.n	8003b3e <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ac8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fca9 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003ade:	7ffb      	ldrb	r3, [r7, #31]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d113      	bne.n	8003b0c <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1df      	bne.n	8003aca <HAL_OSPI_Transmit+0x5e>
 8003b0a:	e000      	b.n	8003b0e <HAL_OSPI_Transmit+0xa2>
          break;
 8003b0c:	bf00      	nop

      if (status == HAL_OK)
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d119      	bne.n	8003b48 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc84 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003b28:	7ffb      	ldrb	r3, [r7, #31]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3c:	e004      	b.n	8003b48 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2210      	movs	r2, #16
 8003b46:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08c      	sub	sp, #48	; 0x30
 8003b56:	af02      	add	r7, sp, #8
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7fe fbf5 	bl	800234c <HAL_GetTick>
 8003b62:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b72:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	649a      	str	r2, [r3, #72]	; 0x48
 8003b90:	e07c      	b.n	8003c8c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d172      	bne.n	8003c80 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd0:	d104      	bne.n	8003bdc <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	649a      	str	r2, [r3, #72]	; 0x48
 8003bda:	e011      	b.n	8003c00 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	649a      	str	r2, [r3, #72]	; 0x48
 8003bf4:	e004      	b.n	8003c00 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2201      	movs	r2, #1
 8003c08:	2106      	movs	r1, #6
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fc0e 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d114      	bne.n	8003c48 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1dc      	bne.n	8003c00 <HAL_OSPI_Receive+0xae>
 8003c46:	e000      	b.n	8003c4a <HAL_OSPI_Receive+0xf8>
          break;
 8003c48:	bf00      	nop

      if (status == HAL_OK)
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11c      	bne.n	8003c8c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fbe5 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2202      	movs	r2, #2
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c7e:	e005      	b.n	8003c8c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7fe fb52 	bl	800234c <HAL_GetTick>
 8003ca8:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003cba:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d164      	bne.n	8003d8e <HAL_OSPI_AutoPolling+0xf6>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ccc:	d15f      	bne.n	8003d8e <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2120      	movs	r1, #32
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fba7 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d158      	bne.n	8003d9a <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	6852      	ldr	r2, [r2, #4]
 8003cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	6912      	ldr	r2, [r2, #16]
 8003d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d2a:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d34:	d104      	bne.n	8003d40 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	649a      	str	r2, [r3, #72]	; 0x48
 8003d3e:	e011      	b.n	8003d64 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	649a      	str	r2, [r3, #72]	; 0x48
 8003d58:	e004      	b.n	8003d64 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2108      	movs	r1, #8
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fb5c 	bl	800442c <OSPI_WaitFlagStateUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003d78:	7ffb      	ldrb	r3, [r7, #31]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2208      	movs	r2, #8
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003d8c:	e005      	b.n	8003d9a <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2210      	movs	r2, #16
 8003d96:	649a      	str	r2, [r3, #72]	; 0x48
 8003d98:	e000      	b.n	8003d9c <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003d9a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b092      	sub	sp, #72	; 0x48
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_OSPIM_Config+0x40>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d105      	bne.n	8003df2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003df0:	e004      	b.n	8003dfc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003df2:	2301      	movs	r3, #1
 8003df4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003e02:	e01f      	b.n	8003e44 <HAL_OSPIM_Config+0x80>
 8003e04:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b2d8      	uxtb	r0, r3
 8003e10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003e14:	f107 0114 	add.w	r1, r7, #20
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	4619      	mov	r1, r3
 8003e24:	f000 fc9c 	bl	8004760 <OSPIM_GetConfig>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2208      	movs	r2, #8
 8003e38:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003e3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003e44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d9dd      	bls.n	8003e08 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003e4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 82de 	bne.w	8004412 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003e56:	4bc6      	ldr	r3, [pc, #792]	; (8004170 <HAL_OSPIM_Config+0x3ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003e62:	4bc3      	ldr	r3, [pc, #780]	; (8004170 <HAL_OSPIM_Config+0x3ac>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4ac2      	ldr	r2, [pc, #776]	; (8004170 <HAL_OSPIM_Config+0x3ac>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003e6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003e7a:	4bbe      	ldr	r3, [pc, #760]	; (8004174 <HAL_OSPIM_Config+0x3b0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003e86:	4bbb      	ldr	r3, [pc, #748]	; (8004174 <HAL_OSPIM_Config+0x3b0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4aba      	ldr	r2, [pc, #744]	; (8004174 <HAL_OSPIM_Config+0x3b0>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003e92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003e9e:	49b6      	ldr	r1, [pc, #728]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3348      	adds	r3, #72	; 0x48
 8003eac:	443b      	add	r3, r7
 8003eae:	3b2c      	subs	r3, #44	; 0x2c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	48af      	ldr	r0, [pc, #700]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	443b      	add	r3, r7
 8003eca:	3b2c      	subs	r3, #44	; 0x2c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	3348      	adds	r3, #72	; 0x48
 8003ee6:	443b      	add	r3, r7
 8003ee8:	3b34      	subs	r3, #52	; 0x34
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003ef2:	49a1      	ldr	r1, [pc, #644]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003ef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3348      	adds	r3, #72	; 0x48
 8003f00:	443b      	add	r3, r7
 8003f02:	3b34      	subs	r3, #52	; 0x34
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	489a      	ldr	r0, [pc, #616]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3348      	adds	r3, #72	; 0x48
 8003f1c:	443b      	add	r3, r7
 8003f1e:	3b34      	subs	r3, #52	; 0x34
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	f021 0201 	bic.w	r2, r1, #1
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4403      	add	r3, r0
 8003f2c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	3348      	adds	r3, #72	; 0x48
 8003f3a:	443b      	add	r3, r7
 8003f3c:	3b30      	subs	r3, #48	; 0x30
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01d      	beq.n	8003f80 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003f44:	498c      	ldr	r1, [pc, #560]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3348      	adds	r3, #72	; 0x48
 8003f52:	443b      	add	r3, r7
 8003f54:	3b30      	subs	r3, #48	; 0x30
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	4885      	ldr	r0, [pc, #532]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3348      	adds	r3, #72	; 0x48
 8003f6e:	443b      	add	r3, r7
 8003f70:	3b30      	subs	r3, #48	; 0x30
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	f021 0210 	bic.w	r2, r1, #16
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4403      	add	r3, r0
 8003f7e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	3348      	adds	r3, #72	; 0x48
 8003f8c:	443b      	add	r3, r7
 8003f8e:	3b28      	subs	r3, #40	; 0x28
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d021      	beq.n	8003fda <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003f96:	4978      	ldr	r1, [pc, #480]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	3348      	adds	r3, #72	; 0x48
 8003fa4:	443b      	add	r3, r7
 8003fa6:	3b28      	subs	r3, #40	; 0x28
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	4870      	ldr	r0, [pc, #448]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	3348      	adds	r3, #72	; 0x48
 8003fc4:	443b      	add	r3, r7
 8003fc6:	3b28      	subs	r3, #40	; 0x28
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4403      	add	r3, r0
 8003fd8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	3348      	adds	r3, #72	; 0x48
 8003fe6:	443b      	add	r3, r7
 8003fe8:	3b24      	subs	r3, #36	; 0x24
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d021      	beq.n	8004034 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003ff0:	4961      	ldr	r1, [pc, #388]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8003ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	3348      	adds	r3, #72	; 0x48
 8003ffe:	443b      	add	r3, r7
 8004000:	3b24      	subs	r3, #36	; 0x24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	4859      	ldr	r0, [pc, #356]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 8004012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3348      	adds	r3, #72	; 0x48
 800401e:	443b      	add	r3, r7
 8004020:	3b24      	subs	r3, #36	; 0x24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4403      	add	r3, r0
 8004032:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	3348      	adds	r3, #72	; 0x48
 8004046:	443b      	add	r3, r7
 8004048:	3b34      	subs	r3, #52	; 0x34
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4299      	cmp	r1, r3
 800404e:	d038      	beq.n	80040c2 <HAL_OSPIM_Config+0x2fe>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3348      	adds	r3, #72	; 0x48
 8004062:	443b      	add	r3, r7
 8004064:	3b30      	subs	r3, #48	; 0x30
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4299      	cmp	r1, r3
 800406a:	d02a      	beq.n	80040c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6899      	ldr	r1, [r3, #8]
 8004070:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	443b      	add	r3, r7
 8004080:	3b2c      	subs	r3, #44	; 0x2c
 8004082:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004084:	4299      	cmp	r1, r3
 8004086:	d01c      	beq.n	80040c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	68d9      	ldr	r1, [r3, #12]
 800408c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	3348      	adds	r3, #72	; 0x48
 800409a:	443b      	add	r3, r7
 800409c:	3b28      	subs	r3, #40	; 0x28
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4299      	cmp	r1, r3
 80040a2:	d00e      	beq.n	80040c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6919      	ldr	r1, [r3, #16]
 80040a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	3348      	adds	r3, #72	; 0x48
 80040b6:	443b      	add	r3, r7
 80040b8:	3b24      	subs	r3, #36	; 0x24
 80040ba:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040bc:	4299      	cmp	r1, r3
 80040be:	f040 80d3 	bne.w	8004268 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80040c2:	492d      	ldr	r1, [pc, #180]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 80040c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	3348      	adds	r3, #72	; 0x48
 80040d2:	443b      	add	r3, r7
 80040d4:	3b34      	subs	r3, #52	; 0x34
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3b01      	subs	r3, #1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	4825      	ldr	r0, [pc, #148]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 80040e2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	3348      	adds	r3, #72	; 0x48
 80040f0:	443b      	add	r3, r7
 80040f2:	3b34      	subs	r3, #52	; 0x34
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	f021 0201 	bic.w	r2, r1, #1
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4403      	add	r3, r0
 8004100:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004102:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	3348      	adds	r3, #72	; 0x48
 8004110:	443b      	add	r3, r7
 8004112:	3b30      	subs	r3, #48	; 0x30
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01f      	beq.n	800415a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800411a:	4917      	ldr	r1, [pc, #92]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 800411c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3348      	adds	r3, #72	; 0x48
 800412a:	443b      	add	r3, r7
 800412c:	3b30      	subs	r3, #48	; 0x30
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3b01      	subs	r3, #1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	480f      	ldr	r0, [pc, #60]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 800413a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	3348      	adds	r3, #72	; 0x48
 8004148:	443b      	add	r3, r7
 800414a:	3b30      	subs	r3, #48	; 0x30
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3b01      	subs	r3, #1
 8004150:	f021 0210 	bic.w	r2, r1, #16
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4403      	add	r3, r0
 8004158:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800415a:	4907      	ldr	r1, [pc, #28]	; (8004178 <HAL_OSPIM_Config+0x3b4>)
 800415c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3348      	adds	r3, #72	; 0x48
 800416a:	443b      	add	r3, r7
 800416c:	3b2c      	subs	r3, #44	; 0x2c
 800416e:	e005      	b.n	800417c <HAL_OSPIM_Config+0x3b8>
 8004170:	a0001000 	.word	0xa0001000
 8004174:	a0001400 	.word	0xa0001400
 8004178:	50061c00 	.word	0x50061c00
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3b01      	subs	r3, #1
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	48a6      	ldr	r0, [pc, #664]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004188:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3348      	adds	r3, #72	; 0x48
 8004196:	443b      	add	r3, r7
 8004198:	3b2c      	subs	r3, #44	; 0x2c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3b01      	subs	r3, #1
 800419e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4403      	add	r3, r0
 80041a6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80041a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3348      	adds	r3, #72	; 0x48
 80041b6:	443b      	add	r3, r7
 80041b8:	3b28      	subs	r3, #40	; 0x28
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d023      	beq.n	8004208 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80041c0:	4997      	ldr	r1, [pc, #604]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80041c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	3348      	adds	r3, #72	; 0x48
 80041d0:	443b      	add	r3, r7
 80041d2:	3b28      	subs	r3, #40	; 0x28
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	488f      	ldr	r0, [pc, #572]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80041e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	3348      	adds	r3, #72	; 0x48
 80041f2:	443b      	add	r3, r7
 80041f4:	3b28      	subs	r3, #40	; 0x28
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4403      	add	r3, r0
 8004206:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004208:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	3348      	adds	r3, #72	; 0x48
 8004216:	443b      	add	r3, r7
 8004218:	3b24      	subs	r3, #36	; 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004220:	497f      	ldr	r1, [pc, #508]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004222:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	3348      	adds	r3, #72	; 0x48
 8004230:	443b      	add	r3, r7
 8004232:	3b24      	subs	r3, #36	; 0x24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3b01      	subs	r3, #1
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	4877      	ldr	r0, [pc, #476]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004244:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3348      	adds	r3, #72	; 0x48
 8004252:	443b      	add	r3, r7
 8004254:	3b24      	subs	r3, #36	; 0x24
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3b01      	subs	r3, #1
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4403      	add	r3, r0
 8004266:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004268:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	3b01      	subs	r3, #1
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427c:	025b      	lsls	r3, r3, #9
 800427e:	431a      	orrs	r2, r3
 8004280:	4967      	ldr	r1, [pc, #412]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	3b01      	subs	r3, #1
 8004288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004292:	4a63      	ldr	r2, [pc, #396]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3b01      	subs	r3, #1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 0203 	bic.w	r2, r3, #3
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	431a      	orrs	r2, r3
 80042aa:	495d      	ldr	r1, [pc, #372]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d014      	beq.n	80042ee <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80042c4:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	015b      	lsls	r3, r3, #5
 80042da:	431a      	orrs	r2, r3
 80042dc:	4950      	ldr	r1, [pc, #320]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f042 0210 	orr.w	r2, r2, #16
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d019      	beq.n	800432e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042fa:	4a49      	ldr	r2, [pc, #292]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	3b01      	subs	r3, #1
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004312:	049b      	lsls	r3, r3, #18
 8004314:	431a      	orrs	r2, r3
 8004316:	4942      	ldr	r1, [pc, #264]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	3b01      	subs	r3, #1
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e01c      	b.n	8004368 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d018      	beq.n	8004368 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	3b01      	subs	r3, #1
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	431a      	orrs	r2, r3
 8004352:	4933      	ldr	r1, [pc, #204]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	3b01      	subs	r3, #1
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004374:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	3b01      	subs	r3, #1
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438c:	049b      	lsls	r3, r3, #18
 800438e:	431a      	orrs	r2, r3
 8004390:	4923      	ldr	r1, [pc, #140]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	3b01      	subs	r3, #1
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e01c      	b.n	80043e2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d018      	beq.n	80043e2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c8:	069b      	lsls	r3, r3, #26
 80043ca:	431a      	orrs	r2, r3
 80043cc:	4914      	ldr	r1, [pc, #80]	; (8004420 <HAL_OSPIM_Config+0x65c>)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80043e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_OSPIM_Config+0x660>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <HAL_OSPIM_Config+0x660>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80043fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_OSPIM_Config+0x664>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <HAL_OSPIM_Config+0x664>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004412:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004416:	4618      	mov	r0, r3
 8004418:	3748      	adds	r7, #72	; 0x48
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	50061c00 	.word	0x50061c00
 8004424:	a0001000 	.word	0xa0001000
 8004428:	a0001400 	.word	0xa0001400

0800442c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800443c:	e01a      	b.n	8004474 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d016      	beq.n	8004474 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fd ff81 	bl	800234c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004462:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e00e      	b.n	8004492 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a1a      	ldr	r2, [r3, #32]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d1d6      	bne.n	800443e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044b8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d114      	bne.n	800450a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044e8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80044f2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80044fc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e013      	b.n	8004532 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004512:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800451c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004526:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004530:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	431a      	orrs	r2, r3
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	4319      	orrs	r1, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	430b      	orrs	r3, r1
 8004568:	431a      	orrs	r2, r3
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 021f 	bic.w	r2, r3, #31
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	431a      	orrs	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3a01      	subs	r2, #1
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8099 	beq.w	80046d8 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d055      	beq.n	800465a <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01e      	beq.n	80045f4 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b68      	ldr	r3, [pc, #416]	; (800475c <OSPI_ConfigCmd+0x2c0>)
 80045bc:	4013      	ands	r3, r2
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	68d1      	ldr	r1, [r2, #12]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	6952      	ldr	r2, [r2, #20]
 80045c6:	4311      	orrs	r1, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	6912      	ldr	r2, [r2, #16]
 80045cc:	4311      	orrs	r1, r2
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	69d2      	ldr	r2, [r2, #28]
 80045d2:	4311      	orrs	r1, r2
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d8:	4311      	orrs	r1, r2
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	6a12      	ldr	r2, [r2, #32]
 80045de:	4311      	orrs	r1, r2
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e4:	4311      	orrs	r1, r2
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ea:	430a      	orrs	r2, r1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e028      	b.n	8004646 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	68d1      	ldr	r1, [r2, #12]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	6952      	ldr	r2, [r2, #20]
 8004608:	4311      	orrs	r1, r2
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	6912      	ldr	r2, [r2, #16]
 800460e:	4311      	orrs	r1, r2
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	69d2      	ldr	r2, [r2, #28]
 8004614:	4311      	orrs	r1, r2
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461a:	4311      	orrs	r1, r2
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	6a12      	ldr	r2, [r2, #32]
 8004620:	430a      	orrs	r2, r1
 8004622:	431a      	orrs	r2, r3
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004630:	d109      	bne.n	8004646 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004636:	2b08      	cmp	r3, #8
 8004638:	d105      	bne.n	8004646 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	6992      	ldr	r2, [r2, #24]
 8004656:	649a      	str	r2, [r3, #72]	; 0x48
 8004658:	e078      	b.n	800474c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800466a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68d1      	ldr	r1, [r2, #12]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	6952      	ldr	r2, [r2, #20]
 8004676:	4311      	orrs	r1, r2
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	6912      	ldr	r2, [r2, #16]
 800467c:	4311      	orrs	r1, r2
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004682:	4311      	orrs	r1, r2
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004688:	430a      	orrs	r2, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e01d      	b.n	80046ce <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4319      	orrs	r1, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b8:	d109      	bne.n	80046ce <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d105      	bne.n	80046ce <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e039      	b.n	800474c <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d030      	beq.n	8004742 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80046f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	69d1      	ldr	r1, [r2, #28]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046fc:	4311      	orrs	r1, r2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	6a12      	ldr	r2, [r2, #32]
 8004702:	4311      	orrs	r1, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004708:	4311      	orrs	r1, r2
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800470e:	430a      	orrs	r2, r1
 8004710:	431a      	orrs	r2, r3
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e00e      	b.n	8004736 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	4319      	orrs	r1, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	430b      	orrs	r3, r1
 8004730:	431a      	orrs	r2, r3
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	6992      	ldr	r2, [r2, #24]
 800473e:	649a      	str	r2, [r3, #72]	; 0x48
 8004740:	e004      	b.n	800474c <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2208      	movs	r2, #8
 800474a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800474c:	7ffb      	ldrb	r3, [r7, #31]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	f0ffc0c0 	.word	0xf0ffc0c0

08004760 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	6039      	str	r1, [r7, #0]
 800476a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <OSPIM_GetConfig+0x26>
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d802      	bhi.n	8004786 <OSPIM_GetConfig+0x26>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
 800478a:	e08e      	b.n	80048aa <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d101      	bne.n	80047b4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80047b0:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <OSPIM_GetConfig+0x158>)
 80047b2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e074      	b.n	80048a4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80047ba:	4a40      	ldr	r2, [pc, #256]	; (80048bc <OSPIM_GetConfig+0x15c>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4053      	eors	r3, r2
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4053      	eors	r3, r2
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4053      	eors	r3, r2
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4053      	eors	r3, r2
 8004836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d111      	bne.n	8004862 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e005      	b.n	8004862 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d018      	beq.n	800489e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4053      	eors	r3, r2
 8004872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d111      	bne.n	800489e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	611a      	str	r2, [r3, #16]
 8004890:	e005      	b.n	800489e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d987      	bls.n	80047ba <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	04040222 	.word	0x04040222
 80048bc:	50061c00 	.word	0x50061c00

080048c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d102      	bne.n	80048d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	e00b      	b.n	80048f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d102      	bne.n	80048ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80048e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ec:	e000      	b.n	80048f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80048ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d141      	bne.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800490e:	4b4b      	ldr	r3, [pc, #300]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d131      	bne.n	8004980 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800491c:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004922:	4a46      	ldr	r2, [pc, #280]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004934:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800493c:	4b40      	ldr	r3, [pc, #256]	; (8004a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2232      	movs	r2, #50	; 0x32
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	0c9b      	lsrs	r3, r3, #18
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004952:	e002      	b.n	800495a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495a:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004966:	d102      	bne.n	800496e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f2      	bne.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800496e:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d158      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e057      	b.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004980:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004986:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004990:	e04d      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d141      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800499a:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d131      	bne.n	8004a0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2232      	movs	r2, #50	; 0x32
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049de:	e002      	b.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	d102      	bne.n	80049fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f2      	bne.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d112      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e011      	b.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a1c:	e007      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	20000000 	.word	0x20000000
 8004a44:	431bde83 	.word	0x431bde83

08004a48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f000 bc08 	b.w	800526c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5c:	4b96      	ldr	r3, [pc, #600]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a66:	4b94      	ldr	r3, [pc, #592]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80e4 	beq.w	8004c46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4c>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	f040 808b 	bne.w	8004ba2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f040 8087 	bne.w	8004ba2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a94:	4b88      	ldr	r3, [pc, #544]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_OscConfig+0x64>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e3df      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	4b81      	ldr	r3, [pc, #516]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x7e>
 8004abc:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCC_OscConfig+0x8a>
 8004ac6:	4b7c      	ldr	r3, [pc, #496]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d223      	bcs.n	8004b1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fdcc 	bl	8005678 <RCC_SetFlashLatencyFromMSIRange>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e3c0      	b.n	800526c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aea:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a72      	ldr	r2, [pc, #456]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004af0:	f043 0308 	orr.w	r3, r3, #8
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b70      	ldr	r3, [pc, #448]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	496d      	ldr	r1, [pc, #436]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b08:	4b6b      	ldr	r3, [pc, #428]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	4968      	ldr	r1, [pc, #416]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
 8004b1c:	e025      	b.n	8004b6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b1e:	4b66      	ldr	r3, [pc, #408]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a65      	ldr	r2, [pc, #404]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b63      	ldr	r3, [pc, #396]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4960      	ldr	r1, [pc, #384]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b3c:	4b5e      	ldr	r3, [pc, #376]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	495b      	ldr	r1, [pc, #364]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fd8c 	bl	8005678 <RCC_SetFlashLatencyFromMSIRange>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e380      	b.n	800526c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b6a:	f000 fcc1 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	4b51      	ldr	r3, [pc, #324]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	4950      	ldr	r1, [pc, #320]	; (8004cbc <HAL_RCC_OscConfig+0x274>)
 8004b7c:	5ccb      	ldrb	r3, [r1, r3]
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a4e      	ldr	r2, [pc, #312]	; (8004cc0 <HAL_RCC_OscConfig+0x278>)
 8004b88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b8a:	4b4e      	ldr	r3, [pc, #312]	; (8004cc4 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fb8c 	bl	80022ac <HAL_InitTick>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d052      	beq.n	8004c44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	e364      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d032      	beq.n	8004c10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004baa:	4b43      	ldr	r3, [pc, #268]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a42      	ldr	r2, [pc, #264]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fbc9 	bl	800234c <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fbc5 	bl	800234c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e34d      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bdc:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004be2:	f043 0308 	orr.w	r3, r3, #8
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4930      	ldr	r1, [pc, #192]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	492b      	ldr	r1, [pc, #172]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	604b      	str	r3, [r1, #4]
 8004c0e:	e01a      	b.n	8004c46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fb96 	bl	800234c <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c24:	f7fd fb92 	bl	800234c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e31a      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x1dc>
 8004c42:	e000      	b.n	8004c46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d073      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_OscConfig+0x21c>
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d10e      	bne.n	8004c7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d063      	beq.n	8004d38 <HAL_RCC_OscConfig+0x2f0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d15f      	bne.n	8004d38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e2f7      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d106      	bne.n	8004c94 <HAL_RCC_OscConfig+0x24c>
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e025      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c9c:	d114      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x280>
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a02      	ldr	r2, [pc, #8]	; (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e013      	b.n	8004ce0 <HAL_RCC_OscConfig+0x298>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	08006f68 	.word	0x08006f68
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	200000ac 	.word	0x200000ac
 8004cc8:	4ba0      	ldr	r3, [pc, #640]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a9f      	ldr	r2, [pc, #636]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b9d      	ldr	r3, [pc, #628]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a9c      	ldr	r2, [pc, #624]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fb30 	bl	800234c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fb2c 	bl	800234c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e2b4      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d02:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x2a8>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fb1c 	bl	800234c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fd fb18 	bl	800234c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e2a0      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d2a:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2d0>
 8004d36:	e000      	b.n	8004d3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d060      	beq.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x310>
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d119      	bne.n	8004d86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d116      	bne.n	8004d86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d58:	4b7c      	ldr	r3, [pc, #496]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x328>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e27d      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b76      	ldr	r3, [pc, #472]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	4973      	ldr	r1, [pc, #460]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d84:	e040      	b.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d023      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8e:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6e      	ldr	r2, [pc, #440]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fd fad7 	bl	800234c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da2:	f7fd fad3 	bl	800234c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e25b      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db4:	4b65      	ldr	r3, [pc, #404]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc0:	4b62      	ldr	r3, [pc, #392]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	495f      	ldr	r1, [pc, #380]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
 8004dd4:	e018      	b.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a5c      	ldr	r2, [pc, #368]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fd fab3 	bl	800234c <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fd faaf 	bl	800234c <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e237      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dfc:	4b53      	ldr	r3, [pc, #332]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d03c      	beq.n	8004e8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01c      	beq.n	8004e56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e22:	4a4a      	ldr	r2, [pc, #296]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fa8e 	bl	800234c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e34:	f7fd fa8a 	bl	800234c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e212      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e46:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCC_OscConfig+0x3ec>
 8004e54:	e01b      	b.n	8004e8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e56:	4b3d      	ldr	r3, [pc, #244]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5c:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e66:	f7fd fa71 	bl	800234c <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6e:	f7fd fa6d 	bl	800234c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1f5      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e80:	4b32      	ldr	r3, [pc, #200]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ef      	bne.n	8004e6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80a6 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eac:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb8:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCC_OscConfig+0x508>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d118      	bne.n	8004f06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_RCC_OscConfig+0x508>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_RCC_OscConfig+0x508>)
 8004eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ede:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fa34 	bl	800234c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fd fa30 	bl	800234c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1b8      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_RCC_OscConfig+0x508>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d108      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4d8>
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f1e:	e029      	b.n	8004f74 <HAL_RCC_OscConfig+0x52c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d115      	bne.n	8004f54 <HAL_RCC_OscConfig+0x50c>
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <HAL_RCC_OscConfig+0x504>)
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0x52c>
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40007000 	.word	0x40007000
 8004f54:	4b9d      	ldr	r3, [pc, #628]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	4a9c      	ldr	r2, [pc, #624]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f64:	4b99      	ldr	r3, [pc, #612]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	4a98      	ldr	r2, [pc, #608]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd f9e6 	bl	800234c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fd f9e2 	bl	800234c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e168      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	4b8c      	ldr	r3, [pc, #560]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ed      	beq.n	8004f84 <HAL_RCC_OscConfig+0x53c>
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd f9cf 	bl	800234c <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fd f9cb 	bl	800234c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e151      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fc8:	4b80      	ldr	r3, [pc, #512]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ed      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b7b      	ldr	r3, [pc, #492]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	4a7a      	ldr	r2, [pc, #488]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d03c      	beq.n	800506e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01c      	beq.n	8005036 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ffc:	4b73      	ldr	r3, [pc, #460]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8004ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005002:	4a72      	ldr	r2, [pc, #456]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd f99e 	bl	800234c <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005014:	f7fd f99a 	bl	800234c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e122      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005026:	4b69      	ldr	r3, [pc, #420]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ef      	beq.n	8005014 <HAL_RCC_OscConfig+0x5cc>
 8005034:	e01b      	b.n	800506e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800503c:	4a63      	ldr	r2, [pc, #396]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fd f981 	bl	800234c <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800504e:	f7fd f97d 	bl	800234c <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e105      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005060:	4b5a      	ldr	r3, [pc, #360]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ef      	bne.n	800504e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80f9 	beq.w	800526a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	2b02      	cmp	r3, #2
 800507e:	f040 80cf 	bne.w	8005220 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005082:	4b52      	ldr	r3, [pc, #328]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0203 	and.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	429a      	cmp	r2, r3
 8005094:	d12c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	3b01      	subs	r3, #1
 80050a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d123      	bne.n	80050f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d11b      	bne.n	80050f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d113      	bne.n	80050f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	3b01      	subs	r3, #1
 80050d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d109      	bne.n	80050f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	3b01      	subs	r3, #1
 80050ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d071      	beq.n	80051d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d068      	beq.n	80051c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005102:	4b32      	ldr	r3, [pc, #200]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0ac      	b.n	800526c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005112:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800511e:	f7fd f915 	bl	800234c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fd f911 	bl	800234c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e099      	b.n	800526c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <HAL_RCC_OscConfig+0x788>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005154:	3a01      	subs	r2, #1
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	4311      	orrs	r1, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800515e:	0212      	lsls	r2, r2, #8
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005166:	0852      	lsrs	r2, r2, #1
 8005168:	3a01      	subs	r2, #1
 800516a:	0552      	lsls	r2, r2, #21
 800516c:	4311      	orrs	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005172:	0852      	lsrs	r2, r2, #1
 8005174:	3a01      	subs	r2, #1
 8005176:	0652      	lsls	r2, r2, #25
 8005178:	4311      	orrs	r1, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800517e:	06d2      	lsls	r2, r2, #27
 8005180:	430a      	orrs	r2, r1
 8005182:	4912      	ldr	r1, [pc, #72]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005184:	4313      	orrs	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 800518e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005192:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 800519a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a0:	f7fd f8d4 	bl	800234c <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fd f8d0 	bl	800234c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e058      	b.n	800526c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ba:	4b04      	ldr	r3, [pc, #16]	; (80051cc <HAL_RCC_OscConfig+0x784>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051c6:	e050      	b.n	800526a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e04f      	b.n	800526c <HAL_RCC_OscConfig+0x824>
 80051cc:	40021000 	.word	0x40021000
 80051d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d4:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d144      	bne.n	800526a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a23      	ldr	r2, [pc, #140]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 80051e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051ec:	4b21      	ldr	r3, [pc, #132]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a20      	ldr	r2, [pc, #128]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 80051f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051f8:	f7fd f8a8 	bl	800234c <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd f8a4 	bl	800234c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e02c      	b.n	800526c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005212:	4b18      	ldr	r3, [pc, #96]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x7b8>
 800521e:	e024      	b.n	800526a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d01f      	beq.n	8005266 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a12      	ldr	r2, [pc, #72]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 800522c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fd f88b 	bl	800234c <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd f887 	bl	800234c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e00f      	b.n	800526c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	4905      	ldr	r1, [pc, #20]	; (8005274 <HAL_RCC_OscConfig+0x82c>)
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_RCC_OscConfig+0x830>)
 8005260:	4013      	ands	r3, r2
 8005262:	60cb      	str	r3, [r1, #12]
 8005264:	e001      	b.n	800526a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	feeefffc 	.word	0xfeeefffc

0800527c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e11d      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005294:	4b90      	ldr	r3, [pc, #576]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d910      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b8d      	ldr	r3, [pc, #564]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 020f 	bic.w	r2, r3, #15
 80052aa:	498b      	ldr	r1, [pc, #556]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e105      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4b81      	ldr	r3, [pc, #516]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052dc:	429a      	cmp	r2, r3
 80052de:	d908      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e0:	4b7e      	ldr	r3, [pc, #504]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	497b      	ldr	r1, [pc, #492]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d079      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d11e      	bne.n	8005344 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	4b75      	ldr	r3, [pc, #468]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0dc      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005316:	f000 fa09 	bl	800572c <RCC_GetSysClockFreqFromPLLSource>
 800531a:	4603      	mov	r3, r0
 800531c:	4a70      	ldr	r2, [pc, #448]	; (80054e0 <HAL_RCC_ClockConfig+0x264>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d946      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005322:	4b6e      	ldr	r3, [pc, #440]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d140      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800532e:	4b6b      	ldr	r3, [pc, #428]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005336:	4a69      	ldr	r2, [pc, #420]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e035      	b.n	80053b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d107      	bne.n	800535c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534c:	4b63      	ldr	r3, [pc, #396]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d115      	bne.n	8005384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b9      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005364:	4b5d      	ldr	r3, [pc, #372]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0ad      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0a5      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005384:	f000 f8b4 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 8005388:	4603      	mov	r3, r0
 800538a:	4a55      	ldr	r2, [pc, #340]	; (80054e0 <HAL_RCC_ClockConfig+0x264>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d90f      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005390:	4b52      	ldr	r3, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800539c:	4b4f      	ldr	r3, [pc, #316]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a4:	4a4d      	ldr	r2, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053b0:	4b4a      	ldr	r3, [pc, #296]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 0203 	bic.w	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4947      	ldr	r1, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fc ffc3 	bl	800234c <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ca:	f7fc ffbf 	bl	800234c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e077      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e0:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 020c 	and.w	r2, r3, #12
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d1eb      	bne.n	80053ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d105      	bne.n	8005404 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053f8:	4b38      	ldr	r3, [pc, #224]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	4a37      	ldr	r2, [pc, #220]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005402:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541c:	429a      	cmp	r2, r3
 800541e:	d208      	bcs.n	8005432 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005420:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	492b      	ldr	r1, [pc, #172]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d210      	bcs.n	8005462 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 020f 	bic.w	r2, r3, #15
 8005448:	4923      	ldr	r1, [pc, #140]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005450:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <HAL_RCC_ClockConfig+0x25c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e036      	b.n	80054d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4918      	ldr	r1, [pc, #96]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4910      	ldr	r1, [pc, #64]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 800549c:	4313      	orrs	r3, r2
 800549e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054a0:	f000 f826 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <HAL_RCC_ClockConfig+0x260>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	490c      	ldr	r1, [pc, #48]	; (80054e4 <HAL_RCC_ClockConfig+0x268>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
 80054bc:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <HAL_RCC_ClockConfig+0x26c>)
 80054be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <HAL_RCC_ClockConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fc fef1 	bl	80022ac <HAL_InitTick>
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40021000 	.word	0x40021000
 80054e0:	04c4b400 	.word	0x04c4b400
 80054e4:	08006f68 	.word	0x08006f68
 80054e8:	20000000 	.word	0x20000000
 80054ec:	200000ac 	.word	0x200000ac

080054f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b089      	sub	sp, #36	; 0x24
 80054f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054fe:	4b3e      	ldr	r3, [pc, #248]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x34>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d121      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d11e      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005524:	4b34      	ldr	r3, [pc, #208]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005530:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e005      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005540:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005554:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10d      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d102      	bne.n	800556e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <HAL_RCC_GetSysClockFreq+0x110>)
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e004      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d101      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_RCC_GetSysClockFreq+0x114>)
 8005576:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d134      	bne.n	80055e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800557e:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d003      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0xa6>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d003      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0xac>
 8005594:	e005      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005596:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_RCC_GetSysClockFreq+0x110>)
 8005598:	617b      	str	r3, [r7, #20]
      break;
 800559a:	e005      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_GetSysClockFreq+0x114>)
 800559e:	617b      	str	r3, [r7, #20]
      break;
 80055a0:	e002      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	617b      	str	r3, [r7, #20]
      break;
 80055a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	3301      	adds	r3, #1
 80055b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	fb03 f202 	mul.w	r2, r3, r2
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	0e5b      	lsrs	r3, r3, #25
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	3301      	adds	r3, #1
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055e8:	69bb      	ldr	r3, [r7, #24]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3724      	adds	r7, #36	; 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	08006f80 	.word	0x08006f80
 8005600:	00f42400 	.word	0x00f42400
 8005604:	007a1200 	.word	0x007a1200

08005608 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000000 	.word	0x20000000

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4904      	ldr	r1, [pc, #16]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	08006f78 	.word	0x08006f78

0800564c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005650:	f7ff ffda 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0adb      	lsrs	r3, r3, #11
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4904      	ldr	r1, [pc, #16]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40021000 	.word	0x40021000
 8005674:	08006f78 	.word	0x08006f78

08005678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005690:	f7ff f916 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 8005694:	6178      	str	r0, [r7, #20]
 8005696:	e014      	b.n	80056c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6593      	str	r3, [r2, #88]	; 0x58
 80056a4:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056b0:	f7ff f906 	bl	80048c0 <HAL_PWREx_GetVoltageRange>
 80056b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80056bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c8:	d10b      	bne.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d913      	bls.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2ba0      	cmp	r3, #160	; 0xa0
 80056d4:	d902      	bls.n	80056dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056d6:	2302      	movs	r3, #2
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	e00d      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056dc:	2301      	movs	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	e00a      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b7f      	cmp	r3, #127	; 0x7f
 80056e6:	d902      	bls.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80056e8:	2302      	movs	r3, #2
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e004      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d101      	bne.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056f4:	2301      	movs	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 020f 	bic.w	r2, r3, #15
 8005700:	4909      	ldr	r1, [pc, #36]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	40022000 	.word	0x40022000

0800572c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005732:	4b2d      	ldr	r3, [pc, #180]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d00b      	beq.n	800575a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d825      	bhi.n	8005794 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d008      	beq.n	8005760 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d11f      	bne.n	8005794 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005756:	613b      	str	r3, [r7, #16]
    break;
 8005758:	e01f      	b.n	800579a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800575a:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800575c:	613b      	str	r3, [r7, #16]
    break;
 800575e:	e01c      	b.n	800579a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800576e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e005      	b.n	8005788 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005788:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005790:	613b      	str	r3, [r7, #16]
    break;
 8005792:	e002      	b.n	800579a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
    break;
 8005798:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	3301      	adds	r3, #1
 80057a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	fb03 f202 	mul.w	r2, r3, r2
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	0e5b      	lsrs	r3, r3, #25
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	3301      	adds	r3, #1
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80057da:	683b      	ldr	r3, [r7, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40021000 	.word	0x40021000
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	007a1200 	.word	0x007a1200
 80057f4:	08006f80 	.word	0x08006f80

080057f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005800:	2300      	movs	r3, #0
 8005802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005804:	2300      	movs	r3, #0
 8005806:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005810:	2b00      	cmp	r3, #0
 8005812:	d040      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d02a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800581c:	2b80      	cmp	r3, #128	; 0x80
 800581e:	d825      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d026      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d821      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d006      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d81d      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d010      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005838:	e018      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800583a:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4a88      	ldr	r2, [pc, #544]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005846:	e015      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fb02 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005858:	e00c      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3320      	adds	r3, #32
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fbed 	bl	8006040 <RCCEx_PLLSAI2_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	74fb      	strb	r3, [r7, #19]
      break;
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800587a:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005880:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005888:	4975      	ldr	r1, [pc, #468]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005890:	e001      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d047      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d030      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d82a      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058b6:	d02a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80058b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058bc:	d824      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c2:	d008      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c8:	d81e      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d010      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058d4:	e018      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058d6:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4a61      	ldr	r2, [pc, #388]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058e2:	e015      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fab4 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058f4:	e00c      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3320      	adds	r3, #32
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fb9f 	bl	8006040 <RCCEx_PLLSAI2_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	74fb      	strb	r3, [r7, #19]
      break;
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800590e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005916:	4b52      	ldr	r3, [pc, #328]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800591c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	494e      	ldr	r1, [pc, #312]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800592c:	e001      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 809f 	beq.w	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6593      	str	r3, [r2, #88]	; 0x58
 8005966:	4b3e      	ldr	r3, [pc, #248]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005982:	f7fc fce3 	bl	800234c <HAL_GetTick>
 8005986:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005988:	e009      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598a:	f7fc fcdf 	bl	800234c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d902      	bls.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	74fb      	strb	r3, [r7, #19]
        break;
 800599c:	e005      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0ef      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d15b      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059b0:	4b2b      	ldr	r3, [pc, #172]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01f      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d019      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e0:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d016      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc fc9e 	bl	800234c <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a12:	e00b      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fc fc9a 	bl	800234c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d902      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	74fb      	strb	r3, [r7, #19]
            break;
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0ec      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10c      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a50:	4903      	ldr	r1, [pc, #12]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a58:	e008      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	74bb      	strb	r3, [r7, #18]
 8005a5e:	e005      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a6c:	7c7b      	ldrb	r3, [r7, #17]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a72:	4ba0      	ldr	r3, [pc, #640]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	4a9f      	ldr	r2, [pc, #636]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a8a:	4b9a      	ldr	r3, [pc, #616]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f023 0203 	bic.w	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	4996      	ldr	r1, [pc, #600]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aac:	4b91      	ldr	r3, [pc, #580]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f023 020c 	bic.w	r2, r3, #12
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	498e      	ldr	r1, [pc, #568]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ace:	4b89      	ldr	r3, [pc, #548]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	4985      	ldr	r1, [pc, #532]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005af0:	4b80      	ldr	r3, [pc, #512]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	497d      	ldr	r1, [pc, #500]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b12:	4b78      	ldr	r3, [pc, #480]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b20:	4974      	ldr	r1, [pc, #464]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b34:	4b6f      	ldr	r3, [pc, #444]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	496c      	ldr	r1, [pc, #432]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b56:	4b67      	ldr	r3, [pc, #412]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b64:	4963      	ldr	r1, [pc, #396]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b78:	4b5e      	ldr	r3, [pc, #376]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	495b      	ldr	r1, [pc, #364]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b9a:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	4952      	ldr	r1, [pc, #328]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	494a      	ldr	r1, [pc, #296]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bde:	4b45      	ldr	r3, [pc, #276]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bec:	4941      	ldr	r1, [pc, #260]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c00:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c06:	f023 0203 	bic.w	r2, r3, #3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	4939      	ldr	r1, [pc, #228]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d028      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c30:	4930      	ldr	r1, [pc, #192]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4a2b      	ldr	r2, [pc, #172]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4c:	60d3      	str	r3, [r2, #12]
 8005c4e:	e011      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f8f9 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d04d      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d108      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c9a:	e012      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cba:	490e      	ldr	r1, [pc, #56]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cca:	d106      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cd6:	60d3      	str	r3, [r2, #12]
 8005cd8:	e020      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce2:	d109      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a02      	ldr	r2, [pc, #8]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cee:	60d3      	str	r3, [r2, #12]
 8005cf0:	e014      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f8a5 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d12:	7cfb      	ldrb	r3, [r7, #19]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d028      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d28:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d36:	4947      	ldr	r1, [pc, #284]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d46:	d106      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d48:	4b42      	ldr	r3, [pc, #264]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a41      	ldr	r2, [pc, #260]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d52:	60d3      	str	r3, [r2, #12]
 8005d54:	e011      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	2101      	movs	r1, #1
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f876 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01e      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d86:	4b33      	ldr	r3, [pc, #204]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d96:	492f      	ldr	r1, [pc, #188]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2102      	movs	r1, #2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f851 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dd0:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dd6:	f023 0204 	bic.w	r2, r3, #4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de0:	491c      	ldr	r1, [pc, #112]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005df4:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dfa:	f023 0218 	bic.w	r2, r3, #24
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	4913      	ldr	r1, [pc, #76]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e18:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e28:	490a      	ldr	r1, [pc, #40]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e48:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000

08005e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e66:	4b72      	ldr	r3, [pc, #456]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e72:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0203 	and.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d103      	bne.n	8005e8a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
       ||
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d142      	bne.n	8005f10 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
 8005e8e:	e03f      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d018      	beq.n	8005eca <RCCEx_PLLSAI1_Config+0x72>
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d825      	bhi.n	8005ee8 <RCCEx_PLLSAI1_Config+0x90>
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d002      	beq.n	8005ea6 <RCCEx_PLLSAI1_Config+0x4e>
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d009      	beq.n	8005eb8 <RCCEx_PLLSAI1_Config+0x60>
 8005ea4:	e020      	b.n	8005ee8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ea6:	4b62      	ldr	r3, [pc, #392]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11d      	bne.n	8005eee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eb6:	e01a      	b.n	8005eee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eb8:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d116      	bne.n	8005ef2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec8:	e013      	b.n	8005ef2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eca:	4b59      	ldr	r3, [pc, #356]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10f      	bne.n	8005ef6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ed6:	4b56      	ldr	r3, [pc, #344]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ee6:	e006      	b.n	8005ef6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e004      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e002      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e000      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f023 0203 	bic.w	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4949      	ldr	r1, [pc, #292]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 8086 	bne.w	8006024 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f18:	4b45      	ldr	r3, [pc, #276]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a44      	ldr	r2, [pc, #272]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f24:	f7fc fa12 	bl	800234c <HAL_GetTick>
 8005f28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f2a:	e009      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f2c:	f7fc fa0e 	bl	800234c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d902      	bls.n	8005f40 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f3e:	e005      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ef      	bne.n	8005f2c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d168      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d113      	bne.n	8005f80 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f58:	4b35      	ldr	r3, [pc, #212]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6892      	ldr	r2, [r2, #8]
 8005f64:	0211      	lsls	r1, r2, #8
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	06d2      	lsls	r2, r2, #27
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6852      	ldr	r2, [r2, #4]
 8005f72:	3a01      	subs	r2, #1
 8005f74:	0112      	lsls	r2, r2, #4
 8005f76:	430a      	orrs	r2, r1
 8005f78:	492d      	ldr	r1, [pc, #180]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
 8005f7e:	e02d      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d115      	bne.n	8005fb2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6892      	ldr	r2, [r2, #8]
 8005f92:	0211      	lsls	r1, r2, #8
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6912      	ldr	r2, [r2, #16]
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	0552      	lsls	r2, r2, #21
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	0112      	lsls	r2, r2, #4
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	4921      	ldr	r1, [pc, #132]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]
 8005fb0:	e014      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6892      	ldr	r2, [r2, #8]
 8005fbe:	0211      	lsls	r1, r2, #8
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6952      	ldr	r2, [r2, #20]
 8005fc4:	0852      	lsrs	r2, r2, #1
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	0652      	lsls	r2, r2, #25
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6852      	ldr	r2, [r2, #4]
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	4916      	ldr	r1, [pc, #88]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fdc:	4b14      	ldr	r3, [pc, #80]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a13      	ldr	r2, [pc, #76]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fc f9b0 	bl	800234c <HAL_GetTick>
 8005fec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fee:	e009      	b.n	8006004 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff0:	f7fc f9ac 	bl	800234c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d902      	bls.n	8006004 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	73fb      	strb	r3, [r7, #15]
          break;
 8006002:	e005      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0ef      	beq.n	8005ff0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	4904      	ldr	r1, [pc, #16]	; (8006030 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	07ff800f 	.word	0x07ff800f
 8006038:	ff9f800f 	.word	0xff9f800f
 800603c:	f9ff800f 	.word	0xf9ff800f

08006040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800604e:	4b72      	ldr	r3, [pc, #456]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800605a:	4b6f      	ldr	r3, [pc, #444]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0203 	and.w	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d103      	bne.n	8006072 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
       ||
 800606e:	2b00      	cmp	r3, #0
 8006070:	d142      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	73fb      	strb	r3, [r7, #15]
 8006076:	e03f      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d018      	beq.n	80060b2 <RCCEx_PLLSAI2_Config+0x72>
 8006080:	2b03      	cmp	r3, #3
 8006082:	d825      	bhi.n	80060d0 <RCCEx_PLLSAI2_Config+0x90>
 8006084:	2b01      	cmp	r3, #1
 8006086:	d002      	beq.n	800608e <RCCEx_PLLSAI2_Config+0x4e>
 8006088:	2b02      	cmp	r3, #2
 800608a:	d009      	beq.n	80060a0 <RCCEx_PLLSAI2_Config+0x60>
 800608c:	e020      	b.n	80060d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800608e:	4b62      	ldr	r3, [pc, #392]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11d      	bne.n	80060d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800609e:	e01a      	b.n	80060d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060a0:	4b5d      	ldr	r3, [pc, #372]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d116      	bne.n	80060da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b0:	e013      	b.n	80060da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060b2:	4b59      	ldr	r3, [pc, #356]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060ce:	e006      	b.n	80060de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
      break;
 80060d4:	e004      	b.n	80060e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060d6:	bf00      	nop
 80060d8:	e002      	b.n	80060e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060da:	bf00      	nop
 80060dc:	e000      	b.n	80060e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060de:	bf00      	nop
    }

    if(status == HAL_OK)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d108      	bne.n	80060f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80060e6:	4b4c      	ldr	r3, [pc, #304]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4949      	ldr	r1, [pc, #292]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 8086 	bne.w	800620c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006100:	4b45      	ldr	r3, [pc, #276]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a44      	ldr	r2, [pc, #272]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610c:	f7fc f91e 	bl	800234c <HAL_GetTick>
 8006110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006112:	e009      	b.n	8006128 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006114:	f7fc f91a 	bl	800234c <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d902      	bls.n	8006128 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	73fb      	strb	r3, [r7, #15]
        break;
 8006126:	e005      	b.n	8006134 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006128:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ef      	bne.n	8006114 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d168      	bne.n	800620c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d113      	bne.n	8006168 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006140:	4b35      	ldr	r3, [pc, #212]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	4b35      	ldr	r3, [pc, #212]	; (800621c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006146:	4013      	ands	r3, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6892      	ldr	r2, [r2, #8]
 800614c:	0211      	lsls	r1, r2, #8
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	06d2      	lsls	r2, r2, #27
 8006154:	4311      	orrs	r1, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6852      	ldr	r2, [r2, #4]
 800615a:	3a01      	subs	r2, #1
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	430a      	orrs	r2, r1
 8006160:	492d      	ldr	r1, [pc, #180]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006162:	4313      	orrs	r3, r2
 8006164:	614b      	str	r3, [r1, #20]
 8006166:	e02d      	b.n	80061c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d115      	bne.n	800619a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800616e:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006174:	4013      	ands	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6892      	ldr	r2, [r2, #8]
 800617a:	0211      	lsls	r1, r2, #8
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6912      	ldr	r2, [r2, #16]
 8006180:	0852      	lsrs	r2, r2, #1
 8006182:	3a01      	subs	r2, #1
 8006184:	0552      	lsls	r2, r2, #21
 8006186:	4311      	orrs	r1, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6852      	ldr	r2, [r2, #4]
 800618c:	3a01      	subs	r2, #1
 800618e:	0112      	lsls	r2, r2, #4
 8006190:	430a      	orrs	r2, r1
 8006192:	4921      	ldr	r1, [pc, #132]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006194:	4313      	orrs	r3, r2
 8006196:	614b      	str	r3, [r1, #20]
 8006198:	e014      	b.n	80061c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800619a:	4b1f      	ldr	r3, [pc, #124]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	4b21      	ldr	r3, [pc, #132]	; (8006224 <RCCEx_PLLSAI2_Config+0x1e4>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6892      	ldr	r2, [r2, #8]
 80061a6:	0211      	lsls	r1, r2, #8
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6952      	ldr	r2, [r2, #20]
 80061ac:	0852      	lsrs	r2, r2, #1
 80061ae:	3a01      	subs	r2, #1
 80061b0:	0652      	lsls	r2, r2, #25
 80061b2:	4311      	orrs	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6852      	ldr	r2, [r2, #4]
 80061b8:	3a01      	subs	r2, #1
 80061ba:	0112      	lsls	r2, r2, #4
 80061bc:	430a      	orrs	r2, r1
 80061be:	4916      	ldr	r1, [pc, #88]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061c4:	4b14      	ldr	r3, [pc, #80]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a13      	ldr	r2, [pc, #76]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d0:	f7fc f8bc 	bl	800234c <HAL_GetTick>
 80061d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061d6:	e009      	b.n	80061ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061d8:	f7fc f8b8 	bl	800234c <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d902      	bls.n	80061ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	73fb      	strb	r3, [r7, #15]
          break;
 80061ea:	e005      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ef      	beq.n	80061d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	4904      	ldr	r1, [pc, #16]	; (8006218 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006208:	4313      	orrs	r3, r2
 800620a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	07ff800f 	.word	0x07ff800f
 8006220:	ff9f800f 	.word	0xff9f800f
 8006224:	f9ff800f 	.word	0xf9ff800f

08006228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e042      	b.n	80062c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fa fcc9 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	; 0x24
 8006256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb24 	bl	80068c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f825 	bl	80062c8 <UART_SetConfig>
 800627e:	4603      	mov	r3, r0
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e01b      	b.n	80062c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fba3 	bl	8006a04 <UART_CheckIdleState>
 80062be:	4603      	mov	r3, r0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062cc:	b08c      	sub	sp, #48	; 0x30
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4baa      	ldr	r3, [pc, #680]	; (80065a0 <UART_SetConfig+0x2d8>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006300:	430b      	orrs	r3, r1
 8006302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a9f      	ldr	r2, [pc, #636]	; (80065a4 <UART_SetConfig+0x2dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006330:	4313      	orrs	r3, r2
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800633e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006348:	430b      	orrs	r3, r1
 800634a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f023 010f 	bic.w	r1, r3, #15
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a90      	ldr	r2, [pc, #576]	; (80065a8 <UART_SetConfig+0x2e0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d125      	bne.n	80063b8 <UART_SetConfig+0xf0>
 800636c:	4b8f      	ldr	r3, [pc, #572]	; (80065ac <UART_SetConfig+0x2e4>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d81a      	bhi.n	80063b0 <UART_SetConfig+0xe8>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <UART_SetConfig+0xb8>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006391 	.word	0x08006391
 8006384:	080063a1 	.word	0x080063a1
 8006388:	08006399 	.word	0x08006399
 800638c:	080063a9 	.word	0x080063a9
 8006390:	2301      	movs	r3, #1
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e116      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e112      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e10e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e10a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e106      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a7c      	ldr	r2, [pc, #496]	; (80065b0 <UART_SetConfig+0x2e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d138      	bne.n	8006434 <UART_SetConfig+0x16c>
 80063c2:	4b7a      	ldr	r3, [pc, #488]	; (80065ac <UART_SetConfig+0x2e4>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b0c      	cmp	r3, #12
 80063ce:	d82d      	bhi.n	800642c <UART_SetConfig+0x164>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x110>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800642d 	.word	0x0800642d
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	08006415 	.word	0x08006415
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800642d 	.word	0x0800642d
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006425 	.word	0x08006425
 800640c:	2300      	movs	r3, #0
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006412:	e0d8      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006414:	2302      	movs	r3, #2
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e0d4      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e0d0      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e0cc      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e0c8      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5e      	ldr	r2, [pc, #376]	; (80065b4 <UART_SetConfig+0x2ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d125      	bne.n	800648a <UART_SetConfig+0x1c2>
 800643e:	4b5b      	ldr	r3, [pc, #364]	; (80065ac <UART_SetConfig+0x2e4>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d016      	beq.n	800647a <UART_SetConfig+0x1b2>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d818      	bhi.n	8006482 <UART_SetConfig+0x1ba>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d00a      	beq.n	800646a <UART_SetConfig+0x1a2>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d814      	bhi.n	8006482 <UART_SetConfig+0x1ba>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <UART_SetConfig+0x19a>
 800645c:	2b10      	cmp	r3, #16
 800645e:	d008      	beq.n	8006472 <UART_SetConfig+0x1aa>
 8006460:	e00f      	b.n	8006482 <UART_SetConfig+0x1ba>
 8006462:	2300      	movs	r3, #0
 8006464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006468:	e0ad      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800646a:	2302      	movs	r3, #2
 800646c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006470:	e0a9      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006472:	2304      	movs	r3, #4
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006478:	e0a5      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800647a:	2308      	movs	r3, #8
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006480:	e0a1      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006482:	2310      	movs	r3, #16
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006488:	e09d      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a4a      	ldr	r2, [pc, #296]	; (80065b8 <UART_SetConfig+0x2f0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d125      	bne.n	80064e0 <UART_SetConfig+0x218>
 8006494:	4b45      	ldr	r3, [pc, #276]	; (80065ac <UART_SetConfig+0x2e4>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800649e:	2bc0      	cmp	r3, #192	; 0xc0
 80064a0:	d016      	beq.n	80064d0 <UART_SetConfig+0x208>
 80064a2:	2bc0      	cmp	r3, #192	; 0xc0
 80064a4:	d818      	bhi.n	80064d8 <UART_SetConfig+0x210>
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d00a      	beq.n	80064c0 <UART_SetConfig+0x1f8>
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d814      	bhi.n	80064d8 <UART_SetConfig+0x210>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <UART_SetConfig+0x1f0>
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d008      	beq.n	80064c8 <UART_SetConfig+0x200>
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x210>
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064be:	e082      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e07e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e07a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e076      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e072      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a35      	ldr	r2, [pc, #212]	; (80065bc <UART_SetConfig+0x2f4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d12a      	bne.n	8006540 <UART_SetConfig+0x278>
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <UART_SetConfig+0x2e4>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d01a      	beq.n	8006530 <UART_SetConfig+0x268>
 80064fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fe:	d81b      	bhi.n	8006538 <UART_SetConfig+0x270>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d00c      	beq.n	8006520 <UART_SetConfig+0x258>
 8006506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650a:	d815      	bhi.n	8006538 <UART_SetConfig+0x270>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <UART_SetConfig+0x250>
 8006510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006514:	d008      	beq.n	8006528 <UART_SetConfig+0x260>
 8006516:	e00f      	b.n	8006538 <UART_SetConfig+0x270>
 8006518:	2300      	movs	r3, #0
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e052      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e04e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e04a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e046      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e042      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a17      	ldr	r2, [pc, #92]	; (80065a4 <UART_SetConfig+0x2dc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d13a      	bne.n	80065c0 <UART_SetConfig+0x2f8>
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <UART_SetConfig+0x2e4>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006558:	d01a      	beq.n	8006590 <UART_SetConfig+0x2c8>
 800655a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800655e:	d81b      	bhi.n	8006598 <UART_SetConfig+0x2d0>
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006564:	d00c      	beq.n	8006580 <UART_SetConfig+0x2b8>
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656a:	d815      	bhi.n	8006598 <UART_SetConfig+0x2d0>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <UART_SetConfig+0x2b0>
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d008      	beq.n	8006588 <UART_SetConfig+0x2c0>
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x2d0>
 8006578:	2300      	movs	r3, #0
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657e:	e022      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006586:	e01e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e01a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e016      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e012      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80065a0:	cfff69f3 	.word	0xcfff69f3
 80065a4:	40008000 	.word	0x40008000
 80065a8:	40013800 	.word	0x40013800
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40004400 	.word	0x40004400
 80065b4:	40004800 	.word	0x40004800
 80065b8:	40004c00 	.word	0x40004c00
 80065bc:	40005000 	.word	0x40005000
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4aae      	ldr	r2, [pc, #696]	; (8006884 <UART_SetConfig+0x5bc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f040 8097 	bne.w	8006700 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d823      	bhi.n	8006622 <UART_SetConfig+0x35a>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <UART_SetConfig+0x318>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006623 	.word	0x08006623
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006613 	.word	0x08006613
 80065f4:	08006623 	.word	0x08006623
 80065f8:	08006623 	.word	0x08006623
 80065fc:	08006623 	.word	0x08006623
 8006600:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006604:	f7ff f80c 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8006608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800660a:	e010      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b9e      	ldr	r3, [pc, #632]	; (8006888 <UART_SetConfig+0x5c0>)
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006610:	e00d      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fe ff6d 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 8006616:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800662c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8130 	beq.w	8006896 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	4a94      	ldr	r2, [pc, #592]	; (800688c <UART_SetConfig+0x5c4>)
 800663c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006640:	461a      	mov	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	fbb3 f3f2 	udiv	r3, r3, r2
 8006648:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4413      	add	r3, r2
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	429a      	cmp	r2, r3
 8006658:	d305      	bcc.n	8006666 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800666c:	e113      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	2200      	movs	r2, #0
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	60fa      	str	r2, [r7, #12]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	4a84      	ldr	r2, [pc, #528]	; (800688c <UART_SetConfig+0x5c4>)
 800667c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006680:	b29b      	uxth	r3, r3
 8006682:	2200      	movs	r2, #0
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006690:	f7f9 fdb4 	bl	80001fc <__aeabi_uldivmod>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	020b      	lsls	r3, r1, #8
 80066a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066aa:	0202      	lsls	r2, r0, #8
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	6849      	ldr	r1, [r1, #4]
 80066b0:	0849      	lsrs	r1, r1, #1
 80066b2:	2000      	movs	r0, #0
 80066b4:	460c      	mov	r4, r1
 80066b6:	4605      	mov	r5, r0
 80066b8:	eb12 0804 	adds.w	r8, r2, r4
 80066bc:	eb43 0905 	adc.w	r9, r3, r5
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	469a      	mov	sl, r3
 80066c8:	4693      	mov	fp, r2
 80066ca:	4652      	mov	r2, sl
 80066cc:	465b      	mov	r3, fp
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7f9 fd93 	bl	80001fc <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4613      	mov	r3, r2
 80066dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e4:	d308      	bcc.n	80066f8 <UART_SetConfig+0x430>
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ec:	d204      	bcs.n	80066f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e0ce      	b.n	8006896 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066fe:	e0ca      	b.n	8006896 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006708:	d166      	bne.n	80067d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800670a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800670e:	2b08      	cmp	r3, #8
 8006710:	d827      	bhi.n	8006762 <UART_SetConfig+0x49a>
 8006712:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <UART_SetConfig+0x450>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006763 	.word	0x08006763
 8006728:	08006753 	.word	0x08006753
 800672c:	08006763 	.word	0x08006763
 8006730:	08006763 	.word	0x08006763
 8006734:	08006763 	.word	0x08006763
 8006738:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fe ff70 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8006740:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006742:	e014      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe ff82 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800674a:	e010      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800674c:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <UART_SetConfig+0x5c0>)
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006750:	e00d      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006752:	f7fe fecd 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006758:	e009      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006760:	e005      	b.n	800676e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800676c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8090 	beq.w	8006896 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	4a44      	ldr	r2, [pc, #272]	; (800688c <UART_SetConfig+0x5c4>)
 800677c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006780:	461a      	mov	r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	fbb3 f3f2 	udiv	r3, r3, r2
 8006788:	005a      	lsls	r2, r3, #1
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	441a      	add	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d916      	bls.n	80067d0 <UART_SetConfig+0x508>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a8:	d212      	bcs.n	80067d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f023 030f 	bic.w	r3, r3, #15
 80067b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	b29a      	uxth	r2, r3
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	8bfa      	ldrh	r2, [r7, #30]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e062      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067d6:	e05e      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x56a>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x520>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe ff08 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8006810:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006812:	e014      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fe ff1a 	bl	800564c <HAL_RCC_GetPCLK2Freq>
 8006818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <UART_SetConfig+0x5c0>)
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fe fe65 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800683c:	bf00      	nop
    }

    if (pclk != 0U)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d028      	beq.n	8006896 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	4a10      	ldr	r2, [pc, #64]	; (800688c <UART_SetConfig+0x5c4>)
 800684a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800684e:	461a      	mov	r2, r3
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	fbb3 f2f2 	udiv	r2, r3, r2
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	441a      	add	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d910      	bls.n	8006890 <UART_SetConfig+0x5c8>
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	d20c      	bcs.n	8006890 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	b29a      	uxth	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60da      	str	r2, [r3, #12]
 8006880:	e009      	b.n	8006896 <UART_SetConfig+0x5ce>
 8006882:	bf00      	nop
 8006884:	40008000 	.word	0x40008000
 8006888:	00f42400 	.word	0x00f42400
 800688c:	08006fb0 	.word	0x08006fb0
      }
      else
      {
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2201      	movs	r2, #1
 800689a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2200      	movs	r2, #0
 80068aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3730      	adds	r7, #48	; 0x30
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069be:	d10a      	bne.n	80069d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b098      	sub	sp, #96	; 0x60
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a14:	f7fb fc9a 	bl	800234c <HAL_GetTick>
 8006a18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d12f      	bne.n	8006a88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f88e 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d022      	beq.n	8006a88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a56:	653b      	str	r3, [r7, #80]	; 0x50
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a60:	647b      	str	r3, [r7, #68]	; 0x44
 8006a62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e063      	b.n	8006b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d149      	bne.n	8006b2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f857 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d03c      	beq.n	8006b2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	623b      	str	r3, [r7, #32]
   return(result);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b02:	61fa      	str	r2, [r7, #28]
 8006b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	69b9      	ldr	r1, [r7, #24]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e012      	b.n	8006b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3758      	adds	r7, #88	; 0x58
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b68:	e049      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d045      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b72:	f7fb fbeb 	bl	800234c <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e048      	b.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d031      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d110      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2208      	movs	r2, #8
 8006bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f838 	bl	8006c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e029      	b.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d111      	bne.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f81e 	bl	8006c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e00f      	b.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d0a6      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b095      	sub	sp, #84	; 0x54
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e3      	bne.n	8006c60 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d118      	bne.n	8006cd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f023 0310 	bic.w	r3, r3, #16
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6979      	ldr	r1, [r7, #20]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e6      	bne.n	8006ca0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ce6:	bf00      	nop
 8006ce8:	3754      	adds	r7, #84	; 0x54
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e027      	b.n	8006d58 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2224      	movs	r2, #36	; 0x24
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e02d      	b.n	8006dd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f84f 	bl	8006e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e02d      	b.n	8006e54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2224      	movs	r2, #36	; 0x24
 8006e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f811 	bl	8006e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d108      	bne.n	8006e7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e7c:	e031      	b.n	8006ee2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e7e:	2308      	movs	r3, #8
 8006e80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e82:	2308      	movs	r3, #8
 8006e84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	0e5b      	lsrs	r3, r3, #25
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	0f5b      	lsrs	r3, r3, #29
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	7b3a      	ldrb	r2, [r7, #12]
 8006eaa:	4911      	ldr	r1, [pc, #68]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x94>)
 8006eac:	5c8a      	ldrb	r2, [r1, r2]
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006eb2:	7b3a      	ldrb	r2, [r7, #12]
 8006eb4:	490f      	ldr	r1, [pc, #60]	; (8006ef4 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	7b7a      	ldrb	r2, [r7, #13]
 8006ec8:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <UARTEx_SetNbDataToProcess+0x94>)
 8006eca:	5c8a      	ldrb	r2, [r1, r2]
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ed0:	7b7a      	ldrb	r2, [r7, #13]
 8006ed2:	4908      	ldr	r1, [pc, #32]	; (8006ef4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ed4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	08006fc8 	.word	0x08006fc8
 8006ef4:	08006fd0 	.word	0x08006fd0

08006ef8 <memset>:
 8006ef8:	4402      	add	r2, r0
 8006efa:	4603      	mov	r3, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <__libc_init_array>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4d0d      	ldr	r5, [pc, #52]	; (8006f40 <__libc_init_array+0x38>)
 8006f0c:	4c0d      	ldr	r4, [pc, #52]	; (8006f44 <__libc_init_array+0x3c>)
 8006f0e:	1b64      	subs	r4, r4, r5
 8006f10:	10a4      	asrs	r4, r4, #2
 8006f12:	2600      	movs	r6, #0
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d109      	bne.n	8006f2c <__libc_init_array+0x24>
 8006f18:	4d0b      	ldr	r5, [pc, #44]	; (8006f48 <__libc_init_array+0x40>)
 8006f1a:	4c0c      	ldr	r4, [pc, #48]	; (8006f4c <__libc_init_array+0x44>)
 8006f1c:	f000 f818 	bl	8006f50 <_init>
 8006f20:	1b64      	subs	r4, r4, r5
 8006f22:	10a4      	asrs	r4, r4, #2
 8006f24:	2600      	movs	r6, #0
 8006f26:	42a6      	cmp	r6, r4
 8006f28:	d105      	bne.n	8006f36 <__libc_init_array+0x2e>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f30:	4798      	blx	r3
 8006f32:	3601      	adds	r6, #1
 8006f34:	e7ee      	b.n	8006f14 <__libc_init_array+0xc>
 8006f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3a:	4798      	blx	r3
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	e7f2      	b.n	8006f26 <__libc_init_array+0x1e>
 8006f40:	08006fe0 	.word	0x08006fe0
 8006f44:	08006fe0 	.word	0x08006fe0
 8006f48:	08006fe0 	.word	0x08006fe0
 8006f4c:	08006fe4 	.word	0x08006fe4

08006f50 <_init>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr

08006f5c <_fini>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr
