
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009840  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be4  08009be4  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08009be4  08009be4  00019be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bec  08009bec  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf0  08009bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08009bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  20000108  08009cfc  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  08009cfc  00021fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232a2  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ad2  00000000  00000000  0004341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c88  00000000  00000000  00047ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001624  00000000  00000000  00049b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fadd  00000000  00000000  0004b19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b46  00000000  00000000  0007ac79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f665  00000000  00000000  0009e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b84  00000000  00000000  001bde24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001c59a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000108 	.word	0x20000108
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080099e8 	.word	0x080099e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	080099e8 	.word	0x080099e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000124 	.word	0x20000124
 80005cc:	200001c4 	.word	0x200001c4

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f002 f95d 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f861 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f993 	bl	8000908 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005e2:	f000 f8af 	bl	8000744 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f943 	bl	8000870 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005ea:	f000 f8eb 	bl	80007c4 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_HSENSOR_Init();
 80005ee:	f001 f893 	bl	8001718 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 80005f2:	f001 f8bf 	bl	8001774 <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 80005f6:	f000 ffdf 	bl	80015b8 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 80005fa:	f001 f833 	bl	8001664 <BSP_GYRO_Init>
  BSP_QSPI_Init();
 80005fe:	f001 f8fd 	bl	80017fc <BSP_QSPI_Init>

  if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8000602:	2000      	movs	r0, #0
 8000604:	f001 fa50 	bl	8001aa8 <BSP_QSPI_Erase_Block>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0x42>
	Error_Handler();
 800060e:	f000 fbbf 	bl	8000d90 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <main+0xb8>)
 8000614:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f007 fa74 	bl	8007b1a <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a15      	ldr	r2, [pc, #84]	; (800068c <main+0xbc>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of monitorPB */
  osThreadDef(monitorPB, startMonitorPB, osPriorityNormal, 0, 128);
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <main+0xc0>)
 800063a:	f107 0420 	add.w	r4, r7, #32
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  monitorPBHandle = osThreadCreate(osThread(monitorPB), NULL);
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fa61 	bl	8007b1a <osThreadCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <main+0xc4>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensors */
  osThreadDef(readSensors, startReadSensors, osPriorityNormal, 0, 128);
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <main+0xc8>)
 8000660:	1d3c      	adds	r4, r7, #4
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsHandle = osThreadCreate(osThread(readSensors), NULL);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f007 fa50 	bl	8007b1a <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <main+0xcc>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f007 fa44 	bl	8007b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0xb4>
 8000686:	bf00      	nop
 8000688:	08009a0c 	.word	0x08009a0c
 800068c:	200004fc 	.word	0x200004fc
 8000690:	08009a34 	.word	0x08009a34
 8000694:	20000500 	.word	0x20000500
 8000698:	08009a5c 	.word	0x08009a5c
 800069c:	20000504 	.word	0x20000504

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	; 0x58
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f008 fcc0 	bl	8009034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f004 fb98 	bl	8004df8 <HAL_PWREx_ControlVoltageScaling>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006ce:	f000 fb5f 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d2:	2310      	movs	r3, #16
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006de:	2360      	movs	r3, #96	; 0x60
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006ee:	233c      	movs	r3, #60	; 0x3c
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fc1c 	bl	8004f40 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800070e:	f000 fb3f 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f005 f822 	bl	8005774 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000736:	f000 fb2b 	bl	8000d90 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3758      	adds	r7, #88	; 0x58
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C2_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C2_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C2_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C2_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000780:	f002 fc56 	bl	8003030 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fb01 	bl	8000d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000792:	f003 f9fd 	bl	8003b90 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 faf8 	bl	8000d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C2_Init+0x74>)
 80007a4:	f003 fa3f 	bl	8003c26 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 faef 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200003c4 	.word	0x200003c4
 80007bc:	40005800 	.word	0x40005800
 80007c0:	307075b1 	.word	0x307075b1

080007c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007da:	4a24      	ldr	r2, [pc, #144]	; (800086c <MX_OCTOSPI1_Init+0xa8>)
 80007dc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007f0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 800080c:	2201      	movs	r2, #1
 800080e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000824:	2208      	movs	r2, #8
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 800082a:	f003 fa49 	bl	8003cc0 <HAL_OSPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 faac 	bl	8000d90 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000840:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000844:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	f241 3288 	movw	r2, #5000	; 0x1388
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_OCTOSPI1_Init+0xa4>)
 8000850:	f003 fd34 	bl	80042bc <HAL_OSPIM_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800085a:	f000 fa99 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000418 	.word	0x20000418
 800086c:	a0001000 	.word	0xa0001000

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_USART1_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ba:	f006 fa17 	bl	8006cec <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 fa64 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008cc:	f007 f83c 	bl	8007948 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 fa5b 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008de:	f007 f871 	bl	80079c4 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 fa52 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ee:	f006 fff2 	bl	80078d6 <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 fa4a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000468 	.word	0x20000468
 8000904:	40013800 	.word	0x40013800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a32      	ldr	r2, [pc, #200]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_GPIO_Init+0xe4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a2c      	ldr	r2, [pc, #176]	; (80009ec <MX_GPIO_Init+0xe4>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <MX_GPIO_Init+0xe4>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0xe4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xe8>)
 800096c:	f002 fb30 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	481f      	ldr	r0, [pc, #124]	; (80009f4 <MX_GPIO_Init+0xec>)
 8000978:	f002 fb2a 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : errorLED_Pin */
  GPIO_InitStruct.Pin = errorLED_Pin;
 800097c:	2308      	movs	r3, #8
 800097e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(errorLED_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_GPIO_Init+0xe8>)
 8000994:	f002 f898 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushbutton_Pin */
  GPIO_InitStruct.Pin = pushbutton_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(pushbutton_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0xf0>)
 80009b0:	f002 f88a 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80009b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_GPIO_Init+0xec>)
 80009ce:	f002 f87b 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2105      	movs	r1, #5
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	f002 f84c 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f002 f865 	bl	8002aac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48001000 	.word	0x48001000
 80009f4:	48000400 	.word	0x48000400
 80009f8:	48000800 	.word	0x48000800

080009fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	sensor = (sensor + 1)%5;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a12:	1059      	asrs	r1, r3, #1
 8000a14:	17d3      	asrs	r3, r2, #31
 8000a16:	1ac9      	subs	r1, r1, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	1ad1      	subs	r1, r2, r3
 8000a20:	b2ca      	uxtb	r2, r1
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a24:	701a      	strb	r2, [r3, #0]

}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000058c 	.word	0x2000058c
 8000a38:	66666667 	.word	0x66666667

08000a3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f007 f8b4 	bl	8007bb2 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t*) str_hum, sizeof(str_hum), HAL_MAX_DELAY);
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2264      	movs	r2, #100	; 0x64
 8000a50:	4902      	ldr	r1, [pc, #8]	; (8000a5c <StartDefaultTask+0x20>)
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <StartDefaultTask+0x24>)
 8000a54:	f006 f99a 	bl	8006d8c <HAL_UART_Transmit>
	  osDelay(100);
 8000a58:	e7f4      	b.n	8000a44 <StartDefaultTask+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	20000528 	.word	0x20000528
 8000a60:	20000468 	.word	0x20000468

08000a64 <startMonitorPB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMonitorPB */
void startMonitorPB(void const * argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMonitorPB */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f007 f8a0 	bl	8007bb2 <osDelay>
	  switch(sensor){
 8000a72:	4b6d      	ldr	r3, [pc, #436]	; (8000c28 <startMonitorPB+0x1c4>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d8f8      	bhi.n	8000a6c <startMonitorPB+0x8>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <startMonitorPB+0x1c>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a95 	.word	0x08000a95
 8000a84:	08000abd 	.word	0x08000abd
 8000a88:	08000aef 	.word	0x08000aef
 8000a8c:	08000b45 	.word	0x08000b45
 8000a90:	08000b77 	.word	0x08000b77
	  	  case 0:
	  		  memset(str_hum, '\0', sizeof(str_hum));
 8000a94:	2264      	movs	r2, #100	; 0x64
 8000a96:	2100      	movs	r1, #0
 8000a98:	4864      	ldr	r0, [pc, #400]	; (8000c2c <startMonitorPB+0x1c8>)
 8000a9a:	f008 facb 	bl	8009034 <memset>
	  		  snprintf(str_hum, 100, "The humidity is %d\n\r", (uint8_t)humidity);
 8000a9e:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <startMonitorPB+0x1cc>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa8:	edc7 7a00 	vstr	s15, [r7]
 8000aac:	783b      	ldrb	r3, [r7, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <startMonitorPB+0x1d0>)
 8000ab2:	2164      	movs	r1, #100	; 0x64
 8000ab4:	485d      	ldr	r0, [pc, #372]	; (8000c2c <startMonitorPB+0x1c8>)
 8000ab6:	f008 fa89 	bl	8008fcc <sniprintf>
	  		  break;
 8000aba:	e0b4      	b.n	8000c26 <startMonitorPB+0x1c2>
	  	  case 1:
	  		  memset(str_hum, '\0', sizeof(str_hum));
 8000abc:	2264      	movs	r2, #100	; 0x64
 8000abe:	2100      	movs	r1, #0
 8000ac0:	485a      	ldr	r0, [pc, #360]	; (8000c2c <startMonitorPB+0x1c8>)
 8000ac2:	f008 fab7 	bl	8009034 <memset>
	  		  snprintf(str_hum, 100, "The accelerometer reports that: x = %d, y = %d, z = %d\n\r", accel[0], accel[1], accel[2]);
 8000ac6:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <startMonitorPB+0x1d4>)
 8000ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <startMonitorPB+0x1d4>)
 8000ad0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <startMonitorPB+0x1d4>)
 8000ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4a56      	ldr	r2, [pc, #344]	; (8000c3c <startMonitorPB+0x1d8>)
 8000ae4:	2164      	movs	r1, #100	; 0x64
 8000ae6:	4851      	ldr	r0, [pc, #324]	; (8000c2c <startMonitorPB+0x1c8>)
 8000ae8:	f008 fa70 	bl	8008fcc <sniprintf>
	  		  break;
 8000aec:	e09b      	b.n	8000c26 <startMonitorPB+0x1c2>
	  	  case 2:
	  		  memset(str_hum, '\0', sizeof(str_hum));
 8000aee:	2264      	movs	r2, #100	; 0x64
 8000af0:	2100      	movs	r1, #0
 8000af2:	484e      	ldr	r0, [pc, #312]	; (8000c2c <startMonitorPB+0x1c8>)
 8000af4:	f008 fa9e 	bl	8009034 <memset>
	  		  snprintf(str_hum, 100, "The gyroscope reports that: x = %d, y = %d, z = %d\n\r",(uint8_t)gyro[0],(uint8_t)gyro[1],(uint8_t)gyro[2]);
 8000af8:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <startMonitorPB+0x1dc>)
 8000afa:	edd3 7a00 	vldr	s15, [r3]
 8000afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b02:	edc7 7a00 	vstr	s15, [r7]
 8000b06:	783b      	ldrb	r3, [r7, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <startMonitorPB+0x1dc>)
 8000b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b16:	edc7 7a00 	vstr	s15, [r7]
 8000b1a:	783b      	ldrb	r3, [r7, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <startMonitorPB+0x1dc>)
 8000b22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2a:	edc7 7a00 	vstr	s15, [r7]
 8000b2e:	783b      	ldrb	r3, [r7, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	9200      	str	r2, [sp, #0]
 8000b36:	460b      	mov	r3, r1
 8000b38:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <startMonitorPB+0x1e0>)
 8000b3a:	2164      	movs	r1, #100	; 0x64
 8000b3c:	483b      	ldr	r0, [pc, #236]	; (8000c2c <startMonitorPB+0x1c8>)
 8000b3e:	f008 fa45 	bl	8008fcc <sniprintf>
	  		 break;
 8000b42:	e070      	b.n	8000c26 <startMonitorPB+0x1c2>
	  	  case 3:
	  		  memset(str_hum, '\0', sizeof(str_hum));
 8000b44:	2264      	movs	r2, #100	; 0x64
 8000b46:	2100      	movs	r1, #0
 8000b48:	4838      	ldr	r0, [pc, #224]	; (8000c2c <startMonitorPB+0x1c8>)
 8000b4a:	f008 fa73 	bl	8009034 <memset>
	  		  snprintf(str_hum, 100, "The magnetometer reports: x = %d, y = %d, z = %d\n\r", magneto[0], magneto[1], magneto[2]);
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <startMonitorPB+0x1e4>)
 8000b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <startMonitorPB+0x1e4>)
 8000b58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <startMonitorPB+0x1e4>)
 8000b60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4a38      	ldr	r2, [pc, #224]	; (8000c4c <startMonitorPB+0x1e8>)
 8000b6c:	2164      	movs	r1, #100	; 0x64
 8000b6e:	482f      	ldr	r0, [pc, #188]	; (8000c2c <startMonitorPB+0x1c8>)
 8000b70:	f008 fa2c 	bl	8008fcc <sniprintf>
	  		 break;
 8000b74:	e057      	b.n	8000c26 <startMonitorPB+0x1c2>
	  	  case 4:
	  		 size = if_wrap_around*100 + (if_wrap_around==0)*INDEX;
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <startMonitorPB+0x1ec>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	0091      	lsls	r1, r2, #2
 8000b84:	461a      	mov	r2, r3
 8000b86:	460b      	mov	r3, r1
 8000b88:	4413      	add	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <startMonitorPB+0x1ec>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf0c      	ite	eq
 8000b96:	2301      	moveq	r3, #1
 8000b98:	2300      	movne	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	b2d9      	uxtb	r1, r3
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <startMonitorPB+0x1f0>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	fb11 f303 	smulbb	r3, r1, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <startMonitorPB+0x1f4>)
 8000bae:	701a      	strb	r2, [r3, #0]
//	  			 size = 100;
//	  		 }
//	  		 else{
//	  			 size = INDEX;
//	  		 }
	  		 if(BSP_QSPI_Read(humidity_array, HUMM_ADD, sizeof(float)*100)!= QSPI_OK){
 8000bb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4829      	ldr	r0, [pc, #164]	; (8000c5c <startMonitorPB+0x1f8>)
 8000bb8:	f000 fe9e 	bl	80018f8 <BSP_QSPI_Read>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <startMonitorPB+0x162>
	  			 Error_Handler();
 8000bc2:	f000 f8e5 	bl	8000d90 <Error_Handler>
	  		 }
	  		 if(BSP_QSPI_Read(accel_array, ACCEL_ADD, sizeof(int16_t)*100)!= QSPI_OK){
 8000bc6:	22c8      	movs	r2, #200	; 0xc8
 8000bc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000bcc:	4824      	ldr	r0, [pc, #144]	; (8000c60 <startMonitorPB+0x1fc>)
 8000bce:	f000 fe93 	bl	80018f8 <BSP_QSPI_Read>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <startMonitorPB+0x178>
	  			  Error_Handler();
 8000bd8:	f000 f8da 	bl	8000d90 <Error_Handler>
	  		 }
	  		 if(BSP_QSPI_Read(gyro_array, GYRO_ADD, sizeof(float)*100)!= QSPI_OK){
 8000bdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000be0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <startMonitorPB+0x200>)
 8000be6:	f000 fe87 	bl	80018f8 <BSP_QSPI_Read>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <startMonitorPB+0x190>
	  			 Error_Handler();
 8000bf0:	f000 f8ce 	bl	8000d90 <Error_Handler>
	  		 }
	  		 if(BSP_QSPI_Read(magneto_array, MAGNO_ADD, sizeof(int16_t)*100)!= QSPI_OK){
 8000bf4:	22c8      	movs	r2, #200	; 0xc8
 8000bf6:	f640 0198 	movw	r1, #2200	; 0x898
 8000bfa:	481b      	ldr	r0, [pc, #108]	; (8000c68 <startMonitorPB+0x204>)
 8000bfc:	f000 fe7c 	bl	80018f8 <BSP_QSPI_Read>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <startMonitorPB+0x1a6>
	  			Error_Handler();
 8000c06:	f000 f8c3 	bl	8000d90 <Error_Handler>
	  		 }

	  		 //mean
	  		 for (int i = 0; i < size; i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e002      	b.n	8000c16 <startMonitorPB+0x1b2>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <startMonitorPB+0x1f4>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	dbf6      	blt.n	8000c10 <startMonitorPB+0x1ac>

	  		 }
	  		 break;
 8000c22:	bf00      	nop
 8000c24:	e722      	b.n	8000a6c <startMonitorPB+0x8>
	  osDelay(1);
 8000c26:	e721      	b.n	8000a6c <startMonitorPB+0x8>
 8000c28:	2000058c 	.word	0x2000058c
 8000c2c:	20000528 	.word	0x20000528
 8000c30:	20000508 	.word	0x20000508
 8000c34:	08009a78 	.word	0x08009a78
 8000c38:	2000050c 	.word	0x2000050c
 8000c3c:	08009a90 	.word	0x08009a90
 8000c40:	20000514 	.word	0x20000514
 8000c44:	08009acc 	.word	0x08009acc
 8000c48:	20000520 	.word	0x20000520
 8000c4c:	08009b04 	.word	0x08009b04
 8000c50:	2000058e 	.word	0x2000058e
 8000c54:	2000058d 	.word	0x2000058d
 8000c58:	2000058f 	.word	0x2000058f
 8000c5c:	20000590 	.word	0x20000590
 8000c60:	20000720 	.word	0x20000720
 8000c64:	20000978 	.word	0x20000978
 8000c68:	20000e28 	.word	0x20000e28

08000c6c <startReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadSensors */
void startReadSensors(void const * argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadSensors */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f006 ff9c 	bl	8007bb2 <osDelay>
	humidity = BSP_HSENSOR_ReadHumidity();
 8000c7a:	f000 fd6d 	bl	8001758 <BSP_HSENSOR_ReadHumidity>
 8000c7e:	eef0 7a40 	vmov.f32	s15, s0
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <startReadSensors+0xe4>)
 8000c84:	edc3 7a00 	vstr	s15, [r3]
	BSP_ACCELERO_AccGetXYZ(accel);
 8000c88:	4832      	ldr	r0, [pc, #200]	; (8000d54 <startReadSensors+0xe8>)
 8000c8a:	f000 fcd3 	bl	8001634 <BSP_ACCELERO_AccGetXYZ>
	BSP_GYRO_GetXYZ(gyro);
 8000c8e:	4832      	ldr	r0, [pc, #200]	; (8000d58 <startReadSensors+0xec>)
 8000c90:	f000 fd2a 	bl	80016e8 <BSP_GYRO_GetXYZ>
	BSP_MAGNETO_GetXYZ(magneto);
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <startReadSensors+0xf0>)
 8000c96:	f000 fd99 	bl	80017cc <BSP_MAGNETO_GetXYZ>

	//write the values into memory
	if (sensor != 4){
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <startReadSensors+0xf4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d0e8      	beq.n	8000c74 <startReadSensors+0x8>
		if(BSP_QSPI_Write(&humidity, HUMM_ADD + INDEX*sizeof(float), sizeof(float)) != QSPI_OK){
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <startReadSensors+0xf8>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <startReadSensors+0xe4>)
 8000cae:	f000 fe75 	bl	800199c <BSP_QSPI_Write>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <startReadSensors+0x50>
			Error_Handler();
 8000cb8:	f000 f86a 	bl	8000d90 <Error_Handler>
		}
		if(BSP_QSPI_Write(accel, ACCEL_ADD + INDEX*sizeof(int16_t)*3, sizeof(int16_t)*3) != QSPI_OK){
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <startReadSensors+0xf8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000cce:	2206      	movs	r2, #6
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <startReadSensors+0xe8>)
 8000cd4:	f000 fe62 	bl	800199c <BSP_QSPI_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <startReadSensors+0x76>
			Error_Handler();
 8000cde:	f000 f857 	bl	8000d90 <Error_Handler>
		}
		if(BSP_QSPI_Write(gyro, GYRO_ADD + INDEX*sizeof(float)*3, sizeof(float)*3) != QSPI_OK){
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <startReadSensors+0xf8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cf4:	220c      	movs	r2, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4817      	ldr	r0, [pc, #92]	; (8000d58 <startReadSensors+0xec>)
 8000cfa:	f000 fe4f 	bl	800199c <BSP_QSPI_Write>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <startReadSensors+0x9c>
			Error_Handler();
 8000d04:	f000 f844 	bl	8000d90 <Error_Handler>
		}
		if(BSP_QSPI_Write(magneto, MAGNO_ADD + INDEX*sizeof(int16_t)*3, sizeof(int16_t)*3) != QSPI_OK){
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <startReadSensors+0xf8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480f      	ldr	r0, [pc, #60]	; (8000d5c <startReadSensors+0xf0>)
 8000d20:	f000 fe3c 	bl	800199c <BSP_QSPI_Write>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <startReadSensors+0xc2>
			Error_Handler();
 8000d2a:	f000 f831 	bl	8000d90 <Error_Handler>
		}
		// Increment INDEX and set wrap around to true (1)
		INDEX++;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <startReadSensors+0xf8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <startReadSensors+0xf8>)
 8000d38:	701a      	strb	r2, [r3, #0]
		if (INDEX == 100){
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <startReadSensors+0xf8>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d198      	bne.n	8000c74 <startReadSensors+0x8>
			if_wrap_around = 1;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <startReadSensors+0xfc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
			INDEX = 0;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <startReadSensors+0xf8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8000d4e:	e791      	b.n	8000c74 <startReadSensors+0x8>
 8000d50:	20000508 	.word	0x20000508
 8000d54:	2000050c 	.word	0x2000050c
 8000d58:	20000514 	.word	0x20000514
 8000d5c:	20000520 	.word	0x20000520
 8000d60:	2000058c 	.word	0x2000058c
 8000d64:	2000058d 	.word	0x2000058d
 8000d68:	2000058e 	.word	0x2000058e

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7e:	f001 fda1 	bl	80028c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40001000 	.word	0x40001000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <Error_Handler+0x18>)
 8000d9a:	f002 f919 	bl	8002fd0 <HAL_GPIO_WritePin>
	__BKPT();
 8000d9e:	be00      	bkpt	0x0000
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x14>
 8000da6:	bf00      	nop
 8000da8:	48001000 	.word	0x48001000

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_MspInit+0x4c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_MspInit+0x4c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_MspInit+0x4c>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	210f      	movs	r1, #15
 8000de6:	f06f 0001 	mvn.w	r0, #1
 8000dea:	f001 fe43 	bl	8002a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ae      	sub	sp, #184	; 0xb8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	2294      	movs	r2, #148	; 0x94
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f008 f909 	bl	8009034 <memset>
  if(hi2c->Instance==I2C2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <HAL_I2C_MspInit+0xb0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d13b      	bne.n	8000ea4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 ff8b 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e44:	f7ff ffa4 	bl	8000d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <HAL_I2C_MspInit+0xb8>)
 8000e88:	f001 fe1e 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e96:	6593      	str	r3, [r2, #88]	; 0x58
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_I2C_MspInit+0xb4>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b8      	adds	r7, #184	; 0xb8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_I2C_MspDeInit+0x3c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10f      	bne.n	8000eea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_I2C_MspDeInit+0x40>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_I2C_MspDeInit+0x40>)
 8000ed0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <HAL_I2C_MspDeInit+0x44>)
 8000edc:	f001 ff86 	bl	8002dec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_I2C_MspDeInit+0x44>)
 8000ee6:	f001 ff81 	bl	8002dec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400

08000f00 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b0      	sub	sp, #192	; 0xc0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	2294      	movs	r2, #148	; 0x94
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f008 f887 	bl	8009034 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_OSPI_MspInit+0xcc>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d149      	bne.n	8000fc4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 ff07 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f4c:	f7ff ff20 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6513      	str	r3, [r2, #80]	; 0x50
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_OSPI_MspInit+0xd0>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000f98:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_OSPI_MspInit+0xd4>)
 8000fc0:	f001 fd82 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	37c0      	adds	r7, #192	; 0xc0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	a0001000 	.word	0xa0001000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48001000 	.word	0x48001000

08000fd8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_OSPI_MspDeInit+0x3c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d110      	bne.n	800100c <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_OSPI_MspDeInit+0x40>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_OSPI_MspDeInit+0x40>)
 8000ff0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_OSPI_MspDeInit+0x40>)
 8000ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_OSPI_MspDeInit+0x40>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001000:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001002:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_OSPI_MspDeInit+0x44>)
 8001008:	f001 fef0 	bl	8002dec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	a0001000 	.word	0xa0001000
 8001018:	40021000 	.word	0x40021000
 800101c:	48001000 	.word	0x48001000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ae      	sub	sp, #184	; 0xb8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2294      	movs	r2, #148	; 0x94
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f007 fff7 	bl	8009034 <memset>
  if(huart->Instance==USART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_UART_MspInit+0xb0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13a      	bne.n	80010c6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001054:	2300      	movs	r3, #0
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fe79 	bl	8005d54 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff fe92 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6613      	str	r3, [r2, #96]	; 0x60
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_UART_MspInit+0xb4>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109c:	23c0      	movs	r3, #192	; 0xc0
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_MspInit+0xb8>)
 80010c2:	f001 fd01 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	37b8      	adds	r7, #184	; 0xb8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400

080010dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_InitTick+0xe0>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_InitTick+0xe0>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6593      	str	r3, [r2, #88]	; 0x58
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_InitTick+0xe0>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001102:	f107 0210 	add.w	r2, r7, #16
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fd2f 	bl	8005b70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800111c:	f004 fcfc 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8001120:	6378      	str	r0, [r7, #52]	; 0x34
 8001122:	e004      	b.n	800112e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001124:	f004 fcf8 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_InitTick+0xe4>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3b01      	subs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_InitTick+0xe8>)
 800113e:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <HAL_InitTick+0xec>)
 8001140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_InitTick+0xe8>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_InitTick+0xe8>)
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_InitTick+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_InitTick+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_InitTick+0xe8>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <HAL_InitTick+0xe8>)
 8001164:	f005 fb0e 	bl	8006784 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800116e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11b      	bne.n	80011ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <HAL_InitTick+0xe8>)
 8001178:	f005 fb66 	bl	8006848 <HAL_TIM_Base_Start_IT>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001186:	2b00      	cmp	r3, #0
 8001188:	d111      	bne.n	80011ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800118a:	2036      	movs	r0, #54	; 0x36
 800118c:	f001 fc8e 	bl	8002aac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d808      	bhi.n	80011a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001196:	2200      	movs	r2, #0
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2036      	movs	r0, #54	; 0x36
 800119c:	f001 fc6a 	bl	8002a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_InitTick+0xf0>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e002      	b.n	80011ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3738      	adds	r7, #56	; 0x38
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	20001080 	.word	0x20001080
 80011c8:	40001000 	.word	0x40001000
 80011cc:	200000ac 	.word	0x200000ac

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>
	...

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <HardFault_Handler+0x14>)
 80011e2:	f001 fef5 	bl	8002fd0 <HAL_GPIO_WritePin>
	__BKPT();
 80011e6:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <HardFault_Handler+0x10>
 80011ea:	bf00      	nop
 80011ec:	48001000 	.word	0x48001000

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushbutton_Pin);
 8001214:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001218:	f001 fef2 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM6_DAC_IRQHandler+0x10>)
 8001226:	f005 fb7f 	bl	8006928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001080 	.word	0x20001080

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f007 ff44 	bl	80090f0 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200a0000 	.word	0x200a0000
 8001294:	00000400 	.word	0x00000400
 8001298:	200010cc 	.word	0x200010cc
 800129c:	20001fe0 	.word	0x20001fe0

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffea 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f007 ff03 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff f96b 	bl	80005d0 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001308:	08009bf4 	.word	0x08009bf4
  ldr r2, =_sbss
 800130c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001310:	20001fdc 	.word	0x20001fdc

08001314 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_IRQHandler>
	...

08001318 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <I2Cx_MspInit+0xa8>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001338:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800133c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800134a:	2304      	movs	r3, #4
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <I2Cx_MspInit+0xac>)
 8001356:	f001 fbb7 	bl	8002ac8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4818      	ldr	r0, [pc, #96]	; (80013c4 <I2Cx_MspInit+0xac>)
 8001362:	f001 fbb1 	bl	8002ac8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <I2Cx_MspInit+0xa8>)
 800136c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001370:	6593      	str	r3, [r2, #88]	; 0x58
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <I2Cx_MspInit+0xa8>)
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <I2Cx_MspInit+0xa8>)
 8001390:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001394:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	210f      	movs	r1, #15
 800139a:	2021      	movs	r0, #33	; 0x21
 800139c:	f001 fb6a 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80013a0:	2021      	movs	r0, #33	; 0x21
 80013a2:	f001 fb83 	bl	8002aac <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	2022      	movs	r0, #34	; 0x22
 80013ac:	f001 fb62 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80013b0:	2022      	movs	r0, #34	; 0x22
 80013b2:	f001 fb7b 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <I2Cx_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <I2Cx_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff89 	bl	8001318 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f001 fe12 	bl	8003030 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f002 fbbe 	bl	8003b90 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40005800 	.word	0x40005800
 8001420:	00702681 	.word	0x00702681

08001424 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af04      	add	r7, sp, #16
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4603      	mov	r3, r0
 8001434:	72fb      	strb	r3, [r7, #11]
 8001436:	460b      	mov	r3, r1
 8001438:	813b      	strh	r3, [r7, #8]
 800143a:	4613      	mov	r3, r2
 800143c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	b299      	uxth	r1, r3
 8001446:	88f8      	ldrh	r0, [r7, #6]
 8001448:	893a      	ldrh	r2, [r7, #8]
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4603      	mov	r3, r0
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f001 ffc6 	bl	80033ec <HAL_I2C_Mem_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800146a:	7afb      	ldrb	r3, [r7, #11]
 800146c:	4619      	mov	r1, r3
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f832 	bl	80014d8 <I2Cx_Error>
  }
  return status;
 8001474:	7dfb      	ldrb	r3, [r7, #23]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b08a      	sub	sp, #40	; 0x28
 8001482:	af04      	add	r7, sp, #16
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	4608      	mov	r0, r1
 8001488:	4611      	mov	r1, r2
 800148a:	461a      	mov	r2, r3
 800148c:	4603      	mov	r3, r0
 800148e:	72fb      	strb	r3, [r7, #11]
 8001490:	460b      	mov	r3, r1
 8001492:	813b      	strh	r3, [r7, #8]
 8001494:	4613      	mov	r3, r2
 8001496:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	b299      	uxth	r1, r3
 80014a0:	88f8      	ldrh	r0, [r7, #6]
 80014a2:	893a      	ldrh	r2, [r7, #8]
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4603      	mov	r3, r0
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f001 fe85 	bl	80031c4 <HAL_I2C_Mem_Write>
 80014ba:	4603      	mov	r3, r0
 80014bc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80014c4:	7afb      	ldrb	r3, [r7, #11]
 80014c6:	4619      	mov	r1, r3
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f805 	bl	80014d8 <I2Cx_Error>
  }
  return status;
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 fe3e 	bl	8003166 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff6c 	bl	80013c8 <I2Cx_Init>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <SENSOR_IO_Init+0x10>)
 80014fe:	f7ff ff63 	bl	80013c8 <I2Cx_Init>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200010d0 	.word	0x200010d0

0800150c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	460b      	mov	r3, r1
 8001518:	71bb      	strb	r3, [r7, #6]
 800151a:	4613      	mov	r3, r2
 800151c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	b29a      	uxth	r2, r3
 8001522:	79f9      	ldrb	r1, [r7, #7]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	1d7b      	adds	r3, r7, #5
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <SENSOR_IO_Write+0x30>)
 8001530:	f7ff ffa5 	bl	800147e <I2Cx_WriteMultiple>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200010d0 	.word	0x200010d0

08001540 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	b29a      	uxth	r2, r3
 8001558:	79f9      	ldrb	r1, [r7, #7]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030f 	add.w	r3, r7, #15
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <SENSOR_IO_Read+0x38>)
 8001568:	f7ff ff5c 	bl	8001424 <I2Cx_ReadMultiple>

  return read_value;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200010d0 	.word	0x200010d0

0800157c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
 8001582:	603a      	str	r2, [r7, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
 800158a:	460b      	mov	r3, r1
 800158c:	71bb      	strb	r3, [r7, #6]
 800158e:	4613      	mov	r3, r2
 8001590:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	b29a      	uxth	r2, r3
 8001596:	79f9      	ldrb	r1, [r7, #7]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <SENSOR_IO_ReadMultiple+0x38>)
 80015a4:	f7ff ff3e 	bl	8001424 <I2Cx_ReadMultiple>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200010d0 	.word	0x200010d0

080015b8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80015c2:	2300      	movs	r3, #0
 80015c4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <BSP_ACCELERO_Init+0x74>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4798      	blx	r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b6a      	cmp	r3, #106	; 0x6a
 80015d0:	d002      	beq.n	80015d8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e024      	b.n	8001622 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <BSP_ACCELERO_Init+0x78>)
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <BSP_ACCELERO_Init+0x74>)
 80015dc:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80015de:	2330      	movs	r3, #48	; 0x30
 80015e0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80015e6:	2300      	movs	r3, #0
 80015e8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80015f6:	797a      	ldrb	r2, [r7, #5]
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001600:	7a3b      	ldrb	r3, [r7, #8]
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	b2db      	uxtb	r3, r3
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <BSP_ACCELERO_Init+0x78>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	89ba      	ldrh	r2, [r7, #12]
 800161e:	4610      	mov	r0, r2
 8001620:	4798      	blx	r3
  }  

  return ret;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000044 	.word	0x20000044
 8001630:	20001124 	.word	0x20001124

08001634 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
    }
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20001124 	.word	0x20001124

08001664 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800166e:	2300      	movs	r3, #0
 8001670:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <BSP_GYRO_Init+0x7c>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4798      	blx	r3
 8001678:	4603      	mov	r3, r0
 800167a:	2b6a      	cmp	r3, #106	; 0x6a
 800167c:	d002      	beq.n	8001684 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e028      	b.n	80016d6 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <BSP_GYRO_Init+0x80>)
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <BSP_GYRO_Init+0x7c>)
 8001688:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800168e:	2330      	movs	r3, #48	; 0x30
 8001690:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80016a2:	230c      	movs	r3, #12
 80016a4:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80016a6:	7aba      	ldrb	r2, [r7, #10]
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80016b0:	7a3b      	ldrb	r3, [r7, #8]
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <BSP_GYRO_Init+0x80>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	89ba      	ldrh	r2, [r7, #12]
 80016ce:	4610      	mov	r0, r2
 80016d0:	4798      	blx	r3
    
    ret = GYRO_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000078 	.word	0x20000078
 80016e4:	20001128 	.word	0x20001128

080016e8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <BSP_GYRO_GetXYZ+0x2c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <BSP_GYRO_GetXYZ+0x2c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <BSP_GYRO_GetXYZ+0x2c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
    }
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20001128 	.word	0x20001128

08001718 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <BSP_HSENSOR_Init+0x38>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	20be      	movs	r0, #190	; 0xbe
 8001724:	4798      	blx	r3
 8001726:	4603      	mov	r3, r0
 8001728:	2bbc      	cmp	r3, #188	; 0xbc
 800172a:	d002      	beq.n	8001732 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	e009      	b.n	8001746 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <BSP_HSENSOR_Init+0x3c>)
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <BSP_HSENSOR_Init+0x38>)
 8001736:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <BSP_HSENSOR_Init+0x3c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	20be      	movs	r0, #190	; 0xbe
 8001740:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000004 	.word	0x20000004
 8001754:	2000112c 	.word	0x2000112c

08001758 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <BSP_HSENSOR_ReadHumidity+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	20be      	movs	r0, #190	; 0xbe
 8001764:	4798      	blx	r3
 8001766:	eef0 7a40 	vmov.f32	s15, s0
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000112c 	.word	0x2000112c

08001774 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <BSP_MAGNETO_Init+0x50>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4798      	blx	r3
 8001784:	4603      	mov	r3, r0
 8001786:	2b3d      	cmp	r3, #61	; 0x3d
 8001788:	d002      	beq.n	8001790 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e013      	b.n	80017b8 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <BSP_MAGNETO_Init+0x54>)
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <BSP_MAGNETO_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001796:	2358      	movs	r3, #88	; 0x58
 8001798:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800179a:	2300      	movs	r3, #0
 800179c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800179e:	2300      	movs	r3, #0
 80017a0:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80017a2:	2308      	movs	r3, #8
 80017a4:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <BSP_MAGNETO_Init+0x54>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	463a      	mov	r2, r7
 80017b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b6:	4798      	blx	r3
  } 

  return ret;  
 80017b8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000010 	.word	0x20000010
 80017c8:	20001130 	.word	0x20001130

080017cc <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20001130 	.word	0x20001130

080017fc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001804:	4a3b      	ldr	r2, [pc, #236]	; (80018f4 <BSP_QSPI_Init+0xf8>)
 8001806:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8001808:	4839      	ldr	r0, [pc, #228]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800180a:	f002 fb03 	bl	8003e14 <HAL_OSPI_DeInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e067      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001818:	f000 f990 	bl	8001b3c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800181e:	2204      	movs	r2, #4
 8001820:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8001828:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800182a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001834:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8001848:	2320      	movs	r3, #32
 800184a:	e003      	b.n	8001854 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8001854:	461a      	mov	r2, r3
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001858:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800186e:	2204      	movs	r2, #4
 8001870:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800187a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800188e:	f002 fa17 	bl	8003cc0 <HAL_OSPI_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e025      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 800189e:	f000 f98d 	bl	8001bbc <QSPI_ResetMemory>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80018a8:	2304      	movs	r3, #4
 80018aa:	e01d      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80018ac:	2101      	movs	r1, #1
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 80018b0:	f000 fa72 	bl	8001d98 <QSPI_QuadMode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e014      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80018be:	2101      	movs	r1, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 80018c2:	f000 fb15 	bl	8001ef0 <QSPI_HighPerfMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e00b      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <BSP_QSPI_Init+0xf4>)
 80018d8:	f002 f9f2 	bl	8003cc0 <HAL_OSPI_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20001134 	.word	0x20001134
 80018f4:	a0001000 	.word	0xa0001000

080018f8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b098      	sub	sp, #96	; 0x60
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800190c:	23eb      	movs	r3, #235	; 0xeb
 800190e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8001920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8001930:	23aa      	movs	r3, #170	; 0xaa
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8001934:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800193a:	2300      	movs	r3, #0
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8001942:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001950:	2304      	movs	r3, #4
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001958:	2300      	movs	r3, #0
 800195a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4619      	mov	r1, r3
 8001966:	480c      	ldr	r0, [pc, #48]	; (8001998 <BSP_QSPI_Read+0xa0>)
 8001968:	f002 fa7b 	bl	8003e62 <HAL_OSPI_Command>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00b      	b.n	800198e <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <BSP_QSPI_Read+0xa0>)
 800197e:	f002 fb64 	bl	800404a <HAL_OSPI_Receive>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3760      	adds	r7, #96	; 0x60
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20001134 	.word	0x20001134

0800199c <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09c      	sub	sp, #112	; 0x70
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80019b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d901      	bls.n	80019be <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80019d2:	2338      	movs	r3, #56	; 0x38
 80019d4:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80019e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80019f6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8001a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8001a14:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <BSP_QSPI_Write+0x108>)
 8001a16:	f000 f918 	bl	8001c4a <QSPI_WriteEnable>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e03b      	b.n	8001a9c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <BSP_QSPI_Write+0x108>)
 8001a30:	f002 fa17 	bl	8003e62 <HAL_OSPI_Command>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e02e      	b.n	8001a9c <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <BSP_QSPI_Write+0x108>)
 8001a46:	f002 fa8d 	bl	8003f64 <HAL_OSPI_Transmit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e023      	b.n	8001a9c <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001a54:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a58:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <BSP_QSPI_Write+0x108>)
 8001a5a:	f000 f952 	bl	8001d02 <QSPI_AutoPollingMemReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e019      	b.n	8001a9c <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001a68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6c:	4413      	add	r3, r2
 8001a6e:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8001a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d203      	bcs.n	8001a8c <BSP_QSPI_Write+0xf0>
 8001a84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	e001      	b.n	8001a90 <BSP_QSPI_Write+0xf4>
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8001a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3b8      	bcc.n	8001a0c <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3770      	adds	r7, #112	; 0x70
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20001134 	.word	0x20001134

08001aa8 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b096      	sub	sp, #88	; 0x58
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8001ab8:	23d8      	movs	r3, #216	; 0xd8
 8001aba:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8001acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001aec:	2300      	movs	r3, #0
 8001aee:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <BSP_QSPI_Erase_Block+0x90>)
 8001af2:	f000 f8aa 	bl	8001c4a <QSPI_WriteEnable>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e017      	b.n	8001b30 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <BSP_QSPI_Erase_Block+0x90>)
 8001b0c:	f002 f9a9 	bl	8003e62 <HAL_OSPI_Command>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00a      	b.n	8001b30 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001b1a:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <BSP_QSPI_Erase_Block+0x90>)
 8001b20:	f000 f8ef 	bl	8001d02 <QSPI_AutoPollingMemReady>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3758      	adds	r7, #88	; 0x58
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20001134 	.word	0x20001134

08001b3c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6513      	str	r3, [r2, #80]	; 0x50
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b78:	f043 0310 	orr.w	r3, r3, #16
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <BSP_QSPI_MspInit+0x78>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8001b8a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b8e:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <BSP_QSPI_MspInit+0x7c>)
 8001ba8:	f000 ff8e 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48001000 	.word	0x48001000

08001bbc <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8001bcc:	2366      	movs	r3, #102	; 0x66
 8001bce:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f002 f92f 	bl	8003e62 <HAL_OSPI_Command>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e019      	b.n	8001c42 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001c0e:	2399      	movs	r3, #153	; 0x99
 8001c10:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f002 f920 	bl	8003e62 <HAL_OSPI_Command>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e00a      	b.n	8001c42 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001c2c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f866 	bl	8001d02 <QSPI_AutoPollingMemReady>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3758      	adds	r7, #88	; 0x58
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b09c      	sub	sp, #112	; 0x70
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f002 f8e8 	bl	8003e62 <HAL_OSPI_Command>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e02e      	b.n	8001cfa <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cb0:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8001cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cba:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f002 f8c7 	bl	8003e62 <HAL_OSPI_Command>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00d      	b.n	8001cfa <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f002 fa51 	bl	8004190 <HAL_OSPI_AutoPolling>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3770      	adds	r7, #112	; 0x70
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b09c      	sub	sp, #112	; 0x70
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001d14:	2305      	movs	r3, #5
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d30:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001d42:	2300      	movs	r3, #0
 8001d44:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8001d52:	2310      	movs	r3, #16
 8001d54:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d5a:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f002 f87b 	bl	8003e62 <HAL_OSPI_Command>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00c      	b.n	8001d90 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f002 fa06 	bl	8004190 <HAL_OSPI_AutoPolling>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3770      	adds	r7, #112	; 0x70
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b098      	sub	sp, #96	; 0x60
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001dac:	2305      	movs	r3, #5
 8001dae:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f002 f83a 	bl	8003e62 <HAL_OSPI_Command>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e077      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001df8:	f107 030f 	add.w	r3, r7, #15
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f002 f921 	bl	800404a <HAL_OSPI_Receive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06a      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff19 	bl	8001c4a <QSPI_WriteEnable>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e062      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e004      	b.n	8001e3e <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f002 f808 	bl	8003e62 <HAL_OSPI_Command>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e045      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e5c:	f107 030f 	add.w	r3, r7, #15
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f002 f87c 	bl	8003f64 <HAL_OSPI_Transmit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e038      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001e76:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff41 	bl	8001d02 <QSPI_AutoPollingMemReady>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e02e      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 ffe2 	bl	8003e62 <HAL_OSPI_Command>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e01f      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ea8:	f107 030f 	add.w	r3, r7, #15
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f002 f8c9 	bl	800404a <HAL_OSPI_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e012      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <QSPI_QuadMode+0x13a>
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d007      	beq.n	8001ee2 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3760      	adds	r7, #96	; 0x60
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b098      	sub	sp, #96	; 0x60
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8001f04:	2305      	movs	r3, #5
 8001f06:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8001f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001f32:	2300      	movs	r3, #0
 8001f34:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 ff8e 	bl	8003e62 <HAL_OSPI_Command>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e09a      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f002 f875 	bl	800404a <HAL_OSPI_Receive>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08d      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001f6a:	2315      	movs	r3, #21
 8001f6c:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 ff70 	bl	8003e62 <HAL_OSPI_Command>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e07c      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	3301      	adds	r3, #1
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f002 f856 	bl	800404a <HAL_OSPI_Receive>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e06e      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fe4e 	bl	8001c4a <QSPI_WriteEnable>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e066      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73bb      	strb	r3, [r7, #14]
 8001fc8:	e004      	b.n	8001fd4 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	f023 0302 	bic.w	r3, r3, #2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f001 ff3b 	bl	8003e62 <HAL_OSPI_Command>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e047      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 ffaf 	bl	8003f64 <HAL_OSPI_Transmit>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e03a      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002010:	f241 3188 	movw	r1, #5000	; 0x1388
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fe74 	bl	8001d02 <QSPI_AutoPollingMemReady>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e030      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002024:	2315      	movs	r3, #21
 8002026:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f001 ff13 	bl	8003e62 <HAL_OSPI_Command>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e01f      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f001 fffa 	bl	800404a <HAL_OSPI_Receive>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e012      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002060:	7b7b      	ldrb	r3, [r7, #13]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <QSPI_HighPerfMode+0x180>
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002070:	7b7b      	ldrb	r3, [r7, #13]
 8002072:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3760      	adds	r7, #96	; 0x60
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2120      	movs	r1, #32
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fa4e 	bl	8001540 <SENSOR_IO_Read>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020ce:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	2120      	movs	r1, #32
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fa17 	bl	800150c <SENSOR_IO_Write>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80020f4:	f7ff fa00 	bl	80014f8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	210f      	movs	r1, #15
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fa1e 	bl	8001540 <SENSOR_IO_Read>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	2302      	movs	r3, #2
 8002128:	21b0      	movs	r1, #176	; 0xb0
 800212a:	f7ff fa27 	bl	800157c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002136:	7b7b      	ldrb	r3, [r7, #13]
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	b2d8      	uxtb	r0, r3
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	2302      	movs	r3, #2
 8002148:	21b6      	movs	r1, #182	; 0xb6
 800214a:	f7ff fa17 	bl	800157c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800214e:	7b7b      	ldrb	r3, [r7, #13]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	7b3b      	ldrb	r3, [r7, #12]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	f107 020c 	add.w	r2, r7, #12
 8002164:	2302      	movs	r3, #2
 8002166:	21ba      	movs	r1, #186	; 0xba
 8002168:	f7ff fa08 	bl	800157c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	f107 020c 	add.w	r2, r7, #12
 8002182:	2302      	movs	r3, #2
 8002184:	21a8      	movs	r1, #168	; 0xa8
 8002186:	f7ff f9f9 	bl	800157c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	7b3b      	ldrb	r3, [r7, #12]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800219c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021aa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80021ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80021c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80021ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80021fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002244 <HTS221_H_ReadHumidity+0x130>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dd01      	ble.n	8002210 <HTS221_H_ReadHumidity+0xfc>
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HTS221_H_ReadHumidity+0x134>)
 800220e:	e00a      	b.n	8002226 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002210:	edd7 7a04 	vldr	s15, [r7, #16]
 8002214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d502      	bpl.n	8002224 <HTS221_H_ReadHumidity+0x110>
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e000      	b.n	8002226 <HTS221_H_ReadHumidity+0x112>
 8002224:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002226:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002228:	edd7 7a04 	vldr	s15, [r7, #16]
 800222c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002234:	eef0 7a66 	vmov.f32	s15, s13
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	447a0000 	.word	0x447a0000
 8002248:	447a0000 	.word	0x447a0000

0800224c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	463b      	mov	r3, r7
 8002254:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002258:	783b      	ldrb	r3, [r7, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	2120      	movs	r1, #32
 800225e:	203c      	movs	r0, #60	; 0x3c
 8002260:	f7ff f954 	bl	800150c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	461a      	mov	r2, r3
 8002268:	2121      	movs	r1, #33	; 0x21
 800226a:	203c      	movs	r0, #60	; 0x3c
 800226c:	f7ff f94e 	bl	800150c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002270:	78bb      	ldrb	r3, [r7, #2]
 8002272:	461a      	mov	r2, r3
 8002274:	2122      	movs	r1, #34	; 0x22
 8002276:	203c      	movs	r0, #60	; 0x3c
 8002278:	f7ff f948 	bl	800150c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	461a      	mov	r2, r3
 8002280:	2123      	movs	r1, #35	; 0x23
 8002282:	203c      	movs	r0, #60	; 0x3c
 8002284:	f7ff f942 	bl	800150c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002288:	793b      	ldrb	r3, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	2124      	movs	r1, #36	; 0x24
 800228e:	203c      	movs	r0, #60	; 0x3c
 8002290:	f7ff f93c 	bl	800150c <SENSOR_IO_Write>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80022a6:	2122      	movs	r1, #34	; 0x22
 80022a8:	203c      	movs	r0, #60	; 0x3c
 80022aa:	f7ff f949 	bl	8001540 <SENSOR_IO_Read>
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f043 0303 	orr.w	r3, r3, #3
 80022c0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	461a      	mov	r2, r3
 80022c6:	2122      	movs	r1, #34	; 0x22
 80022c8:	203c      	movs	r0, #60	; 0x3c
 80022ca:	f7ff f91f 	bl	800150c <SENSOR_IO_Write>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80022da:	f7ff f90d 	bl	80014f8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80022de:	210f      	movs	r1, #15
 80022e0:	203c      	movs	r0, #60	; 0x3c
 80022e2:	f7ff f92d 	bl	8001540 <SENSOR_IO_Read>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}

080022ec <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80022fa:	2122      	movs	r1, #34	; 0x22
 80022fc:	203c      	movs	r0, #60	; 0x3c
 80022fe:	f7ff f91f 	bl	8001540 <SENSOR_IO_Read>
 8002302:	4603      	mov	r3, r0
 8002304:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f023 0320 	bic.w	r3, r3, #32
 800230c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	461a      	mov	r2, r3
 8002320:	2122      	movs	r1, #34	; 0x22
 8002322:	203c      	movs	r0, #60	; 0x3c
 8002324:	f7ff f8f2 	bl	800150c <SENSOR_IO_Write>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002346:	2121      	movs	r1, #33	; 0x21
 8002348:	203c      	movs	r0, #60	; 0x3c
 800234a:	f7ff f8f9 	bl	8001540 <SENSOR_IO_Read>
 800234e:	4603      	mov	r3, r0
 8002350:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002352:	f107 0208 	add.w	r2, r7, #8
 8002356:	2306      	movs	r3, #6
 8002358:	21a8      	movs	r1, #168	; 0xa8
 800235a:	203c      	movs	r0, #60	; 0x3c
 800235c:	f7ff f90e 	bl	800157c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	e01c      	b.n	80023a0 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002366:	7ffb      	ldrb	r3, [r7, #31]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	3301      	adds	r3, #1
 800236c:	3320      	adds	r3, #32
 800236e:	443b      	add	r3, r7
 8002370:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002374:	b29b      	uxth	r3, r3
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b29a      	uxth	r2, r3
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	3320      	adds	r3, #32
 8002380:	443b      	add	r3, r7
 8002382:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b29a      	uxth	r2, r3
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	b212      	sxth	r2, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3320      	adds	r3, #32
 8002394:	443b      	add	r3, r7
 8002396:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	3301      	adds	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	7ffb      	ldrb	r3, [r7, #31]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d9df      	bls.n	8002366 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023ac:	2b60      	cmp	r3, #96	; 0x60
 80023ae:	d013      	beq.n	80023d8 <LIS3MDL_MagReadXYZ+0xa8>
 80023b0:	2b60      	cmp	r3, #96	; 0x60
 80023b2:	dc14      	bgt.n	80023de <LIS3MDL_MagReadXYZ+0xae>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d00c      	beq.n	80023d2 <LIS3MDL_MagReadXYZ+0xa2>
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	dc10      	bgt.n	80023de <LIS3MDL_MagReadXYZ+0xae>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <LIS3MDL_MagReadXYZ+0x96>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d003      	beq.n	80023cc <LIS3MDL_MagReadXYZ+0x9c>
 80023c4:	e00b      	b.n	80023de <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <LIS3MDL_MagReadXYZ+0xfc>)
 80023c8:	61bb      	str	r3, [r7, #24]
    break;
 80023ca:	e008      	b.n	80023de <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <LIS3MDL_MagReadXYZ+0x100>)
 80023ce:	61bb      	str	r3, [r7, #24]
    break;
 80023d0:	e005      	b.n	80023de <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <LIS3MDL_MagReadXYZ+0x104>)
 80023d4:	61bb      	str	r3, [r7, #24]
    break;
 80023d6:	e002      	b.n	80023de <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <LIS3MDL_MagReadXYZ+0x108>)
 80023da:	61bb      	str	r3, [r7, #24]
    break;    
 80023dc:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	77fb      	strb	r3, [r7, #31]
 80023e2:	e01a      	b.n	800241a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80023e4:	7ffb      	ldrb	r3, [r7, #31]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	3320      	adds	r3, #32
 80023ea:	443b      	add	r3, r7
 80023ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	7ffb      	ldrb	r3, [r7, #31]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240c:	ee17 2a90 	vmov	r2, s15
 8002410:	b212      	sxth	r2, r2
 8002412:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	3301      	adds	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d9e1      	bls.n	80023e4 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	3e0f5c29 	.word	0x3e0f5c29
 8002430:	3e947ae1 	.word	0x3e947ae1
 8002434:	3edc28f6 	.word	0x3edc28f6
 8002438:	3f147ae1 	.word	0x3f147ae1

0800243c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800244a:	2110      	movs	r1, #16
 800244c:	20d4      	movs	r0, #212	; 0xd4
 800244e:	f7ff f877 	bl	8001540 <SENSOR_IO_Read>
 8002452:	4603      	mov	r3, r0
 8002454:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800245a:	7bbb      	ldrb	r3, [r7, #14]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002462:	7bba      	ldrb	r2, [r7, #14]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4313      	orrs	r3, r2
 8002468:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	461a      	mov	r2, r3
 800246e:	2110      	movs	r1, #16
 8002470:	20d4      	movs	r0, #212	; 0xd4
 8002472:	f7ff f84b 	bl	800150c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002476:	2112      	movs	r1, #18
 8002478:	20d4      	movs	r0, #212	; 0xd4
 800247a:	f7ff f861 	bl	8001540 <SENSOR_IO_Read>
 800247e:	4603      	mov	r3, r0
 8002480:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b29b      	uxth	r3, r3
 8002488:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800248a:	7bbb      	ldrb	r3, [r7, #14]
 800248c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002490:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002492:	7bba      	ldrb	r2, [r7, #14]
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	4313      	orrs	r3, r2
 8002498:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	461a      	mov	r2, r3
 800249e:	2112      	movs	r1, #18
 80024a0:	20d4      	movs	r0, #212	; 0xd4
 80024a2:	f7ff f833 	bl	800150c <SENSOR_IO_Write>
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80024b4:	2300      	movs	r3, #0
 80024b6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024b8:	2110      	movs	r1, #16
 80024ba:	20d4      	movs	r0, #212	; 0xd4
 80024bc:	f7ff f840 	bl	8001540 <SENSOR_IO_Read>
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	461a      	mov	r2, r3
 80024d0:	2110      	movs	r1, #16
 80024d2:	20d4      	movs	r0, #212	; 0xd4
 80024d4:	f7ff f81a 	bl	800150c <SENSOR_IO_Write>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80024e4:	f7ff f808 	bl	80014f8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80024e8:	210f      	movs	r1, #15
 80024ea:	20d4      	movs	r0, #212	; 0xd4
 80024ec:	f7ff f828 	bl	8001540 <SENSOR_IO_Read>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002504:	2115      	movs	r1, #21
 8002506:	20d4      	movs	r0, #212	; 0xd4
 8002508:	f7ff f81a 	bl	8001540 <SENSOR_IO_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	f023 0310 	bic.w	r3, r3, #16
 8002516:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	461a      	mov	r2, r3
 800252a:	2115      	movs	r1, #21
 800252c:	20d4      	movs	r0, #212	; 0xd4
 800252e:	f7fe ffed 	bl	800150c <SENSOR_IO_Write>
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002552:	2110      	movs	r1, #16
 8002554:	20d4      	movs	r0, #212	; 0xd4
 8002556:	f7fe fff3 	bl	8001540 <SENSOR_IO_Read>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800255e:	f107 0208 	add.w	r2, r7, #8
 8002562:	2306      	movs	r3, #6
 8002564:	2128      	movs	r1, #40	; 0x28
 8002566:	20d4      	movs	r0, #212	; 0xd4
 8002568:	f7ff f808 	bl	800157c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e01c      	b.n	80025ac <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002572:	7ffb      	ldrb	r3, [r7, #31]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	3301      	adds	r3, #1
 8002578:	3320      	adds	r3, #32
 800257a:	443b      	add	r3, r7
 800257c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002580:	b29b      	uxth	r3, r3
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b29a      	uxth	r2, r3
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	3320      	adds	r3, #32
 800258c:	443b      	add	r3, r7
 800258e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002592:	b29b      	uxth	r3, r3
 8002594:	4413      	add	r3, r2
 8002596:	b29a      	uxth	r2, r3
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	b212      	sxth	r2, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	3320      	adds	r3, #32
 80025a0:	443b      	add	r3, r7
 80025a2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	3301      	adds	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d9df      	bls.n	8002572 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d829      	bhi.n	8002610 <LSM6DSL_AccReadXYZ+0xd4>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <LSM6DSL_AccReadXYZ+0x88>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	08002611 	.word	0x08002611
 80025cc:	08002611 	.word	0x08002611
 80025d0:	08002611 	.word	0x08002611
 80025d4:	0800260b 	.word	0x0800260b
 80025d8:	08002611 	.word	0x08002611
 80025dc:	08002611 	.word	0x08002611
 80025e0:	08002611 	.word	0x08002611
 80025e4:	080025ff 	.word	0x080025ff
 80025e8:	08002611 	.word	0x08002611
 80025ec:	08002611 	.word	0x08002611
 80025f0:	08002611 	.word	0x08002611
 80025f4:	08002605 	.word	0x08002605
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <LSM6DSL_AccReadXYZ+0x120>)
 80025fa:	61bb      	str	r3, [r7, #24]
    break;
 80025fc:	e008      	b.n	8002610 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <LSM6DSL_AccReadXYZ+0x124>)
 8002600:	61bb      	str	r3, [r7, #24]
    break;
 8002602:	e005      	b.n	8002610 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <LSM6DSL_AccReadXYZ+0x128>)
 8002606:	61bb      	str	r3, [r7, #24]
    break;
 8002608:	e002      	b.n	8002610 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <LSM6DSL_AccReadXYZ+0x12c>)
 800260c:	61bb      	str	r3, [r7, #24]
    break;    
 800260e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	e01a      	b.n	800264c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002616:	7ffb      	ldrb	r3, [r7, #31]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	3320      	adds	r3, #32
 800261c:	443b      	add	r3, r7
 800261e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262a:	edd7 7a06 	vldr	s15, [r7, #24]
 800262e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263e:	ee17 2a90 	vmov	r2, s15
 8002642:	b212      	sxth	r2, r2
 8002644:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002646:	7ffb      	ldrb	r3, [r7, #31]
 8002648:	3301      	adds	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
 800264c:	7ffb      	ldrb	r3, [r7, #31]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d9e1      	bls.n	8002616 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	3d79db23 	.word	0x3d79db23
 8002660:	3df9db23 	.word	0x3df9db23
 8002664:	3e79db23 	.word	0x3e79db23
 8002668:	3ef9db23 	.word	0x3ef9db23

0800266c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800267a:	2111      	movs	r1, #17
 800267c:	20d4      	movs	r0, #212	; 0xd4
 800267e:	f7fe ff5f 	bl	8001540 <SENSOR_IO_Read>
 8002682:	4603      	mov	r3, r0
 8002684:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800268a:	7bbb      	ldrb	r3, [r7, #14]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002692:	7bba      	ldrb	r2, [r7, #14]
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	4313      	orrs	r3, r2
 8002698:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	461a      	mov	r2, r3
 800269e:	2111      	movs	r1, #17
 80026a0:	20d4      	movs	r0, #212	; 0xd4
 80026a2:	f7fe ff33 	bl	800150c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80026a6:	2112      	movs	r1, #18
 80026a8:	20d4      	movs	r0, #212	; 0xd4
 80026aa:	f7fe ff49 	bl	8001540 <SENSOR_IO_Read>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80026ba:	7bbb      	ldrb	r3, [r7, #14]
 80026bc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80026c0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80026c2:	7bba      	ldrb	r2, [r7, #14]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80026ca:	7bbb      	ldrb	r3, [r7, #14]
 80026cc:	461a      	mov	r2, r3
 80026ce:	2112      	movs	r1, #18
 80026d0:	20d4      	movs	r0, #212	; 0xd4
 80026d2:	f7fe ff1b 	bl	800150c <SENSOR_IO_Write>
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80026e4:	2300      	movs	r3, #0
 80026e6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80026e8:	2111      	movs	r1, #17
 80026ea:	20d4      	movs	r0, #212	; 0xd4
 80026ec:	f7fe ff28 	bl	8001540 <SENSOR_IO_Read>
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	461a      	mov	r2, r3
 8002700:	2111      	movs	r1, #17
 8002702:	20d4      	movs	r0, #212	; 0xd4
 8002704:	f7fe ff02 	bl	800150c <SENSOR_IO_Write>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002714:	f7fe fef0 	bl	80014f8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002718:	210f      	movs	r1, #15
 800271a:	20d4      	movs	r0, #212	; 0xd4
 800271c:	f7fe ff10 	bl	8001540 <SENSOR_IO_Read>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}

08002726 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002734:	2116      	movs	r1, #22
 8002736:	20d4      	movs	r0, #212	; 0xd4
 8002738:	f7fe ff02 	bl	8001540 <SENSOR_IO_Read>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002754:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	461a      	mov	r2, r3
 800275a:	2116      	movs	r1, #22
 800275c:	20d4      	movs	r0, #212	; 0xd4
 800275e:	f7fe fed5 	bl	800150c <SENSOR_IO_Write>
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002782:	2111      	movs	r1, #17
 8002784:	20d4      	movs	r0, #212	; 0xd4
 8002786:	f7fe fedb 	bl	8001540 <SENSOR_IO_Read>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	2306      	movs	r3, #6
 8002794:	2122      	movs	r1, #34	; 0x22
 8002796:	20d4      	movs	r0, #212	; 0xd4
 8002798:	f7fe fef0 	bl	800157c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
 80027a0:	e01c      	b.n	80027dc <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	3301      	adds	r3, #1
 80027a8:	3320      	adds	r3, #32
 80027aa:	443b      	add	r3, r7
 80027ac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	3320      	adds	r3, #32
 80027bc:	443b      	add	r3, r7
 80027be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
 80027ca:	b212      	sxth	r2, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	3320      	adds	r3, #32
 80027d0:	443b      	add	r3, r7
 80027d2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	3301      	adds	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d9df      	bls.n	80027a2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d829      	bhi.n	8002840 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002829 	.word	0x08002829
 80027f8:	08002841 	.word	0x08002841
 80027fc:	08002841 	.word	0x08002841
 8002800:	08002841 	.word	0x08002841
 8002804:	0800282f 	.word	0x0800282f
 8002808:	08002841 	.word	0x08002841
 800280c:	08002841 	.word	0x08002841
 8002810:	08002841 	.word	0x08002841
 8002814:	08002835 	.word	0x08002835
 8002818:	08002841 	.word	0x08002841
 800281c:	08002841 	.word	0x08002841
 8002820:	08002841 	.word	0x08002841
 8002824:	0800283b 	.word	0x0800283b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800282a:	61bb      	str	r3, [r7, #24]
    break;
 800282c:	e008      	b.n	8002840 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002830:	61bb      	str	r3, [r7, #24]
    break;
 8002832:	e005      	b.n	8002840 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002836:	61bb      	str	r3, [r7, #24]
    break;
 8002838:	e002      	b.n	8002840 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800283c:	61bb      	str	r3, [r7, #24]
    break;    
 800283e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
 8002844:	e016      	b.n	8002874 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	3320      	adds	r3, #32
 800284c:	443b      	add	r3, r7
 800284e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	edd7 7a06 	vldr	s15, [r7, #24]
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	3301      	adds	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	7ffb      	ldrb	r3, [r7, #31]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d9e5      	bls.n	8002846 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	410c0000 	.word	0x410c0000
 8002888:	418c0000 	.word	0x418c0000
 800288c:	420c0000 	.word	0x420c0000
 8002890:	428c0000 	.word	0x428c0000

08002894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289e:	2003      	movs	r0, #3
 80028a0:	f000 f8dd 	bl	8002a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a4:	200f      	movs	r0, #15
 80028a6:	f7fe fc19 	bl	80010dc <HAL_InitTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	e001      	b.n	80028ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b6:	f7fe fa79 	bl	8000dac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ba:	79fb      	ldrb	r3, [r7, #7]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200000b0 	.word	0x200000b0
 80028e8:	20001184 	.word	0x20001184

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20001184 	.word	0x20001184

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff4c 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a86:	f7ff ff61 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002a8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f7ff ffb1 	bl	80029f8 <NVIC_EncodePriority>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff80 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff54 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e166      	b.n	8002da6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8158 	beq.w	8002da0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_GPIO_Init+0x40>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d130      	bne.n	8002b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0201 	and.w	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d017      	beq.n	8002ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d123      	bne.n	8002bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	6939      	ldr	r1, [r7, #16]
 8002bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80b2 	beq.w	8002da0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_GPIO_Init+0x2fc>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_GPIO_Init+0x2fc>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6613      	str	r3, [r2, #96]	; 0x60
 8002c48:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <HAL_GPIO_Init+0x2fc>)
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c54:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_GPIO_Init+0x210>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d025      	beq.n	8002cd4 <HAL_GPIO_Init+0x20c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_GPIO_Init+0x308>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01f      	beq.n	8002cd0 <HAL_GPIO_Init+0x208>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <HAL_GPIO_Init+0x30c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d019      	beq.n	8002ccc <HAL_GPIO_Init+0x204>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_GPIO_Init+0x310>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_GPIO_Init+0x200>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <HAL_GPIO_Init+0x314>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_GPIO_Init+0x1fc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_GPIO_Init+0x318>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x1f8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_GPIO_Init+0x31c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_GPIO_Init+0x1f4>
 8002cb8:	2307      	movs	r3, #7
 8002cba:	e00e      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	e00c      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cc0:	2306      	movs	r3, #6
 8002cc2:	e00a      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	e008      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cc8:	2304      	movs	r3, #4
 8002cca:	e006      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e004      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e002      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_GPIO_Init+0x212>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	f002 0203 	and.w	r2, r2, #3
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cea:	4937      	ldr	r1, [pc, #220]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d1c:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d22:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d46:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3301      	adds	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f ae91 	bne.w	8002ad8 <HAL_GPIO_Init+0x10>
  }
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	48000800 	.word	0x48000800
 8002dd4:	48000c00 	.word	0x48000c00
 8002dd8:	48001000 	.word	0x48001000
 8002ddc:	48001400 	.word	0x48001400
 8002de0:	48001800 	.word	0x48001800
 8002de4:	48001c00 	.word	0x48001c00
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002dfa:	e0c9      	b.n	8002f90 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80bc 	beq.w	8002f8a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e12:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_GPIO_DeInit+0x1c0>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e3a:	d02b      	beq.n	8002e94 <HAL_GPIO_DeInit+0xa8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a5c      	ldr	r2, [pc, #368]	; (8002fb0 <HAL_GPIO_DeInit+0x1c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d025      	beq.n	8002e90 <HAL_GPIO_DeInit+0xa4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a5b      	ldr	r2, [pc, #364]	; (8002fb4 <HAL_GPIO_DeInit+0x1c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01f      	beq.n	8002e8c <HAL_GPIO_DeInit+0xa0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a5a      	ldr	r2, [pc, #360]	; (8002fb8 <HAL_GPIO_DeInit+0x1cc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d019      	beq.n	8002e88 <HAL_GPIO_DeInit+0x9c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a59      	ldr	r2, [pc, #356]	; (8002fbc <HAL_GPIO_DeInit+0x1d0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_GPIO_DeInit+0x98>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_GPIO_DeInit+0x1d4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00d      	beq.n	8002e80 <HAL_GPIO_DeInit+0x94>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_GPIO_DeInit+0x1d8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_DeInit+0x90>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_GPIO_DeInit+0x1dc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_GPIO_DeInit+0x8c>
 8002e74:	2307      	movs	r3, #7
 8002e76:	e00e      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	e00c      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e7c:	2306      	movs	r3, #6
 8002e7e:	e00a      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e80:	2305      	movs	r3, #5
 8002e82:	e008      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e006      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_DeInit+0xaa>
 8002e94:	2300      	movs	r3, #0
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d132      	bne.n	8002f0c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4947      	ldr	r1, [pc, #284]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	4943      	ldr	r1, [pc, #268]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4940      	ldr	r1, [pc, #256]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ed0:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	493c      	ldr	r1, [pc, #240]	; (8002fcc <HAL_GPIO_DeInit+0x1e0>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <HAL_GPIO_DeInit+0x1c0>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	482b      	ldr	r0, [pc, #172]	; (8002fac <HAL_GPIO_DeInit+0x1c0>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	400a      	ands	r2, r1
 8002f06:	3302      	adds	r3, #2
 8002f08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2103      	movs	r1, #3
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	08d2      	lsrs	r2, r2, #3
 8002f40:	4019      	ands	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2103      	movs	r1, #3
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af2f 	bne.w	8002dfc <HAL_GPIO_DeInit+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	48000800 	.word	0x48000800
 8002fb8:	48000c00 	.word	0x48000c00
 8002fbc:	48001000 	.word	0x48001000
 8002fc0:	48001400 	.word	0x48001400
 8002fc4:	48001800 	.word	0x48001800
 8002fc8:	48001c00 	.word	0x48001c00
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fcec 	bl	80009fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08d      	b.n	800315e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fed0 	bl	8000dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e006      	b.n	80030b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d108      	bne.n	80030d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e007      	b.n	80030e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e021      	b.n	80031bc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd fe91 	bl	8000eb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	f040 80f9 	bne.w	80033de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x34>
 80031f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0ed      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Mem_Write+0x4e>
 800320e:	2302      	movs	r3, #2
 8003210:	e0e6      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800321a:	f7ff fb67 	bl	80028ec <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fac3 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0d1      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2221      	movs	r2, #33	; 0x21
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003264:	88f8      	ldrh	r0, [r7, #6]
 8003266:	893a      	ldrh	r2, [r7, #8]
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4603      	mov	r3, r0
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f9d3 	bl	8003620 <I2C_RequestMemoryWrite>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0a9      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2bff      	cmp	r3, #255	; 0xff
 8003294:	d90e      	bls.n	80032b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	22ff      	movs	r2, #255	; 0xff
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	2300      	movs	r3, #0
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fc3d 	bl	8003b2c <I2C_TransferConfig>
 80032b2:	e00f      	b.n	80032d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	2300      	movs	r3, #0
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fc2c 	bl	8003b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fabc 	bl	8003856 <I2C_WaitOnTXISFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e07b      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_I2C_Mem_Write+0x1c8>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d130      	bne.n	800338c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fa3f 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04d      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fbe1 	bl	8003b2c <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fbd0 	bl	8003b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d19e      	bne.n	80032d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 faa2 	bl	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01a      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_I2C_Mem_Write+0x224>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80fd 	bne.w	800360e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_I2C_Mem_Read+0x34>
 800341a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0f1      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Read+0x4e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ea      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003442:	f7ff fa53 	bl	80028ec <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2319      	movs	r3, #25
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f9af 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d5      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2222      	movs	r2, #34	; 0x22
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800348c:	88f8      	ldrh	r0, [r7, #6]
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4603      	mov	r3, r0
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f913 	bl	80036c8 <I2C_RequestMemoryRead>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0ad      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	d90e      	bls.n	80034dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	4b52      	ldr	r3, [pc, #328]	; (8003618 <HAL_I2C_Mem_Read+0x22c>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fb29 	bl	8003b2c <I2C_TransferConfig>
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	8979      	ldrh	r1, [r7, #10]
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_I2C_Mem_Read+0x22c>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fb18 	bl	8003b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2200      	movs	r2, #0
 8003504:	2104      	movs	r1, #4
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f956 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07c      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d034      	beq.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d130      	bne.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f927 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e04d      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	; 0xff
 800357c:	d90e      	bls.n	800359c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fac9 	bl	8003b2c <I2C_TransferConfig>
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	8979      	ldrh	r1, [r7, #10]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fab8 	bl	8003b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d19a      	bne.n	80034fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f98a 	bl	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01a      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2220      	movs	r2, #32
 80035e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_I2C_Mem_Read+0x230>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	80002400 	.word	0x80002400
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <I2C_RequestMemoryWrite+0xa4>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fa6f 	bl	8003b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8ff 	bl	8003856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e02c      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
 8003672:	e015      	b.n	80036a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	b29b      	uxth	r3, r3
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8e5 	bl	8003856 <I2C_WaitOnTXISFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e012      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f884 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	80002000 	.word	0x80002000

080036c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <I2C_RequestMemoryRead+0xa4>)
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa1c 	bl	8003b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	69b9      	ldr	r1, [r7, #24]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f8ac 	bl	8003856 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e02c      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
 8003718:	e015      	b.n	8003746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	b29b      	uxth	r3, r3
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f892 	bl	8003856 <I2C_WaitOnTXISFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e012      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2200      	movs	r2, #0
 800374e:	2140      	movs	r1, #64	; 0x40
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f831 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	80002000 	.word	0x80002000

08003770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d103      	bne.n	800378e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	619a      	str	r2, [r3, #24]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c8:	e031      	b.n	800382e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d02d      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7ff f88b 	bl	80028ec <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d122      	bne.n	800382e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	429a      	cmp	r2, r3
 8003804:	d113      	bne.n	800382e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00f      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	429a      	cmp	r2, r3
 800384a:	d0be      	beq.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003862:	e033      	b.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f87f 	bl	800396c <I2C_IsErrorOccurred>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e031      	b.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d025      	beq.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7ff f834 	bl	80028ec <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11a      	bne.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d013      	beq.n	80038cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e007      	b.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d1c4      	bne.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f0:	e02f      	b.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f838 	bl	800396c <I2C_IsErrorOccurred>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e02d      	b.n	8003962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe fff1 	bl	80028ec <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11a      	bne.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b20      	cmp	r3, #32
 8003928:	d013      	beq.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d1c8      	bne.n	80038f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d068      	beq.n	8003a6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a0:	e049      	b.n	8003a36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d045      	beq.n	8003a36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe ff9f 	bl	80028ec <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_IsErrorOccurred+0x54>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13a      	bne.n	8003a36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e2:	d121      	bne.n	8003a28 <I2C_IsErrorOccurred+0xbc>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ea:	d01d      	beq.n	8003a28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d01a      	beq.n	8003a28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a02:	f7fe ff73 	bl	80028ec <HAL_GetTick>
 8003a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a08:	e00e      	b.n	8003a28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a0a:	f7fe ff6f 	bl	80028ec <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b19      	cmp	r3, #25
 8003a16:	d907      	bls.n	8003a28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f043 0320 	orr.w	r3, r3, #32
 8003a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a26:	e006      	b.n	8003a36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d1e9      	bne.n	8003a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d003      	beq.n	8003a4c <I2C_IsErrorOccurred+0xe0>
 8003a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0aa      	beq.n	80039a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f043 0302 	orr.w	r3, r3, #2
 8003ac6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01c      	beq.n	8003b1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fe45 	bl	8003770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <I2C_IsErrorOccurred+0x1bc>)
 8003af2:	400b      	ands	r3, r1
 8003af4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3728      	adds	r7, #40	; 0x28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	fe00e800 	.word	0xfe00e800

08003b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	817b      	strh	r3, [r7, #10]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b44:	7a7b      	ldrb	r3, [r7, #9]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	0d5b      	lsrs	r3, r3, #21
 8003b66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <I2C_TransferConfig+0x60>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	ea02 0103 	and.w	r1, r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	03ff63ff 	.word	0x03ff63ff

08003b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d138      	bne.n	8003c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e032      	b.n	8003c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d139      	bne.n	8003cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e033      	b.n	8003cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2224      	movs	r2, #36	; 0x24
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7fe fe0e 	bl	80028ec <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e092      	b.n	8003e04 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 808b 	bne.w	8003e04 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f906 	bl	8000f00 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003cf4:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fad0 	bl	800429e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_OSPI_Init+0x150>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68d1      	ldr	r1, [r2, #12]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6912      	ldr	r2, [r2, #16]
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0412      	lsls	r2, r2, #16
 8003d14:	4311      	orrs	r1, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6952      	ldr	r2, [r2, #20]
 8003d1a:	3a01      	subs	r2, #1
 8003d1c:	0212      	lsls	r2, r2, #8
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	69d2      	ldr	r2, [r2, #28]
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0412      	lsls	r2, r2, #16
 8003d3e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	2120      	movs	r1, #32
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fddc 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d146      	bne.n	8003e04 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dac:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d107      	bne.n	8003dec <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0202 	orr.w	r2, r2, #2
 8003dea:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d103      	bne.n	8003dfe <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
 8003dfc:	e002      	b.n	8003e04 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	f8e0f8f4 	.word	0xf8e0f8f4

08003e14 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e015      	b.n	8003e58 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0202 	bic.w	r2, r2, #2
 8003e4a:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd f8c3 	bl	8000fd8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b08a      	sub	sp, #40	; 0x28
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003e6e:	f7fe fd3d 	bl	80028ec <HAL_GetTick>
 8003e72:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d104      	bne.n	8003e90 <HAL_OSPI_Command+0x2e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8e:	d10d      	bne.n	8003eac <HAL_OSPI_Command+0x4a>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b14      	cmp	r3, #20
 8003e94:	d103      	bne.n	8003e9e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d006      	beq.n	8003eac <HAL_OSPI_Command+0x4a>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b24      	cmp	r3, #36	; 0x24
 8003ea2:	d153      	bne.n	8003f4c <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d14f      	bne.n	8003f4c <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fd34 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003ec0:	7ffb      	ldrb	r3, [r7, #31]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d148      	bne.n	8003f58 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fd60 	bl	8004994 <OSPI_ConfigCmd>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d13c      	bne.n	8003f58 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2201      	movs	r2, #1
 8003eee:	2102      	movs	r1, #2
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fd17 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2202      	movs	r2, #2
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003f02:	e029      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003f12:	e021      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10b      	bne.n	8003f34 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	2b24      	cmp	r3, #36	; 0x24
 8003f22:	d103      	bne.n	8003f2c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2204      	movs	r2, #4
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003f2a:	e015      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2214      	movs	r2, #20
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003f32:	e011      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	2b14      	cmp	r3, #20
 8003f3a:	d103      	bne.n	8003f44 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003f42:	e009      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003f4a:	e005      	b.n	8003f58 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2210      	movs	r2, #16
 8003f54:	649a      	str	r2, [r3, #72]	; 0x48
 8003f56:	e000      	b.n	8003f5a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003f58:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7fe fcbc 	bl	80028ec <HAL_GetTick>
 8003f74:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3350      	adds	r3, #80	; 0x50
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	649a      	str	r2, [r3, #72]	; 0x48
 8003f8e:	e057      	b.n	8004040 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d14e      	bne.n	8004036 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fc0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2104      	movs	r1, #4
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fca9 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d113      	bne.n	8004004 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1df      	bne.n	8003fc2 <HAL_OSPI_Transmit+0x5e>
 8004002:	e000      	b.n	8004006 <HAL_OSPI_Transmit+0xa2>
          break;
 8004004:	bf00      	nop

      if (status == HAL_OK)
 8004006:	7ffb      	ldrb	r3, [r7, #31]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d119      	bne.n	8004040 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2201      	movs	r2, #1
 8004014:	2102      	movs	r1, #2
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fc84 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004020:	7ffb      	ldrb	r3, [r7, #31]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2202      	movs	r2, #2
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2202      	movs	r2, #2
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
 8004034:	e004      	b.n	8004040 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2210      	movs	r2, #16
 800403e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004040:	7ffb      	ldrb	r3, [r7, #31]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08c      	sub	sp, #48	; 0x30
 800404e:	af02      	add	r7, sp, #8
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7fe fc49 	bl	80028ec <HAL_GetTick>
 800405a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3350      	adds	r3, #80	; 0x50
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004074:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2208      	movs	r2, #8
 8004086:	649a      	str	r2, [r3, #72]	; 0x48
 8004088:	e07c      	b.n	8004184 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	2b04      	cmp	r3, #4
 8004090:	d172      	bne.n	8004178 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c8:	d104      	bne.n	80040d4 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	649a      	str	r2, [r3, #72]	; 0x48
 80040d2:	e011      	b.n	80040f8 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80040dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	649a      	str	r2, [r3, #72]	; 0x48
 80040ec:	e004      	b.n	80040f8 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	2201      	movs	r2, #1
 8004100:	2106      	movs	r1, #6
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fc0e 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800410e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004112:	2b00      	cmp	r3, #0
 8004114:	d114      	bne.n	8004140 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1dc      	bne.n	80040f8 <HAL_OSPI_Receive+0xae>
 800413e:	e000      	b.n	8004142 <HAL_OSPI_Receive+0xf8>
          break;
 8004140:	bf00      	nop

      if (status == HAL_OK)
 8004142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11c      	bne.n	8004184 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2201      	movs	r2, #1
 8004152:	2102      	movs	r1, #2
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fbe5 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8004160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10d      	bne.n	8004184 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2202      	movs	r2, #2
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
 8004176:	e005      	b.n	8004184 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7fe fba6 	bl	80028ec <HAL_GetTick>
 80041a0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80041b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d164      	bne.n	8004286 <HAL_OSPI_AutoPolling+0xf6>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c4:	d15f      	bne.n	8004286 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2120      	movs	r1, #32
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fba7 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d158      	bne.n	8004292 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	6852      	ldr	r2, [r2, #4]
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	6912      	ldr	r2, [r2, #16]
 8004200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6899      	ldr	r1, [r3, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	430b      	orrs	r3, r1
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004222:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800422c:	d104      	bne.n	8004238 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	649a      	str	r2, [r3, #72]	; 0x48
 8004236:	e011      	b.n	800425c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	649a      	str	r2, [r3, #72]	; 0x48
 8004250:	e004      	b.n	800425c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2201      	movs	r2, #1
 8004264:	2108      	movs	r1, #8
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb5c 	bl	8004924 <OSPI_WaitFlagStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8004270:	7ffb      	ldrb	r3, [r7, #31]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2208      	movs	r2, #8
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2202      	movs	r2, #2
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8004284:	e005      	b.n	8004292 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2210      	movs	r2, #16
 800428e:	649a      	str	r2, [r3, #72]	; 0x48
 8004290:	e000      	b.n	8004294 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8004292:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004294:	7ffb      	ldrb	r3, [r7, #31]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b092      	sub	sp, #72	; 0x48
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <HAL_OSPIM_Config+0x40>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d105      	bne.n	80042ea <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80042e8:	e004      	b.n	80042f4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80042ea:	2301      	movs	r3, #1
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80042fa:	e01f      	b.n	800433c <HAL_OSPIM_Config+0x80>
 80042fc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004300:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004304:	3301      	adds	r3, #1
 8004306:	b2d8      	uxtb	r0, r3
 8004308:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800430c:	f107 0114 	add.w	r1, r7, #20
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	4619      	mov	r1, r3
 800431c:	f000 fc9c 	bl	8004c58 <OSPIM_GetConfig>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2208      	movs	r2, #8
 8004330:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004332:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004336:	3301      	adds	r3, #1
 8004338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800433c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004340:	2b01      	cmp	r3, #1
 8004342:	d9dd      	bls.n	8004300 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 82de 	bne.w	800490a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800434e:	4bc6      	ldr	r3, [pc, #792]	; (8004668 <HAL_OSPIM_Config+0x3ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800435a:	4bc3      	ldr	r3, [pc, #780]	; (8004668 <HAL_OSPIM_Config+0x3ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4ac2      	ldr	r2, [pc, #776]	; (8004668 <HAL_OSPIM_Config+0x3ac>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004366:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004372:	4bbe      	ldr	r3, [pc, #760]	; (800466c <HAL_OSPIM_Config+0x3b0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800437e:	4bbb      	ldr	r3, [pc, #748]	; (800466c <HAL_OSPIM_Config+0x3b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4aba      	ldr	r2, [pc, #744]	; (800466c <HAL_OSPIM_Config+0x3b0>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800438a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800438e:	f043 0302 	orr.w	r3, r3, #2
 8004392:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004396:	49b6      	ldr	r1, [pc, #728]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3348      	adds	r3, #72	; 0x48
 80043a4:	443b      	add	r3, r7
 80043a6:	3b2c      	subs	r3, #44	; 0x2c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	48af      	ldr	r0, [pc, #700]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80043b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	3348      	adds	r3, #72	; 0x48
 80043c0:	443b      	add	r3, r7
 80043c2:	3b2c      	subs	r3, #44	; 0x2c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4403      	add	r3, r0
 80043d0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80043d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	3348      	adds	r3, #72	; 0x48
 80043de:	443b      	add	r3, r7
 80043e0:	3b34      	subs	r3, #52	; 0x34
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a1 	beq.w	800452c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80043ea:	49a1      	ldr	r1, [pc, #644]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80043ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	3348      	adds	r3, #72	; 0x48
 80043f8:	443b      	add	r3, r7
 80043fa:	3b34      	subs	r3, #52	; 0x34
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3b01      	subs	r3, #1
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	489a      	ldr	r0, [pc, #616]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	3348      	adds	r3, #72	; 0x48
 8004414:	443b      	add	r3, r7
 8004416:	3b34      	subs	r3, #52	; 0x34
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3b01      	subs	r3, #1
 800441c:	f021 0201 	bic.w	r2, r1, #1
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4403      	add	r3, r0
 8004424:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3348      	adds	r3, #72	; 0x48
 8004432:	443b      	add	r3, r7
 8004434:	3b30      	subs	r3, #48	; 0x30
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01d      	beq.n	8004478 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800443c:	498c      	ldr	r1, [pc, #560]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 800443e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	3348      	adds	r3, #72	; 0x48
 800444a:	443b      	add	r3, r7
 800444c:	3b30      	subs	r3, #48	; 0x30
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	4885      	ldr	r0, [pc, #532]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 800445a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	3348      	adds	r3, #72	; 0x48
 8004466:	443b      	add	r3, r7
 8004468:	3b30      	subs	r3, #48	; 0x30
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	f021 0210 	bic.w	r2, r1, #16
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3348      	adds	r3, #72	; 0x48
 8004484:	443b      	add	r3, r7
 8004486:	3b28      	subs	r3, #40	; 0x28
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d021      	beq.n	80044d2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800448e:	4978      	ldr	r1, [pc, #480]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3348      	adds	r3, #72	; 0x48
 800449c:	443b      	add	r3, r7
 800449e:	3b28      	subs	r3, #40	; 0x28
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	4870      	ldr	r0, [pc, #448]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80044b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	3348      	adds	r3, #72	; 0x48
 80044bc:	443b      	add	r3, r7
 80044be:	3b28      	subs	r3, #40	; 0x28
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4403      	add	r3, r0
 80044d0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	3348      	adds	r3, #72	; 0x48
 80044de:	443b      	add	r3, r7
 80044e0:	3b24      	subs	r3, #36	; 0x24
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d021      	beq.n	800452c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80044e8:	4961      	ldr	r1, [pc, #388]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80044ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	3348      	adds	r3, #72	; 0x48
 80044f6:	443b      	add	r3, r7
 80044f8:	3b24      	subs	r3, #36	; 0x24
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	4859      	ldr	r0, [pc, #356]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 800450a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3348      	adds	r3, #72	; 0x48
 8004516:	443b      	add	r3, r7
 8004518:	3b24      	subs	r3, #36	; 0x24
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4403      	add	r3, r0
 800452a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	3348      	adds	r3, #72	; 0x48
 800453e:	443b      	add	r3, r7
 8004540:	3b34      	subs	r3, #52	; 0x34
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4299      	cmp	r1, r3
 8004546:	d038      	beq.n	80045ba <HAL_OSPIM_Config+0x2fe>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	3348      	adds	r3, #72	; 0x48
 800455a:	443b      	add	r3, r7
 800455c:	3b30      	subs	r3, #48	; 0x30
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4299      	cmp	r1, r3
 8004562:	d02a      	beq.n	80045ba <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6899      	ldr	r1, [r3, #8]
 8004568:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	3348      	adds	r3, #72	; 0x48
 8004576:	443b      	add	r3, r7
 8004578:	3b2c      	subs	r3, #44	; 0x2c
 800457a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800457c:	4299      	cmp	r1, r3
 800457e:	d01c      	beq.n	80045ba <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	68d9      	ldr	r1, [r3, #12]
 8004584:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	3348      	adds	r3, #72	; 0x48
 8004592:	443b      	add	r3, r7
 8004594:	3b28      	subs	r3, #40	; 0x28
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4299      	cmp	r1, r3
 800459a:	d00e      	beq.n	80045ba <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6919      	ldr	r1, [r3, #16]
 80045a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3348      	adds	r3, #72	; 0x48
 80045ae:	443b      	add	r3, r7
 80045b0:	3b24      	subs	r3, #36	; 0x24
 80045b2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80045b4:	4299      	cmp	r1, r3
 80045b6:	f040 80d3 	bne.w	8004760 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80045ba:	492d      	ldr	r1, [pc, #180]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80045bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3348      	adds	r3, #72	; 0x48
 80045ca:	443b      	add	r3, r7
 80045cc:	3b34      	subs	r3, #52	; 0x34
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	4825      	ldr	r0, [pc, #148]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 80045da:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3348      	adds	r3, #72	; 0x48
 80045e8:	443b      	add	r3, r7
 80045ea:	3b34      	subs	r3, #52	; 0x34
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f021 0201 	bic.w	r2, r1, #1
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4403      	add	r3, r0
 80045f8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80045fa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3348      	adds	r3, #72	; 0x48
 8004608:	443b      	add	r3, r7
 800460a:	3b30      	subs	r3, #48	; 0x30
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01f      	beq.n	8004652 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004612:	4917      	ldr	r1, [pc, #92]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004614:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	3348      	adds	r3, #72	; 0x48
 8004622:	443b      	add	r3, r7
 8004624:	3b30      	subs	r3, #48	; 0x30
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	480f      	ldr	r0, [pc, #60]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004632:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	3348      	adds	r3, #72	; 0x48
 8004640:	443b      	add	r3, r7
 8004642:	3b30      	subs	r3, #48	; 0x30
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3b01      	subs	r3, #1
 8004648:	f021 0210 	bic.w	r2, r1, #16
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4403      	add	r3, r0
 8004650:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004652:	4907      	ldr	r1, [pc, #28]	; (8004670 <HAL_OSPIM_Config+0x3b4>)
 8004654:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	3348      	adds	r3, #72	; 0x48
 8004662:	443b      	add	r3, r7
 8004664:	3b2c      	subs	r3, #44	; 0x2c
 8004666:	e005      	b.n	8004674 <HAL_OSPIM_Config+0x3b8>
 8004668:	a0001000 	.word	0xa0001000
 800466c:	a0001400 	.word	0xa0001400
 8004670:	50061c00 	.word	0x50061c00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3b01      	subs	r3, #1
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	48a6      	ldr	r0, [pc, #664]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 8004680:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3348      	adds	r3, #72	; 0x48
 800468e:	443b      	add	r3, r7
 8004690:	3b2c      	subs	r3, #44	; 0x2c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4403      	add	r3, r0
 800469e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80046a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3348      	adds	r3, #72	; 0x48
 80046ae:	443b      	add	r3, r7
 80046b0:	3b28      	subs	r3, #40	; 0x28
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d023      	beq.n	8004700 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80046b8:	4997      	ldr	r1, [pc, #604]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80046ba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3348      	adds	r3, #72	; 0x48
 80046c8:	443b      	add	r3, r7
 80046ca:	3b28      	subs	r3, #40	; 0x28
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	488f      	ldr	r0, [pc, #572]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80046dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3348      	adds	r3, #72	; 0x48
 80046ea:	443b      	add	r3, r7
 80046ec:	3b28      	subs	r3, #40	; 0x28
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4403      	add	r3, r0
 80046fe:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004700:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	3348      	adds	r3, #72	; 0x48
 800470e:	443b      	add	r3, r7
 8004710:	3b24      	subs	r3, #36	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d023      	beq.n	8004760 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004718:	497f      	ldr	r1, [pc, #508]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800471a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3348      	adds	r3, #72	; 0x48
 8004728:	443b      	add	r3, r7
 800472a:	3b24      	subs	r3, #36	; 0x24
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	4877      	ldr	r0, [pc, #476]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800473c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	3348      	adds	r3, #72	; 0x48
 800474a:	443b      	add	r3, r7
 800474c:	3b24      	subs	r3, #36	; 0x24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4403      	add	r3, r0
 800475e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004760:	4a6d      	ldr	r2, [pc, #436]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	3b01      	subs	r3, #1
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004774:	025b      	lsls	r3, r3, #9
 8004776:	431a      	orrs	r2, r3
 8004778:	4967      	ldr	r1, [pc, #412]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800478a:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 0203 	bic.w	r2, r3, #3
 800479c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	495d      	ldr	r1, [pc, #372]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d014      	beq.n	80047e6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80047bc:	4a56      	ldr	r2, [pc, #344]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d0:	015b      	lsls	r3, r3, #5
 80047d2:	431a      	orrs	r2, r3
 80047d4:	4950      	ldr	r1, [pc, #320]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	f042 0210 	orr.w	r2, r2, #16
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d019      	beq.n	8004826 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80047f2:	4a49      	ldr	r2, [pc, #292]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	049b      	lsls	r3, r3, #18
 800480c:	431a      	orrs	r2, r3
 800480e:	4942      	ldr	r1, [pc, #264]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	3b01      	subs	r3, #1
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	e01c      	b.n	8004860 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800482e:	4a3a      	ldr	r2, [pc, #232]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	3b01      	subs	r3, #1
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	431a      	orrs	r2, r3
 800484a:	4933      	ldr	r1, [pc, #204]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	3b01      	subs	r3, #1
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d019      	beq.n	80048a0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	3b01      	subs	r3, #1
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	049b      	lsls	r3, r3, #18
 8004886:	431a      	orrs	r2, r3
 8004888:	4923      	ldr	r1, [pc, #140]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	3b01      	subs	r3, #1
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e01c      	b.n	80048da <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	431a      	orrs	r2, r3
 80048c4:	4914      	ldr	r1, [pc, #80]	; (8004918 <HAL_OSPIM_Config+0x65c>)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80048da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <HAL_OSPIM_Config+0x660>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <HAL_OSPIM_Config+0x660>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80048f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_OSPIM_Config+0x664>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a07      	ldr	r2, [pc, #28]	; (8004920 <HAL_OSPIM_Config+0x664>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800490a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800490e:	4618      	mov	r0, r3
 8004910:	3748      	adds	r7, #72	; 0x48
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	50061c00 	.word	0x50061c00
 800491c:	a0001000 	.word	0xa0001000
 8004920:	a0001400 	.word	0xa0001400

08004924 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004934:	e01a      	b.n	800496c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d016      	beq.n	800496c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fd ffd5 	bl	80028ec <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e00e      	b.n	800498a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a1a      	ldr	r2, [r3, #32]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d1d6      	bne.n	8004936 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d114      	bne.n	8004a02 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049e0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80049ea:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80049f4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e013      	b.n	8004a2a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a0a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a14:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004a1e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	431a      	orrs	r2, r3
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	4319      	orrs	r1, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	431a      	orrs	r2, r3
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 021f 	bic.w	r2, r3, #31
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	431a      	orrs	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3a01      	subs	r2, #1
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8099 	beq.w	8004bd0 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d055      	beq.n	8004b52 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01e      	beq.n	8004aec <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <OSPI_ConfigCmd+0x2c0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68d1      	ldr	r1, [r2, #12]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	6952      	ldr	r2, [r2, #20]
 8004abe:	4311      	orrs	r1, r2
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	6912      	ldr	r2, [r2, #16]
 8004ac4:	4311      	orrs	r1, r2
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	69d2      	ldr	r2, [r2, #28]
 8004aca:	4311      	orrs	r1, r2
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad0:	4311      	orrs	r1, r2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	6a12      	ldr	r2, [r2, #32]
 8004ad6:	4311      	orrs	r1, r2
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004adc:	4311      	orrs	r1, r2
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e028      	b.n	8004b3e <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	68d1      	ldr	r1, [r2, #12]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	6952      	ldr	r2, [r2, #20]
 8004b00:	4311      	orrs	r1, r2
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	6912      	ldr	r2, [r2, #16]
 8004b06:	4311      	orrs	r1, r2
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	69d2      	ldr	r2, [r2, #28]
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b12:	4311      	orrs	r1, r2
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6a12      	ldr	r2, [r2, #32]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b28:	d109      	bne.n	8004b3e <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d105      	bne.n	8004b3e <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6992      	ldr	r2, [r2, #24]
 8004b4e:	649a      	str	r2, [r3, #72]	; 0x48
 8004b50:	e078      	b.n	8004c44 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004b62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68d1      	ldr	r1, [r2, #12]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	6952      	ldr	r2, [r2, #20]
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6912      	ldr	r2, [r2, #16]
 8004b74:	4311      	orrs	r1, r2
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b80:	430a      	orrs	r2, r1
 8004b82:	431a      	orrs	r2, r3
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e01d      	b.n	8004bc6 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68d9      	ldr	r1, [r3, #12]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4319      	orrs	r1, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb0:	d109      	bne.n	8004bc6 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d105      	bne.n	8004bc6 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e039      	b.n	8004c44 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d030      	beq.n	8004c3a <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d017      	beq.n	8004c10 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	69d1      	ldr	r1, [r2, #28]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bf4:	4311      	orrs	r1, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	6a12      	ldr	r2, [r2, #32]
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c00:	4311      	orrs	r1, r2
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c06:	430a      	orrs	r2, r1
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e00e      	b.n	8004c2e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	4319      	orrs	r1, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	430b      	orrs	r3, r1
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	6992      	ldr	r2, [r2, #24]
 8004c36:	649a      	str	r2, [r3, #72]	; 0x48
 8004c38:	e004      	b.n	8004c44 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	f0ffc0c0 	.word	0xf0ffc0c0

08004c58 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <OSPIM_GetConfig+0x26>
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d802      	bhi.n	8004c7e <OSPIM_GetConfig+0x26>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
 8004c82:	e08e      	b.n	8004da2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d101      	bne.n	8004cac <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <OSPIM_GetConfig+0x158>)
 8004caa:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e074      	b.n	8004d9c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004cb2:	4a40      	ldr	r2, [pc, #256]	; (8004db4 <OSPIM_GetConfig+0x15c>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4053      	eors	r3, r2
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4053      	eors	r3, r2
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4053      	eors	r3, r2
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d018      	beq.n	8004d5a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4053      	eors	r3, r2
 8004d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d111      	bne.n	8004d5a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e005      	b.n	8004d5a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d018      	beq.n	8004d96 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4053      	eors	r3, r2
 8004d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d111      	bne.n	8004d96 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	611a      	str	r2, [r3, #16]
 8004d88:	e005      	b.n	8004d96 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d987      	bls.n	8004cb2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	04040222 	.word	0x04040222
 8004db4:	50061c00 	.word	0x50061c00

08004db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d102      	bne.n	8004dd0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dce:	e00b      	b.n	8004de8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dde:	d102      	bne.n	8004de6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de4:	e000      	b.n	8004de8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004de6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40007000 	.word	0x40007000

08004df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d141      	bne.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e06:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d131      	bne.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e14:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1a:	4a46      	ldr	r2, [pc, #280]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e2c:	4a41      	ldr	r2, [pc, #260]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2232      	movs	r2, #50	; 0x32
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	0c9b      	lsrs	r3, r3, #18
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e4a:	e002      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e52:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5e:	d102      	bne.n	8004e66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f2      	bne.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e66:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d158      	bne.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e057      	b.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e78:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7e:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e88:	e04d      	b.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e90:	d141      	bne.n	8004f16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e92:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d131      	bne.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea0:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea6:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb0:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eb8:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	; (8004f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2232      	movs	r2, #50	; 0x32
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	0c9b      	lsrs	r3, r3, #18
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed6:	e002      	b.n	8004ede <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d102      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f2      	bne.n	8004ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efe:	d112      	bne.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e011      	b.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f14:	e007      	b.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f1e:	4a05      	ldr	r2, [pc, #20]	; (8004f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f24:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40007000 	.word	0x40007000
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	431bde83 	.word	0x431bde83

08004f40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f000 bc08 	b.w	8005764 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f54:	4b96      	ldr	r3, [pc, #600]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f5e:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80e4 	beq.w	800513e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4c>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	f040 808b 	bne.w	800509a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	f040 8087 	bne.w	800509a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f8c:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x64>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e3df      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <HAL_RCC_OscConfig+0x7e>
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbc:	e005      	b.n	8004fca <HAL_RCC_OscConfig+0x8a>
 8004fbe:	4b7c      	ldr	r3, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d223      	bcs.n	8005016 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fdfe 	bl	8005bd4 <RCC_SetFlashLatencyFromMSIRange>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e3c0      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fe2:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a72      	ldr	r2, [pc, #456]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004fe8:	f043 0308 	orr.w	r3, r3, #8
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	496d      	ldr	r1, [pc, #436]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005000:	4b6b      	ldr	r3, [pc, #428]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	4968      	ldr	r1, [pc, #416]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	e025      	b.n	8005062 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005016:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a65      	ldr	r2, [pc, #404]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800501c:	f043 0308 	orr.w	r3, r3, #8
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4b63      	ldr	r3, [pc, #396]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	4960      	ldr	r1, [pc, #384]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005034:	4b5e      	ldr	r3, [pc, #376]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	495b      	ldr	r1, [pc, #364]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fdbe 	bl	8005bd4 <RCC_SetFlashLatencyFromMSIRange>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e380      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005062:	f000 fcc1 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b51      	ldr	r3, [pc, #324]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	4950      	ldr	r1, [pc, #320]	; (80051b4 <HAL_RCC_OscConfig+0x274>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	fa22 f303 	lsr.w	r3, r2, r3
 800507e:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <HAL_RCC_OscConfig+0x278>)
 8005080:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005082:	4b4e      	ldr	r3, [pc, #312]	; (80051bc <HAL_RCC_OscConfig+0x27c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc f828 	bl	80010dc <HAL_InitTick>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d052      	beq.n	800513c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	e364      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d032      	beq.n	8005108 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a42      	ldr	r2, [pc, #264]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ae:	f7fd fc1d 	bl	80028ec <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050b6:	f7fd fc19 	bl	80028ec <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e34d      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d4:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a35      	ldr	r2, [pc, #212]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050da:	f043 0308 	orr.w	r3, r3, #8
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	4930      	ldr	r1, [pc, #192]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f2:	4b2f      	ldr	r3, [pc, #188]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	492b      	ldr	r1, [pc, #172]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
 8005106:	e01a      	b.n	800513e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005108:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005114:	f7fd fbea 	bl	80028ec <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800511c:	f7fd fbe6 	bl	80028ec <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e31a      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x1dc>
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800513c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d073      	beq.n	8005232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d005      	beq.n	800515c <HAL_RCC_OscConfig+0x21c>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d10e      	bne.n	8005174 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d10b      	bne.n	8005174 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d063      	beq.n	8005230 <HAL_RCC_OscConfig+0x2f0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d15f      	bne.n	8005230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e2f7      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d106      	bne.n	800518c <HAL_RCC_OscConfig+0x24c>
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e025      	b.n	80051d8 <HAL_RCC_OscConfig+0x298>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005194:	d114      	bne.n	80051c0 <HAL_RCC_OscConfig+0x280>
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a05      	ldr	r2, [pc, #20]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 800519c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a02      	ldr	r2, [pc, #8]	; (80051b0 <HAL_RCC_OscConfig+0x270>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e013      	b.n	80051d8 <HAL_RCC_OscConfig+0x298>
 80051b0:	40021000 	.word	0x40021000
 80051b4:	08009b40 	.word	0x08009b40
 80051b8:	20000000 	.word	0x20000000
 80051bc:	200000ac 	.word	0x200000ac
 80051c0:	4ba0      	ldr	r3, [pc, #640]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a9f      	ldr	r2, [pc, #636]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80051c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b9d      	ldr	r3, [pc, #628]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a9c      	ldr	r2, [pc, #624]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80051d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fb84 	bl	80028ec <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fd fb80 	bl	80028ec <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e2b4      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	4b92      	ldr	r3, [pc, #584]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2a8>
 8005206:	e014      	b.n	8005232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fd fb70 	bl	80028ec <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005210:	f7fd fb6c 	bl	80028ec <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	; 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e2a0      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x2d0>
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d060      	beq.n	8005300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d005      	beq.n	8005250 <HAL_RCC_OscConfig+0x310>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d119      	bne.n	800527e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d116      	bne.n	800527e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	4b7c      	ldr	r3, [pc, #496]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCC_OscConfig+0x328>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e27d      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	061b      	lsls	r3, r3, #24
 8005276:	4973      	ldr	r1, [pc, #460]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527c:	e040      	b.n	8005300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d023      	beq.n	80052ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005286:	4b6f      	ldr	r3, [pc, #444]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6e      	ldr	r2, [pc, #440]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800528c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fd fb2b 	bl	80028ec <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7fd fb27 	bl	80028ec <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e25b      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ac:	4b65      	ldr	r3, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	4b62      	ldr	r3, [pc, #392]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	495f      	ldr	r1, [pc, #380]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
 80052cc:	e018      	b.n	8005300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ce:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5c      	ldr	r2, [pc, #368]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fd fb07 	bl	80028ec <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e2:	f7fd fb03 	bl	80028ec <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e237      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03c      	beq.n	8005386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01c      	beq.n	800534e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005314:	4b4b      	ldr	r3, [pc, #300]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531a:	4a4a      	ldr	r2, [pc, #296]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fd fae2 	bl	80028ec <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532c:	f7fd fade 	bl	80028ec <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e212      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ef      	beq.n	800532c <HAL_RCC_OscConfig+0x3ec>
 800534c:	e01b      	b.n	8005386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534e:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005354:	4a3b      	ldr	r2, [pc, #236]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535e:	f7fd fac5 	bl	80028ec <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005366:	f7fd fac1 	bl	80028ec <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e1f5      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005378:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800537a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ef      	bne.n	8005366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a6 	beq.w	80054e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005398:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	4a26      	ldr	r2, [pc, #152]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6593      	str	r3, [r2, #88]	; 0x58
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c0:	4b21      	ldr	r3, [pc, #132]	; (8005448 <HAL_RCC_OscConfig+0x508>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d118      	bne.n	80053fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053cc:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <HAL_RCC_OscConfig+0x508>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_RCC_OscConfig+0x508>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d8:	f7fd fa88 	bl	80028ec <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fd fa84 	bl	80028ec <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e1b8      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <HAL_RCC_OscConfig+0x508>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d108      	bne.n	8005418 <HAL_RCC_OscConfig+0x4d8>
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005416:	e029      	b.n	800546c <HAL_RCC_OscConfig+0x52c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b05      	cmp	r3, #5
 800541e:	d115      	bne.n	800544c <HAL_RCC_OscConfig+0x50c>
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a07      	ldr	r2, [pc, #28]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_RCC_OscConfig+0x504>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005440:	e014      	b.n	800546c <HAL_RCC_OscConfig+0x52c>
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
 800544c:	4b9d      	ldr	r3, [pc, #628]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	4a9c      	ldr	r2, [pc, #624]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800545c:	4b99      	ldr	r3, [pc, #612]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	4a98      	ldr	r2, [pc, #608]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fd fa3a 	bl	80028ec <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fd fa36 	bl	80028ec <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e168      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005492:	4b8c      	ldr	r3, [pc, #560]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ed      	beq.n	800547c <HAL_RCC_OscConfig+0x53c>
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fd fa23 	bl	80028ec <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fd fa1f 	bl	80028ec <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e151      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054c0:	4b80      	ldr	r3, [pc, #512]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1ed      	bne.n	80054aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d4:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	4a7a      	ldr	r2, [pc, #488]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03c      	beq.n	8005566 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f4:	4b73      	ldr	r3, [pc, #460]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80054f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fa:	4a72      	ldr	r2, [pc, #456]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fd f9f2 	bl	80028ec <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550c:	f7fd f9ee 	bl	80028ec <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e122      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800551e:	4b69      	ldr	r3, [pc, #420]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCC_OscConfig+0x5cc>
 800552c:	e01b      	b.n	8005566 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800552e:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fd f9d5 	bl	80028ec <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005546:	f7fd f9d1 	bl	80028ec <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e105      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005558:	4b5a      	ldr	r3, [pc, #360]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800555a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ef      	bne.n	8005546 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80f9 	beq.w	8005762 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	2b02      	cmp	r3, #2
 8005576:	f040 80cf 	bne.w	8005718 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800557a:	4b52      	ldr	r3, [pc, #328]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f003 0203 	and.w	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	429a      	cmp	r2, r3
 800558c:	d12c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	3b01      	subs	r3, #1
 800559a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d123      	bne.n	80055e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d11b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d113      	bne.n	80055e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d109      	bne.n	80055e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	3b01      	subs	r3, #1
 80055e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d071      	beq.n	80056cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d068      	beq.n	80056c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055ee:	4b35      	ldr	r3, [pc, #212]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80055fa:	4b32      	ldr	r3, [pc, #200]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0ac      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005614:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005616:	f7fd f969 	bl	80028ec <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561e:	f7fd f965 	bl	80028ec <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e099      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005630:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f0      	bne.n	800561e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x788>)
 8005642:	4013      	ands	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800564c:	3a01      	subs	r2, #1
 800564e:	0112      	lsls	r2, r2, #4
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005656:	0212      	lsls	r2, r2, #8
 8005658:	4311      	orrs	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800565e:	0852      	lsrs	r2, r2, #1
 8005660:	3a01      	subs	r2, #1
 8005662:	0552      	lsls	r2, r2, #21
 8005664:	4311      	orrs	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800566a:	0852      	lsrs	r2, r2, #1
 800566c:	3a01      	subs	r2, #1
 800566e:	0652      	lsls	r2, r2, #25
 8005670:	4311      	orrs	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005676:	06d2      	lsls	r2, r2, #27
 8005678:	430a      	orrs	r2, r1
 800567a:	4912      	ldr	r1, [pc, #72]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800567c:	4313      	orrs	r3, r2
 800567e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0f      	ldr	r2, [pc, #60]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 8005692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005698:	f7fd f928 	bl	80028ec <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fd f924 	bl	80028ec <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e058      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <HAL_RCC_OscConfig+0x784>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056be:	e050      	b.n	8005762 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e04f      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
 80056c4:	40021000 	.word	0x40021000
 80056c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056cc:	4b27      	ldr	r3, [pc, #156]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d144      	bne.n	8005762 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056d8:	4b24      	ldr	r3, [pc, #144]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a23      	ldr	r2, [pc, #140]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 80056de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056f0:	f7fd f8fc 	bl	80028ec <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fd f8f8 	bl	80028ec <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e02c      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b18      	ldr	r3, [pc, #96]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x7b8>
 8005716:	e024      	b.n	8005762 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b0c      	cmp	r3, #12
 800571c:	d01f      	beq.n	800575e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fd f8df 	bl	80028ec <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fd f8db 	bl	80028ec <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e00f      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	4905      	ldr	r1, [pc, #20]	; (800576c <HAL_RCC_OscConfig+0x82c>)
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_OscConfig+0x830>)
 8005758:	4013      	ands	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
 800575c:	e001      	b.n	8005762 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40021000 	.word	0x40021000
 8005770:	feeefffc 	.word	0xfeeefffc

08005774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e11d      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b90      	ldr	r3, [pc, #576]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d910      	bls.n	80057bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b8d      	ldr	r3, [pc, #564]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	498b      	ldr	r1, [pc, #556]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b89      	ldr	r3, [pc, #548]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e105      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d908      	bls.n	80057ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b7e      	ldr	r3, [pc, #504]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	497b      	ldr	r1, [pc, #492]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d079      	beq.n	80058ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d11e      	bne.n	800583c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fe:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0dc      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800580e:	f000 fa3b 	bl	8005c88 <RCC_GetSysClockFreqFromPLLSource>
 8005812:	4603      	mov	r3, r0
 8005814:	4a70      	ldr	r2, [pc, #448]	; (80059d8 <HAL_RCC_ClockConfig+0x264>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d946      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800581a:	4b6e      	ldr	r3, [pc, #440]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d140      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005826:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582e:	4a69      	ldr	r2, [pc, #420]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e035      	b.n	80058a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d107      	bne.n	8005854 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005844:	4b63      	ldr	r3, [pc, #396]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d115      	bne.n	800587c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0b9      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800585c:	4b5d      	ldr	r3, [pc, #372]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0ad      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800586c:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0a5      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800587c:	f000 f8b4 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 8005880:	4603      	mov	r3, r0
 8005882:	4a55      	ldr	r2, [pc, #340]	; (80059d8 <HAL_RCC_ClockConfig+0x264>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d90f      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005888:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005894:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589c:	4a4d      	ldr	r2, [pc, #308]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800589e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a8:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f023 0203 	bic.w	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4947      	ldr	r1, [pc, #284]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ba:	f7fd f817 	bl	80028ec <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c2:	f7fd f813 	bl	80028ec <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e077      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d8:	4b3e      	ldr	r3, [pc, #248]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 020c 	and.w	r2, r3, #12
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d1eb      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d105      	bne.n	80058fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058f0:	4b38      	ldr	r3, [pc, #224]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80058f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d010      	beq.n	800592a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005914:	429a      	cmp	r2, r3
 8005916:	d208      	bcs.n	800592a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005918:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	492b      	ldr	r1, [pc, #172]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800592a:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d210      	bcs.n	800595a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f023 020f 	bic.w	r2, r3, #15
 8005940:	4923      	ldr	r1, [pc, #140]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	4313      	orrs	r3, r2
 8005946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005948:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d001      	beq.n	800595a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e036      	b.n	80059c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005966:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4918      	ldr	r1, [pc, #96]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4910      	ldr	r1, [pc, #64]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005998:	f000 f826 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 800599c:	4602      	mov	r2, r0
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	091b      	lsrs	r3, r3, #4
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <HAL_RCC_ClockConfig+0x268>)
 80059aa:	5ccb      	ldrb	r3, [r1, r3]
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <HAL_RCC_ClockConfig+0x26c>)
 80059b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_RCC_ClockConfig+0x270>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fb fb8d 	bl	80010dc <HAL_InitTick>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40022000 	.word	0x40022000
 80059d4:	40021000 	.word	0x40021000
 80059d8:	04c4b400 	.word	0x04c4b400
 80059dc:	08009b40 	.word	0x08009b40
 80059e0:	20000000 	.word	0x20000000
 80059e4:	200000ac 	.word	0x200000ac

080059e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f6:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a00:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x34>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d121      	bne.n	8005a5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d11e      	bne.n	8005a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a28:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e005      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e004      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_RCC_GetSysClockFreq+0x114>)
 8005a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d134      	bne.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a76:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d003      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0xa6>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d003      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0xac>
 8005a8c:	e005      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a90:	617b      	str	r3, [r7, #20]
      break;
 8005a92:	e005      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCC_GetSysClockFreq+0x114>)
 8005a96:	617b      	str	r3, [r7, #20]
      break;
 8005a98:	e002      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	617b      	str	r3, [r7, #20]
      break;
 8005a9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	3301      	adds	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	fb03 f202 	mul.w	r2, r3, r2
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	0e5b      	lsrs	r3, r3, #25
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3724      	adds	r7, #36	; 0x24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	08009b58 	.word	0x08009b58
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	007a1200 	.word	0x007a1200

08005b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000000 	.word	0x20000000

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	08009b50 	.word	0x08009b50

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b48:	f7ff ffda 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0adb      	lsrs	r3, r3, #11
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	08009b50 	.word	0x08009b50

08005b70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	220f      	movs	r2, #15
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0203 	and.w	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_GetClockConfig+0x5c>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_RCC_GetClockConfig+0x60>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 020f 	and.w	r2, r3, #15
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40022000 	.word	0x40022000

08005bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bec:	f7ff f8e4 	bl	8004db8 <HAL_PWREx_GetVoltageRange>
 8005bf0:	6178      	str	r0, [r7, #20]
 8005bf2:	e014      	b.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c0c:	f7ff f8d4 	bl	8004db8 <HAL_PWREx_GetVoltageRange>
 8005c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c24:	d10b      	bne.n	8005c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d913      	bls.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8005c30:	d902      	bls.n	8005c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c32:	2302      	movs	r3, #2
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	e00d      	b.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c38:	2301      	movs	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	e00a      	b.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b7f      	cmp	r3, #127	; 0x7f
 8005c42:	d902      	bls.n	8005c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c44:	2302      	movs	r3, #2
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	e004      	b.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d101      	bne.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c50:	2301      	movs	r3, #1
 8005c52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 020f 	bic.w	r2, r3, #15
 8005c5c:	4909      	ldr	r1, [pc, #36]	; (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d001      	beq.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40022000 	.word	0x40022000

08005c88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d00b      	beq.n	8005cb6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d825      	bhi.n	8005cf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d008      	beq.n	8005cbc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d11f      	bne.n	8005cf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005cb0:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cb2:	613b      	str	r3, [r7, #16]
    break;
 8005cb4:	e01f      	b.n	8005cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005cb6:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005cb8:	613b      	str	r3, [r7, #16]
    break;
 8005cba:	e01c      	b.n	8005cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cbc:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d107      	bne.n	8005cd8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e005      	b.n	8005ce4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	613b      	str	r3, [r7, #16]
    break;
 8005cee:	e002      	b.n	8005cf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
    break;
 8005cf4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cf6:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	3301      	adds	r3, #1
 8005d02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	fb03 f202 	mul.w	r2, r3, r2
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	0e5b      	lsrs	r3, r3, #25
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d36:	683b      	ldr	r3, [r7, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40021000 	.word	0x40021000
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	08009b58 	.word	0x08009b58

08005d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d60:	2300      	movs	r3, #0
 8005d62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d040      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d02a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d825      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d7c:	2b60      	cmp	r3, #96	; 0x60
 8005d7e:	d026      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d80:	2b60      	cmp	r3, #96	; 0x60
 8005d82:	d821      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d006      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d81d      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d010      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d94:	e018      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d96:	4b89      	ldr	r3, [pc, #548]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	4a88      	ldr	r2, [pc, #544]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005da2:	e015      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb02 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3320      	adds	r3, #32
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fbed 	bl	800659c <RCCEx_PLLSAI2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	74fb      	strb	r3, [r7, #19]
      break;
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dd6:	4b79      	ldr	r3, [pc, #484]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ddc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de4:	4975      	ldr	r1, [pc, #468]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005dec:	e001      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d047      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d030      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0c:	d82a      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e12:	d02a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e18:	d824      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1e:	d008      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e24:	d81e      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e30:	e018      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e32:	4b62      	ldr	r3, [pc, #392]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	4a61      	ldr	r2, [pc, #388]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e3e:	e015      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fab4 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e50:	e00c      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3320      	adds	r3, #32
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fb9f 	bl	800659c <RCCEx_PLLSAI2_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e62:	e003      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	74fb      	strb	r3, [r7, #19]
      break;
 8005e68:	e000      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e72:	4b52      	ldr	r3, [pc, #328]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	494e      	ldr	r1, [pc, #312]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e88:	e001      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	7cfb      	ldrb	r3, [r7, #19]
 8005e8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 809f 	beq.w	8005fda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ea0:	4b46      	ldr	r3, [pc, #280]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb6:	4b41      	ldr	r3, [pc, #260]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	4a40      	ldr	r2, [pc, #256]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ec2:	4b3e      	ldr	r3, [pc, #248]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ede:	f7fc fd05 	bl	80028ec <HAL_GetTick>
 8005ee2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ee4:	e009      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fc fd01 	bl	80028ec <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d902      	bls.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ef8:	e005      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005efa:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0ef      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d15b      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f0c:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01f      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d019      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f36:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f46:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	4a1b      	ldr	r2, [pc, #108]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f56:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc fcc0 	bl	80028ec <HAL_GetTick>
 8005f6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fc fcbc 	bl	80028ec <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d902      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	74fb      	strb	r3, [r7, #19]
            break;
 8005f86:	e006      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f88:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ec      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fac:	4903      	ldr	r1, [pc, #12]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	74bb      	strb	r3, [r7, #18]
 8005fba:	e005      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fc8:	7c7b      	ldrb	r3, [r7, #17]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fce:	4ba0      	ldr	r3, [pc, #640]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	4a9f      	ldr	r2, [pc, #636]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fe6:	4b9a      	ldr	r3, [pc, #616]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f023 0203 	bic.w	r2, r3, #3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	4996      	ldr	r1, [pc, #600]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006008:	4b91      	ldr	r3, [pc, #580]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f023 020c 	bic.w	r2, r3, #12
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	498e      	ldr	r1, [pc, #568]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800602a:	4b89      	ldr	r3, [pc, #548]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	4985      	ldr	r1, [pc, #532]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800604c:	4b80      	ldr	r3, [pc, #512]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	497d      	ldr	r1, [pc, #500]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800606e:	4b78      	ldr	r3, [pc, #480]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607c:	4974      	ldr	r1, [pc, #464]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006090:	4b6f      	ldr	r3, [pc, #444]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	496c      	ldr	r1, [pc, #432]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060b2:	4b67      	ldr	r3, [pc, #412]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c0:	4963      	ldr	r1, [pc, #396]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060d4:	4b5e      	ldr	r3, [pc, #376]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e2:	495b      	ldr	r1, [pc, #364]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060f6:	4b56      	ldr	r3, [pc, #344]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	4952      	ldr	r1, [pc, #328]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006118:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	494a      	ldr	r1, [pc, #296]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800613a:	4b45      	ldr	r3, [pc, #276]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	4941      	ldr	r1, [pc, #260]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800615c:	4b3c      	ldr	r3, [pc, #240]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	4939      	ldr	r1, [pc, #228]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d028      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800617e:	4b34      	ldr	r3, [pc, #208]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006184:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618c:	4930      	ldr	r1, [pc, #192]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619c:	d106      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619e:	4b2c      	ldr	r3, [pc, #176]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a8:	60d3      	str	r3, [r2, #12]
 80061aa:	e011      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 f8f9 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d04d      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e4:	d108      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ec:	4a18      	ldr	r2, [pc, #96]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80061f6:	e012      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061fe:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006204:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006216:	490e      	ldr	r1, [pc, #56]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006226:	d106      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006228:	4b09      	ldr	r3, [pc, #36]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	e020      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800623e:	d109      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006240:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	4a02      	ldr	r2, [pc, #8]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624a:	60d3      	str	r3, [r2, #12]
 800624c:	e014      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800625c:	d10c      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3304      	adds	r3, #4
 8006262:	2101      	movs	r1, #1
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f8a5 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d028      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006284:	4b4a      	ldr	r3, [pc, #296]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006292:	4947      	ldr	r1, [pc, #284]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a2:	d106      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a4:	4b42      	ldr	r3, [pc, #264]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a41      	ldr	r2, [pc, #260]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ae:	60d3      	str	r3, [r2, #12]
 80062b0:	e011      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ba:	d10c      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	2101      	movs	r1, #1
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f876 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80062d2:	7cfb      	ldrb	r3, [r7, #19]
 80062d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062e2:	4b33      	ldr	r3, [pc, #204]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f2:	492f      	ldr	r1, [pc, #188]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	2102      	movs	r1, #2
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f851 	bl	80063b4 <RCCEx_PLLSAI1_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006332:	f023 0204 	bic.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633c:	491c      	ldr	r1, [pc, #112]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006356:	f023 0218 	bic.w	r2, r3, #24
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	4913      	ldr	r1, [pc, #76]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	490a      	ldr	r1, [pc, #40]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006396:	d105      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800639e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000

080063b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063c2:	4b72      	ldr	r3, [pc, #456]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063ce:	4b6f      	ldr	r3, [pc, #444]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0203 	and.w	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d103      	bne.n	80063e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
       ||
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d142      	bne.n	800646c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
 80063ea:	e03f      	b.n	800646c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d018      	beq.n	8006426 <RCCEx_PLLSAI1_Config+0x72>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d825      	bhi.n	8006444 <RCCEx_PLLSAI1_Config+0x90>
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d002      	beq.n	8006402 <RCCEx_PLLSAI1_Config+0x4e>
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d009      	beq.n	8006414 <RCCEx_PLLSAI1_Config+0x60>
 8006400:	e020      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006402:	4b62      	ldr	r3, [pc, #392]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11d      	bne.n	800644a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006412:	e01a      	b.n	800644a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006414:	4b5d      	ldr	r3, [pc, #372]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641c:	2b00      	cmp	r3, #0
 800641e:	d116      	bne.n	800644e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006424:	e013      	b.n	800644e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006426:	4b59      	ldr	r3, [pc, #356]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006432:	4b56      	ldr	r3, [pc, #344]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006442:	e006      	b.n	8006452 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e004      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006452:	bf00      	nop
    }

    if(status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d108      	bne.n	800646c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800645a:	4b4c      	ldr	r3, [pc, #304]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f023 0203 	bic.w	r2, r3, #3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4949      	ldr	r1, [pc, #292]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006468:	4313      	orrs	r3, r2
 800646a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 8086 	bne.w	8006580 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006474:	4b45      	ldr	r3, [pc, #276]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a44      	ldr	r2, [pc, #272]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800647a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800647e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006480:	f7fc fa34 	bl	80028ec <HAL_GetTick>
 8006484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006486:	e009      	b.n	800649c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006488:	f7fc fa30 	bl	80028ec <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d902      	bls.n	800649c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	73fb      	strb	r3, [r7, #15]
        break;
 800649a:	e005      	b.n	80064a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800649c:	4b3b      	ldr	r3, [pc, #236]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ef      	bne.n	8006488 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d168      	bne.n	8006580 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d113      	bne.n	80064dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064b4:	4b35      	ldr	r3, [pc, #212]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	4b35      	ldr	r3, [pc, #212]	; (8006590 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6892      	ldr	r2, [r2, #8]
 80064c0:	0211      	lsls	r1, r2, #8
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68d2      	ldr	r2, [r2, #12]
 80064c6:	06d2      	lsls	r2, r2, #27
 80064c8:	4311      	orrs	r1, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6852      	ldr	r2, [r2, #4]
 80064ce:	3a01      	subs	r2, #1
 80064d0:	0112      	lsls	r2, r2, #4
 80064d2:	430a      	orrs	r2, r1
 80064d4:	492d      	ldr	r1, [pc, #180]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]
 80064da:	e02d      	b.n	8006538 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d115      	bne.n	800650e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064e2:	4b2a      	ldr	r3, [pc, #168]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6892      	ldr	r2, [r2, #8]
 80064ee:	0211      	lsls	r1, r2, #8
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6912      	ldr	r2, [r2, #16]
 80064f4:	0852      	lsrs	r2, r2, #1
 80064f6:	3a01      	subs	r2, #1
 80064f8:	0552      	lsls	r2, r2, #21
 80064fa:	4311      	orrs	r1, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6852      	ldr	r2, [r2, #4]
 8006500:	3a01      	subs	r2, #1
 8006502:	0112      	lsls	r2, r2, #4
 8006504:	430a      	orrs	r2, r1
 8006506:	4921      	ldr	r1, [pc, #132]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]
 800650c:	e014      	b.n	8006538 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800650e:	4b1f      	ldr	r3, [pc, #124]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6892      	ldr	r2, [r2, #8]
 800651a:	0211      	lsls	r1, r2, #8
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6952      	ldr	r2, [r2, #20]
 8006520:	0852      	lsrs	r2, r2, #1
 8006522:	3a01      	subs	r2, #1
 8006524:	0652      	lsls	r2, r2, #25
 8006526:	4311      	orrs	r1, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6852      	ldr	r2, [r2, #4]
 800652c:	3a01      	subs	r2, #1
 800652e:	0112      	lsls	r2, r2, #4
 8006530:	430a      	orrs	r2, r1
 8006532:	4916      	ldr	r1, [pc, #88]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006538:	4b14      	ldr	r3, [pc, #80]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a13      	ldr	r2, [pc, #76]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800653e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc f9d2 	bl	80028ec <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800654a:	e009      	b.n	8006560 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800654c:	f7fc f9ce 	bl	80028ec <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d902      	bls.n	8006560 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
          break;
 800655e:	e005      	b.n	800656c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ef      	beq.n	800654c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	4904      	ldr	r1, [pc, #16]	; (800658c <RCCEx_PLLSAI1_Config+0x1d8>)
 800657c:	4313      	orrs	r3, r2
 800657e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000
 8006590:	07ff800f 	.word	0x07ff800f
 8006594:	ff9f800f 	.word	0xff9f800f
 8006598:	f9ff800f 	.word	0xf9ff800f

0800659c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065aa:	4b72      	ldr	r3, [pc, #456]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00e      	beq.n	80065d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065b6:	4b6f      	ldr	r3, [pc, #444]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0203 	and.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d103      	bne.n	80065ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
       ||
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d142      	bne.n	8006654 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e03f      	b.n	8006654 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d018      	beq.n	800660e <RCCEx_PLLSAI2_Config+0x72>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d825      	bhi.n	800662c <RCCEx_PLLSAI2_Config+0x90>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d002      	beq.n	80065ea <RCCEx_PLLSAI2_Config+0x4e>
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d009      	beq.n	80065fc <RCCEx_PLLSAI2_Config+0x60>
 80065e8:	e020      	b.n	800662c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ea:	4b62      	ldr	r3, [pc, #392]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11d      	bne.n	8006632 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065fa:	e01a      	b.n	8006632 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065fc:	4b5d      	ldr	r3, [pc, #372]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d116      	bne.n	8006636 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800660c:	e013      	b.n	8006636 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800660e:	4b59      	ldr	r3, [pc, #356]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800661a:	4b56      	ldr	r3, [pc, #344]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800662a:	e006      	b.n	800663a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e004      	b.n	800663c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800663a:	bf00      	nop
    }

    if(status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d108      	bne.n	8006654 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006642:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f023 0203 	bic.w	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4949      	ldr	r1, [pc, #292]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006650:	4313      	orrs	r3, r2
 8006652:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8086 	bne.w	8006768 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800665c:	4b45      	ldr	r3, [pc, #276]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a44      	ldr	r2, [pc, #272]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006668:	f7fc f940 	bl	80028ec <HAL_GetTick>
 800666c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800666e:	e009      	b.n	8006684 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006670:	f7fc f93c 	bl	80028ec <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d902      	bls.n	8006684 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	73fb      	strb	r3, [r7, #15]
        break;
 8006682:	e005      	b.n	8006690 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006684:	4b3b      	ldr	r3, [pc, #236]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ef      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d168      	bne.n	8006768 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d113      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800669c:	4b35      	ldr	r3, [pc, #212]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800669e:	695a      	ldr	r2, [r3, #20]
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <RCCEx_PLLSAI2_Config+0x1dc>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6892      	ldr	r2, [r2, #8]
 80066a8:	0211      	lsls	r1, r2, #8
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	06d2      	lsls	r2, r2, #27
 80066b0:	4311      	orrs	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	3a01      	subs	r2, #1
 80066b8:	0112      	lsls	r2, r2, #4
 80066ba:	430a      	orrs	r2, r1
 80066bc:	492d      	ldr	r1, [pc, #180]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	614b      	str	r3, [r1, #20]
 80066c2:	e02d      	b.n	8006720 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d115      	bne.n	80066f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066ca:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	4b2b      	ldr	r3, [pc, #172]	; (800677c <RCCEx_PLLSAI2_Config+0x1e0>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6892      	ldr	r2, [r2, #8]
 80066d6:	0211      	lsls	r1, r2, #8
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6912      	ldr	r2, [r2, #16]
 80066dc:	0852      	lsrs	r2, r2, #1
 80066de:	3a01      	subs	r2, #1
 80066e0:	0552      	lsls	r2, r2, #21
 80066e2:	4311      	orrs	r1, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6852      	ldr	r2, [r2, #4]
 80066e8:	3a01      	subs	r2, #1
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	430a      	orrs	r2, r1
 80066ee:	4921      	ldr	r1, [pc, #132]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	614b      	str	r3, [r1, #20]
 80066f4:	e014      	b.n	8006720 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066f6:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	4b21      	ldr	r3, [pc, #132]	; (8006780 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	0211      	lsls	r1, r2, #8
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6952      	ldr	r2, [r2, #20]
 8006708:	0852      	lsrs	r2, r2, #1
 800670a:	3a01      	subs	r2, #1
 800670c:	0652      	lsls	r2, r2, #25
 800670e:	4311      	orrs	r1, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	3a01      	subs	r2, #1
 8006716:	0112      	lsls	r2, r2, #4
 8006718:	430a      	orrs	r2, r1
 800671a:	4916      	ldr	r1, [pc, #88]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800671c:	4313      	orrs	r3, r2
 800671e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006720:	4b14      	ldr	r3, [pc, #80]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a13      	ldr	r2, [pc, #76]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fc f8de 	bl	80028ec <HAL_GetTick>
 8006730:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006732:	e009      	b.n	8006748 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006734:	f7fc f8da 	bl	80028ec <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d902      	bls.n	8006748 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	73fb      	strb	r3, [r7, #15]
          break;
 8006746:	e005      	b.n	8006754 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0ef      	beq.n	8006734 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	4904      	ldr	r1, [pc, #16]	; (8006774 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006764:	4313      	orrs	r3, r2
 8006766:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000
 8006778:	07ff800f 	.word	0x07ff800f
 800677c:	ff9f800f 	.word	0xff9f800f
 8006780:	f9ff800f 	.word	0xf9ff800f

08006784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e049      	b.n	800682a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f841 	bl	8006832 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f000 f9da 	bl	8006b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	d001      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e04f      	b.n	8006900 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a23      	ldr	r2, [pc, #140]	; (800690c <HAL_TIM_Base_Start_IT+0xc4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d01d      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d018      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <HAL_TIM_Base_Start_IT+0xc8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d013      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <HAL_TIM_Base_Start_IT+0xcc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00e      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <HAL_TIM_Base_Start_IT+0xd0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1b      	ldr	r2, [pc, #108]	; (800691c <HAL_TIM_Base_Start_IT+0xd4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d004      	beq.n	80068be <HAL_TIM_Base_Start_IT+0x76>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a19      	ldr	r2, [pc, #100]	; (8006920 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d115      	bne.n	80068ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	4b17      	ldr	r3, [pc, #92]	; (8006924 <HAL_TIM_Base_Start_IT+0xdc>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b06      	cmp	r3, #6
 80068ce:	d015      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0xb4>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d6:	d011      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e8:	e008      	b.n	80068fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e000      	b.n	80068fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40012c00 	.word	0x40012c00
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	00010007 	.word	0x00010007

08006928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d020      	beq.n	800698c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01b      	beq.n	800698c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0202 	mvn.w	r2, #2
 800695c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8e4 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8d6 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8e7 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0204 	mvn.w	r2, #4
 80069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8be 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8b0 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8c1 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d020      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0208 	mvn.w	r2, #8
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f898 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f88a 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f89b 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d020      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0210 	mvn.w	r2, #16
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2208      	movs	r2, #8
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f872 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f864 	bl	8006b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f875 	bl	8006b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0201 	mvn.w	r2, #1
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fa f96c 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f906 	bl	8006cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8fe 	bl	8006cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f834 	bl	8006b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0220 	mvn.w	r2, #32
 8006b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f8c6 	bl	8006cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9a:	d00f      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d01b      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <TIM_Base_SetConfig+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d017      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <TIM_Base_SetConfig+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <TIM_Base_SetConfig+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_Base_SetConfig+0x128>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <TIM_Base_SetConfig+0x12c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0x9a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	; (8006cac <TIM_Base_SetConfig+0x130>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a10      	ldr	r2, [pc, #64]	; (8006c90 <TIM_Base_SetConfig+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00f      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <TIM_Base_SetConfig+0x124>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00b      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a11      	ldr	r2, [pc, #68]	; (8006ca4 <TIM_Base_SetConfig+0x128>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d007      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <TIM_Base_SetConfig+0x12c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_Base_SetConfig+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a0f      	ldr	r2, [pc, #60]	; (8006cac <TIM_Base_SetConfig+0x130>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d103      	bne.n	8006c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	615a      	str	r2, [r3, #20]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e042      	b.n	8006d84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fa f985 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2224      	movs	r2, #36	; 0x24
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fbb4 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8b5 	bl	8006eac <UART_SetConfig>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e01b      	b.n	8006d84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc33 	bl	80075e8 <UART_CheckIdleState>
 8006d82:	4603      	mov	r3, r0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d17c      	bne.n	8006ea0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_UART_Transmit+0x26>
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e075      	b.n	8006ea2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2221      	movs	r2, #33	; 0x21
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc6:	f7fb fd91 	bl	80028ec <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d108      	bne.n	8006df8 <HAL_UART_Transmit+0x6c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e003      	b.n	8006e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e00:	e031      	b.n	8006e66 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fc95 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e03e      	b.n	8006ea2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10b      	bne.n	8006e42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e36:	b292      	uxth	r2, r2
 8006e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	61bb      	str	r3, [r7, #24]
 8006e40:	e008      	b.n	8006e54 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3301      	adds	r3, #1
 8006e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1c7      	bne.n	8006e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2140      	movs	r1, #64	; 0x40
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fc5d 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e006      	b.n	8006ea2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e000      	b.n	8006ea2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006ea0:	2302      	movs	r3, #2
  }
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb0:	b08c      	sub	sp, #48	; 0x30
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4baa      	ldr	r3, [pc, #680]	; (8007184 <UART_SetConfig+0x2d8>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a9f      	ldr	r2, [pc, #636]	; (8007188 <UART_SetConfig+0x2dc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	4313      	orrs	r3, r2
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	f023 010f 	bic.w	r1, r3, #15
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a90      	ldr	r2, [pc, #576]	; (800718c <UART_SetConfig+0x2e0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d125      	bne.n	8006f9c <UART_SetConfig+0xf0>
 8006f50:	4b8f      	ldr	r3, [pc, #572]	; (8007190 <UART_SetConfig+0x2e4>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d81a      	bhi.n	8006f94 <UART_SetConfig+0xe8>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0xb8>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f85 	.word	0x08006f85
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7a:	e116      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f82:	e112      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8a:	e10e      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f92:	e10a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9a:	e106      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7c      	ldr	r2, [pc, #496]	; (8007194 <UART_SetConfig+0x2e8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d138      	bne.n	8007018 <UART_SetConfig+0x16c>
 8006fa6:	4b7a      	ldr	r3, [pc, #488]	; (8007190 <UART_SetConfig+0x2e4>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fac:	f003 030c 	and.w	r3, r3, #12
 8006fb0:	2b0c      	cmp	r3, #12
 8006fb2:	d82d      	bhi.n	8007010 <UART_SetConfig+0x164>
 8006fb4:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <UART_SetConfig+0x110>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006ff1 	.word	0x08006ff1
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007001 	.word	0x08007001
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff6:	e0d8      	b.n	80071aa <UART_SetConfig+0x2fe>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffe:	e0d4      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007006:	e0d0      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700e:	e0cc      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007016:	e0c8      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5e      	ldr	r2, [pc, #376]	; (8007198 <UART_SetConfig+0x2ec>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d125      	bne.n	800706e <UART_SetConfig+0x1c2>
 8007022:	4b5b      	ldr	r3, [pc, #364]	; (8007190 <UART_SetConfig+0x2e4>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	d016      	beq.n	800705e <UART_SetConfig+0x1b2>
 8007030:	2b30      	cmp	r3, #48	; 0x30
 8007032:	d818      	bhi.n	8007066 <UART_SetConfig+0x1ba>
 8007034:	2b20      	cmp	r3, #32
 8007036:	d00a      	beq.n	800704e <UART_SetConfig+0x1a2>
 8007038:	2b20      	cmp	r3, #32
 800703a:	d814      	bhi.n	8007066 <UART_SetConfig+0x1ba>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <UART_SetConfig+0x19a>
 8007040:	2b10      	cmp	r3, #16
 8007042:	d008      	beq.n	8007056 <UART_SetConfig+0x1aa>
 8007044:	e00f      	b.n	8007066 <UART_SetConfig+0x1ba>
 8007046:	2300      	movs	r3, #0
 8007048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704c:	e0ad      	b.n	80071aa <UART_SetConfig+0x2fe>
 800704e:	2302      	movs	r3, #2
 8007050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007054:	e0a9      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007056:	2304      	movs	r3, #4
 8007058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800705c:	e0a5      	b.n	80071aa <UART_SetConfig+0x2fe>
 800705e:	2308      	movs	r3, #8
 8007060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007064:	e0a1      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007066:	2310      	movs	r3, #16
 8007068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706c:	e09d      	b.n	80071aa <UART_SetConfig+0x2fe>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a4a      	ldr	r2, [pc, #296]	; (800719c <UART_SetConfig+0x2f0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0x218>
 8007078:	4b45      	ldr	r3, [pc, #276]	; (8007190 <UART_SetConfig+0x2e4>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007082:	2bc0      	cmp	r3, #192	; 0xc0
 8007084:	d016      	beq.n	80070b4 <UART_SetConfig+0x208>
 8007086:	2bc0      	cmp	r3, #192	; 0xc0
 8007088:	d818      	bhi.n	80070bc <UART_SetConfig+0x210>
 800708a:	2b80      	cmp	r3, #128	; 0x80
 800708c:	d00a      	beq.n	80070a4 <UART_SetConfig+0x1f8>
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d814      	bhi.n	80070bc <UART_SetConfig+0x210>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <UART_SetConfig+0x1f0>
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x200>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x210>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a2:	e082      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e07e      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b2:	e07a      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ba:	e076      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e072      	b.n	80071aa <UART_SetConfig+0x2fe>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a35      	ldr	r2, [pc, #212]	; (80071a0 <UART_SetConfig+0x2f4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d12a      	bne.n	8007124 <UART_SetConfig+0x278>
 80070ce:	4b30      	ldr	r3, [pc, #192]	; (8007190 <UART_SetConfig+0x2e4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070dc:	d01a      	beq.n	8007114 <UART_SetConfig+0x268>
 80070de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e2:	d81b      	bhi.n	800711c <UART_SetConfig+0x270>
 80070e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e8:	d00c      	beq.n	8007104 <UART_SetConfig+0x258>
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ee:	d815      	bhi.n	800711c <UART_SetConfig+0x270>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <UART_SetConfig+0x250>
 80070f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f8:	d008      	beq.n	800710c <UART_SetConfig+0x260>
 80070fa:	e00f      	b.n	800711c <UART_SetConfig+0x270>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007102:	e052      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007104:	2302      	movs	r3, #2
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e04e      	b.n	80071aa <UART_SetConfig+0x2fe>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e04a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e046      	b.n	80071aa <UART_SetConfig+0x2fe>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e042      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <UART_SetConfig+0x2dc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d13a      	bne.n	80071a4 <UART_SetConfig+0x2f8>
 800712e:	4b18      	ldr	r3, [pc, #96]	; (8007190 <UART_SetConfig+0x2e4>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800713c:	d01a      	beq.n	8007174 <UART_SetConfig+0x2c8>
 800713e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007142:	d81b      	bhi.n	800717c <UART_SetConfig+0x2d0>
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007148:	d00c      	beq.n	8007164 <UART_SetConfig+0x2b8>
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714e:	d815      	bhi.n	800717c <UART_SetConfig+0x2d0>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <UART_SetConfig+0x2b0>
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007158:	d008      	beq.n	800716c <UART_SetConfig+0x2c0>
 800715a:	e00f      	b.n	800717c <UART_SetConfig+0x2d0>
 800715c:	2300      	movs	r3, #0
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e022      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e01e      	b.n	80071aa <UART_SetConfig+0x2fe>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007172:	e01a      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717a:	e016      	b.n	80071aa <UART_SetConfig+0x2fe>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007182:	e012      	b.n	80071aa <UART_SetConfig+0x2fe>
 8007184:	cfff69f3 	.word	0xcfff69f3
 8007188:	40008000 	.word	0x40008000
 800718c:	40013800 	.word	0x40013800
 8007190:	40021000 	.word	0x40021000
 8007194:	40004400 	.word	0x40004400
 8007198:	40004800 	.word	0x40004800
 800719c:	40004c00 	.word	0x40004c00
 80071a0:	40005000 	.word	0x40005000
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4aae      	ldr	r2, [pc, #696]	; (8007468 <UART_SetConfig+0x5bc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	f040 8097 	bne.w	80072e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d823      	bhi.n	8007206 <UART_SetConfig+0x35a>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <UART_SetConfig+0x318>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071e9 	.word	0x080071e9
 80071c8:	08007207 	.word	0x08007207
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	08007207 	.word	0x08007207
 80071d4:	080071f7 	.word	0x080071f7
 80071d8:	08007207 	.word	0x08007207
 80071dc:	08007207 	.word	0x08007207
 80071e0:	08007207 	.word	0x08007207
 80071e4:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e8:	f7fe fc96 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 80071ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ee:	e010      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b9e      	ldr	r3, [pc, #632]	; (800746c <UART_SetConfig+0x5c0>)
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071f4:	e00d      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fe fbf7 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 80071fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071fc:	e009      	b.n	8007212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007204:	e005      	b.n	8007212 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8130 	beq.w	800747a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	4a94      	ldr	r2, [pc, #592]	; (8007470 <UART_SetConfig+0x5c4>)
 8007220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007224:	461a      	mov	r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	fbb3 f3f2 	udiv	r3, r3, r2
 800722c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4413      	add	r3, r2
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	429a      	cmp	r2, r3
 800723c:	d305      	bcc.n	800724a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d903      	bls.n	8007252 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007250:	e113      	b.n	800747a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	2200      	movs	r2, #0
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	60fa      	str	r2, [r7, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	4a84      	ldr	r2, [pc, #528]	; (8007470 <UART_SetConfig+0x5c4>)
 8007260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007264:	b29b      	uxth	r3, r3
 8007266:	2200      	movs	r2, #0
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007274:	f7f9 f814 	bl	80002a0 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	020b      	lsls	r3, r1, #8
 800728a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800728e:	0202      	lsls	r2, r0, #8
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	6849      	ldr	r1, [r1, #4]
 8007294:	0849      	lsrs	r1, r1, #1
 8007296:	2000      	movs	r0, #0
 8007298:	460c      	mov	r4, r1
 800729a:	4605      	mov	r5, r0
 800729c:	eb12 0804 	adds.w	r8, r2, r4
 80072a0:	eb43 0905 	adc.w	r9, r3, r5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	469a      	mov	sl, r3
 80072ac:	4693      	mov	fp, r2
 80072ae:	4652      	mov	r2, sl
 80072b0:	465b      	mov	r3, fp
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f8 fff3 	bl	80002a0 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4613      	mov	r3, r2
 80072c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c8:	d308      	bcc.n	80072dc <UART_SetConfig+0x430>
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d0:	d204      	bcs.n	80072dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e0ce      	b.n	800747a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072e2:	e0ca      	b.n	800747a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ec:	d166      	bne.n	80073bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80072ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d827      	bhi.n	8007346 <UART_SetConfig+0x49a>
 80072f6:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <UART_SetConfig+0x450>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007329 	.word	0x08007329
 8007304:	08007331 	.word	0x08007331
 8007308:	08007347 	.word	0x08007347
 800730c:	08007337 	.word	0x08007337
 8007310:	08007347 	.word	0x08007347
 8007314:	08007347 	.word	0x08007347
 8007318:	08007347 	.word	0x08007347
 800731c:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007320:	f7fe fbfa 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8007324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007326:	e014      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007328:	f7fe fc0c 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800732c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b4e      	ldr	r3, [pc, #312]	; (800746c <UART_SetConfig+0x5c0>)
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fe fb57 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 800733a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8090 	beq.w	800747a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	4a44      	ldr	r2, [pc, #272]	; (8007470 <UART_SetConfig+0x5c4>)
 8007360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007364:	461a      	mov	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	fbb3 f3f2 	udiv	r3, r3, r2
 800736c:	005a      	lsls	r2, r3, #1
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	441a      	add	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	fbb2 f3f3 	udiv	r3, r2, r3
 800737e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d916      	bls.n	80073b4 <UART_SetConfig+0x508>
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738c:	d212      	bcs.n	80073b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f023 030f 	bic.w	r3, r3, #15
 8007396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	b29b      	uxth	r3, r3
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	8bfb      	ldrh	r3, [r7, #30]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	8bfa      	ldrh	r2, [r7, #30]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	e062      	b.n	800747a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073ba:	e05e      	b.n	800747a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d828      	bhi.n	8007416 <UART_SetConfig+0x56a>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0x520>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f9 	.word	0x080073f9
 80073d4:	08007401 	.word	0x08007401
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007407 	.word	0x08007407
 80073e0:	08007417 	.word	0x08007417
 80073e4:	08007417 	.word	0x08007417
 80073e8:	08007417 	.word	0x08007417
 80073ec:	0800740f 	.word	0x0800740f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fe fb92 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 80073f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f6:	e014      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f8:	f7fe fba4 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 80073fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073fe:	e010      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007400:	4b1a      	ldr	r3, [pc, #104]	; (800746c <UART_SetConfig+0x5c0>)
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007404:	e00d      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007406:	f7fe faef 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 800740a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007414:	e005      	b.n	8007422 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007420:	bf00      	nop
    }

    if (pclk != 0U)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d028      	beq.n	800747a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	4a10      	ldr	r2, [pc, #64]	; (8007470 <UART_SetConfig+0x5c4>)
 800742e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007432:	461a      	mov	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	fbb3 f2f2 	udiv	r2, r3, r2
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	441a      	add	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	fbb2 f3f3 	udiv	r3, r2, r3
 800744a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b0f      	cmp	r3, #15
 8007450:	d910      	bls.n	8007474 <UART_SetConfig+0x5c8>
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007458:	d20c      	bcs.n	8007474 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	b29a      	uxth	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60da      	str	r2, [r3, #12]
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x5ce>
 8007466:	bf00      	nop
 8007468:	40008000 	.word	0x40008000
 800746c:	00f42400 	.word	0x00f42400
 8007470:	08009b88 	.word	0x08009b88
      }
      else
      {
        ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2201      	movs	r2, #1
 800747e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2201      	movs	r2, #1
 8007486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007496:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800749a:	4618      	mov	r0, r3
 800749c:	3730      	adds	r7, #48	; 0x30
 800749e:	46bd      	mov	sp, r7
 80074a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01a      	beq.n	80075ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a2:	d10a      	bne.n	80075ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b098      	sub	sp, #96	; 0x60
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f8:	f7fb f978 	bl	80028ec <HAL_GetTick>
 80075fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d12f      	bne.n	800766c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007614:	2200      	movs	r2, #0
 8007616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f88e 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d022      	beq.n	800766c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763a:	653b      	str	r3, [r7, #80]	; 0x50
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007644:	647b      	str	r3, [r7, #68]	; 0x44
 8007646:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800764a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e063      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b04      	cmp	r3, #4
 8007678:	d149      	bne.n	800770e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007682:	2200      	movs	r2, #0
 8007684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f857 	bl	800773c <UART_WaitOnFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d03c      	beq.n	800770e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	623b      	str	r3, [r7, #32]
   return(result);
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30
 80076b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e6:	61fa      	str	r2, [r7, #28]
 80076e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	617b      	str	r3, [r7, #20]
   return(result);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e012      	b.n	8007734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3758      	adds	r7, #88	; 0x58
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774c:	e049      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d045      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fb f8c9 	bl	80028ec <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <UART_WaitOnFlagUntilTimeout+0x30>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e048      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d031      	beq.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d110      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2208      	movs	r2, #8
 8007792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f838 	bl	800780a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2208      	movs	r2, #8
 800779e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e029      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077bc:	d111      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f81e 	bl	800780a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e00f      	b.n	8007802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4013      	ands	r3, r2
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	bf0c      	ite	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	2300      	movne	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d0a6      	beq.n	800774e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800780a:	b480      	push	{r7}
 800780c:	b095      	sub	sp, #84	; 0x54
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
 8007832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	61fb      	str	r3, [r7, #28]
   return(result);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e3      	bne.n	8007844 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d118      	bne.n	80078b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	60bb      	str	r3, [r7, #8]
   return(result);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	647b      	str	r3, [r7, #68]	; 0x44
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	613b      	str	r3, [r7, #16]
   return(result);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e6      	bne.n	8007884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078ca:	bf00      	nop
 80078cc:	3754      	adds	r7, #84	; 0x54
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_UARTEx_DisableFifoMode+0x16>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e027      	b.n	800793c <HAL_UARTEx_DisableFifoMode+0x66>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800791a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e02d      	b.n	80079bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	; 0x24
 800796c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f84f 	bl	8007a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e02d      	b.n	8007a38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2224      	movs	r2, #36	; 0x24
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f811 	bl	8007a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d108      	bne.n	8007a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a60:	e031      	b.n	8007ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a62:	2308      	movs	r3, #8
 8007a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a66:	2308      	movs	r3, #8
 8007a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	0e5b      	lsrs	r3, r3, #25
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	0f5b      	lsrs	r3, r3, #29
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	7b3a      	ldrb	r2, [r7, #12]
 8007a8e:	4911      	ldr	r1, [pc, #68]	; (8007ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a90:	5c8a      	ldrb	r2, [r1, r2]
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a96:	7b3a      	ldrb	r2, [r7, #12]
 8007a98:	490f      	ldr	r1, [pc, #60]	; (8007ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8007a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	7b7a      	ldrb	r2, [r7, #13]
 8007aac:	4909      	ldr	r1, [pc, #36]	; (8007ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8007aae:	5c8a      	ldrb	r2, [r1, r2]
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ab4:	7b7a      	ldrb	r2, [r7, #13]
 8007ab6:	4908      	ldr	r1, [pc, #32]	; (8007ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	08009ba0 	.word	0x08009ba0
 8007ad8:	08009ba8 	.word	0x08009ba8

08007adc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aee:	2b84      	cmp	r3, #132	; 0x84
 8007af0:	d005      	beq.n	8007afe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	3303      	adds	r3, #3
 8007afc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b10:	f000 faf6 	bl	8008100 <vTaskStartScheduler>
  
  return osOK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1c:	b089      	sub	sp, #36	; 0x24
 8007b1e:	af04      	add	r7, sp, #16
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d020      	beq.n	8007b6e <osThreadCreate+0x54>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01c      	beq.n	8007b6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685c      	ldr	r4, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691e      	ldr	r6, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ffc8 	bl	8007adc <makeFreeRtosPriority>
 8007b4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b56:	9202      	str	r2, [sp, #8]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	9100      	str	r1, [sp, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4629      	mov	r1, r5
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f8ed 	bl	8007d42 <xTaskCreateStatic>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e01c      	b.n	8007ba8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685c      	ldr	r4, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ffaa 	bl	8007adc <makeFreeRtosPriority>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	f107 030c 	add.w	r3, r7, #12
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	9200      	str	r2, [sp, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	4632      	mov	r2, r6
 8007b96:	4629      	mov	r1, r5
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 f92f 	bl	8007dfc <xTaskCreate>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d001      	beq.n	8007ba8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <osDelay+0x16>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	e000      	b.n	8007bca <osDelay+0x18>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fa64 	bl	8008098 <vTaskDelay>
  
  return osOK;
 8007bd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f103 0208 	add.w	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 0208 	add.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f103 0208 	add.w	r2, r3, #8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d103      	bne.n	8007c9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e00c      	b.n	8007cb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e002      	b.n	8007caa <vListInsert+0x2e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d2f6      	bcs.n	8007ca4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6892      	ldr	r2, [r2, #8]
 8007d04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6852      	ldr	r2, [r2, #4]
 8007d0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d103      	bne.n	8007d22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b08e      	sub	sp, #56	; 0x38
 8007d46:	af04      	add	r7, sp, #16
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61fb      	str	r3, [r7, #28]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d88:	23a0      	movs	r3, #160	; 0xa0
 8007d8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007d90:	d00a      	beq.n	8007da8 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	61bb      	str	r3, [r7, #24]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007da8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01e      	beq.n	8007dee <xTaskCreateStatic+0xac>
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01b      	beq.n	8007dee <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dbe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	f107 0314 	add.w	r3, r7, #20
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f851 	bl	8007e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007de8:	f000 f8ec 	bl	8007fc4 <prvAddNewTaskToReadyList>
 8007dec:	e001      	b.n	8007df2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007df2:	697b      	ldr	r3, [r7, #20]
	}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3728      	adds	r7, #40	; 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fef1 	bl	8008bf8 <pvPortMalloc>
 8007e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e1e:	20a0      	movs	r0, #160	; 0xa0
 8007e20:	f000 feea 	bl	8008bf8 <pvPortMalloc>
 8007e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
 8007e32:	e005      	b.n	8007e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e34:	6978      	ldr	r0, [r7, #20]
 8007e36:	f000 ffab 	bl	8008d90 <vPortFree>
 8007e3a:	e001      	b.n	8007e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d017      	beq.n	8007e76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e4e:	88fa      	ldrh	r2, [r7, #6]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f80f 	bl	8007e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e6a:	69f8      	ldr	r0, [r7, #28]
 8007e6c:	f000 f8aa 	bl	8007fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e70:	2301      	movs	r3, #1
 8007e72:	61bb      	str	r3, [r7, #24]
 8007e74:	e002      	b.n	8007e7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	617b      	str	r3, [r7, #20]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01f      	beq.n	8007f16 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e012      	b.n	8007f02 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	7819      	ldrb	r1, [r3, #0]
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	4413      	add	r3, r2
 8007eea:	3334      	adds	r3, #52	; 0x34
 8007eec:	460a      	mov	r2, r1
 8007eee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d006      	beq.n	8007f0a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3301      	adds	r3, #1
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b0f      	cmp	r3, #15
 8007f06:	d9e9      	bls.n	8007edc <prvInitialiseNewTask+0x54>
 8007f08:	e000      	b.n	8007f0c <prvInitialiseNewTask+0x84>
			{
				break;
 8007f0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f14:	e003      	b.n	8007f1e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	2b06      	cmp	r3, #6
 8007f22:	d901      	bls.n	8007f28 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f24:	2306      	movs	r3, #6
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2200      	movs	r2, #0
 8007f38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fe6b 	bl	8007c1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	3318      	adds	r3, #24
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe66 	bl	8007c1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	f1c3 0207 	rsb	r2, r3, #7
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	334c      	adds	r3, #76	; 0x4c
 8007f78:	224c      	movs	r2, #76	; 0x4c
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f859 	bl	8009034 <memset>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <prvInitialiseNewTask+0x130>)
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <prvInitialiseNewTask+0x134>)
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	4a0b      	ldr	r2, [pc, #44]	; (8007fc0 <prvInitialiseNewTask+0x138>)
 8007f92:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	69b8      	ldr	r0, [r7, #24]
 8007f9a:	f000 fc1f 	bl	80087dc <pxPortInitialiseStack>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	3720      	adds	r7, #32
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20001e94 	.word	0x20001e94
 8007fbc:	20001efc 	.word	0x20001efc
 8007fc0:	20001f64 	.word	0x20001f64

08007fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fcc:	f000 fd32 	bl	8008a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fd0:	4b2a      	ldr	r3, [pc, #168]	; (800807c <prvAddNewTaskToReadyList+0xb8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	4a29      	ldr	r2, [pc, #164]	; (800807c <prvAddNewTaskToReadyList+0xb8>)
 8007fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fda:	4b29      	ldr	r3, [pc, #164]	; (8008080 <prvAddNewTaskToReadyList+0xbc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fe2:	4a27      	ldr	r2, [pc, #156]	; (8008080 <prvAddNewTaskToReadyList+0xbc>)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fe8:	4b24      	ldr	r3, [pc, #144]	; (800807c <prvAddNewTaskToReadyList+0xb8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d110      	bne.n	8008012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ff0:	f000 facc 	bl	800858c <prvInitialiseTaskLists>
 8007ff4:	e00d      	b.n	8008012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <prvAddNewTaskToReadyList+0xc0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ffe:	4b20      	ldr	r3, [pc, #128]	; (8008080 <prvAddNewTaskToReadyList+0xbc>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d802      	bhi.n	8008012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <prvAddNewTaskToReadyList+0xbc>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008012:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <prvAddNewTaskToReadyList+0xc4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <prvAddNewTaskToReadyList+0xc4>)
 800801a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	2201      	movs	r2, #1
 8008022:	409a      	lsls	r2, r3
 8008024:	4b19      	ldr	r3, [pc, #100]	; (800808c <prvAddNewTaskToReadyList+0xc8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4313      	orrs	r3, r2
 800802a:	4a18      	ldr	r2, [pc, #96]	; (800808c <prvAddNewTaskToReadyList+0xc8>)
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a15      	ldr	r2, [pc, #84]	; (8008090 <prvAddNewTaskToReadyList+0xcc>)
 800803c:	441a      	add	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7ff fdf5 	bl	8007c34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800804a:	f000 fd23 	bl	8008a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <prvAddNewTaskToReadyList+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvAddNewTaskToReadyList+0xbc>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	429a      	cmp	r2, r3
 8008062:	d207      	bcs.n	8008074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <prvAddNewTaskToReadyList+0xd0>)
 8008066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20001288 	.word	0x20001288
 8008080:	20001188 	.word	0x20001188
 8008084:	20001294 	.word	0x20001294
 8008088:	200012a4 	.word	0x200012a4
 800808c:	20001290 	.word	0x20001290
 8008090:	2000118c 	.word	0x2000118c
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <vTaskDelay+0x60>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <vTaskDelay+0x30>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60bb      	str	r3, [r7, #8]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080c8:	f000 f884 	bl	80081d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080cc:	2100      	movs	r1, #0
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fb1e 	bl	8008710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080d4:	f000 f88c 	bl	80081f0 <xTaskResumeAll>
 80080d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <vTaskDelay+0x64>)
 80080e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	200012b0 	.word	0x200012b0
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	; 0x28
 8008104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800810e:	463a      	mov	r2, r7
 8008110:	1d39      	adds	r1, r7, #4
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f7f8 fa40 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	9202      	str	r2, [sp, #8]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	2300      	movs	r3, #0
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	460a      	mov	r2, r1
 800812e:	4921      	ldr	r1, [pc, #132]	; (80081b4 <vTaskStartScheduler+0xb4>)
 8008130:	4821      	ldr	r0, [pc, #132]	; (80081b8 <vTaskStartScheduler+0xb8>)
 8008132:	f7ff fe06 	bl	8007d42 <xTaskCreateStatic>
 8008136:	4603      	mov	r3, r0
 8008138:	4a20      	ldr	r2, [pc, #128]	; (80081bc <vTaskStartScheduler+0xbc>)
 800813a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800813c:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <vTaskStartScheduler+0xbc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e001      	b.n	800814e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d11b      	bne.n	800818c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	613b      	str	r3, [r7, #16]
}
 8008166:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <vTaskStartScheduler+0xc0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	334c      	adds	r3, #76	; 0x4c
 800816e:	4a15      	ldr	r2, [pc, #84]	; (80081c4 <vTaskStartScheduler+0xc4>)
 8008170:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <vTaskStartScheduler+0xc8>)
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800817a:	4b14      	ldr	r3, [pc, #80]	; (80081cc <vTaskStartScheduler+0xcc>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008180:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <vTaskStartScheduler+0xd0>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008186:	f000 fbb3 	bl	80088f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800818a:	e00e      	b.n	80081aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d10a      	bne.n	80081aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	60fb      	str	r3, [r7, #12]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <vTaskStartScheduler+0xa8>
}
 80081aa:	bf00      	nop
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	08009b38 	.word	0x08009b38
 80081b8:	0800855d 	.word	0x0800855d
 80081bc:	200012ac 	.word	0x200012ac
 80081c0:	20001188 	.word	0x20001188
 80081c4:	20000104 	.word	0x20000104
 80081c8:	200012a8 	.word	0x200012a8
 80081cc:	20001294 	.word	0x20001294
 80081d0:	2000128c 	.word	0x2000128c

080081d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <vTaskSuspendAll+0x18>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	4a03      	ldr	r2, [pc, #12]	; (80081ec <vTaskSuspendAll+0x18>)
 80081e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081e2:	bf00      	nop
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	200012b0 	.word	0x200012b0

080081f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081fe:	4b41      	ldr	r3, [pc, #260]	; (8008304 <xTaskResumeAll+0x114>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <xTaskResumeAll+0x2c>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	603b      	str	r3, [r7, #0]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800821c:	f000 fc0a 	bl	8008a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008220:	4b38      	ldr	r3, [pc, #224]	; (8008304 <xTaskResumeAll+0x114>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3b01      	subs	r3, #1
 8008226:	4a37      	ldr	r2, [pc, #220]	; (8008304 <xTaskResumeAll+0x114>)
 8008228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822a:	4b36      	ldr	r3, [pc, #216]	; (8008304 <xTaskResumeAll+0x114>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d161      	bne.n	80082f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008232:	4b35      	ldr	r3, [pc, #212]	; (8008308 <xTaskResumeAll+0x118>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d05d      	beq.n	80082f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800823a:	e02e      	b.n	800829a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823c:	4b33      	ldr	r3, [pc, #204]	; (800830c <xTaskResumeAll+0x11c>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3318      	adds	r3, #24
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fd50 	bl	8007cee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3304      	adds	r3, #4
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff fd4b 	bl	8007cee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	2201      	movs	r2, #1
 800825e:	409a      	lsls	r2, r3
 8008260:	4b2b      	ldr	r3, [pc, #172]	; (8008310 <xTaskResumeAll+0x120>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4313      	orrs	r3, r2
 8008266:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <xTaskResumeAll+0x120>)
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4a27      	ldr	r2, [pc, #156]	; (8008314 <xTaskResumeAll+0x124>)
 8008278:	441a      	add	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3304      	adds	r3, #4
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f7ff fcd7 	bl	8007c34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828a:	4b23      	ldr	r3, [pc, #140]	; (8008318 <xTaskResumeAll+0x128>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008294:	4b21      	ldr	r3, [pc, #132]	; (800831c <xTaskResumeAll+0x12c>)
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800829a:	4b1c      	ldr	r3, [pc, #112]	; (800830c <xTaskResumeAll+0x11c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1cc      	bne.n	800823c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082a8:	f000 fa12 	bl	80086d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082ac:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <xTaskResumeAll+0x130>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d010      	beq.n	80082da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082b8:	f000 f836 	bl	8008328 <xTaskIncrementTick>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <xTaskResumeAll+0x12c>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f1      	bne.n	80082b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80082d4:	4b12      	ldr	r3, [pc, #72]	; (8008320 <xTaskResumeAll+0x130>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082da:	4b10      	ldr	r3, [pc, #64]	; (800831c <xTaskResumeAll+0x12c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d009      	beq.n	80082f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082e2:	2301      	movs	r3, #1
 80082e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <xTaskResumeAll+0x134>)
 80082e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082f6:	f000 fbcd 	bl	8008a94 <vPortExitCritical>

	return xAlreadyYielded;
 80082fa:	68bb      	ldr	r3, [r7, #8]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	200012b0 	.word	0x200012b0
 8008308:	20001288 	.word	0x20001288
 800830c:	20001248 	.word	0x20001248
 8008310:	20001290 	.word	0x20001290
 8008314:	2000118c 	.word	0x2000118c
 8008318:	20001188 	.word	0x20001188
 800831c:	2000129c 	.word	0x2000129c
 8008320:	20001298 	.word	0x20001298
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008332:	4b4e      	ldr	r3, [pc, #312]	; (800846c <xTaskIncrementTick+0x144>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f040 808e 	bne.w	8008458 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800833c:	4b4c      	ldr	r3, [pc, #304]	; (8008470 <xTaskIncrementTick+0x148>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008344:	4a4a      	ldr	r2, [pc, #296]	; (8008470 <xTaskIncrementTick+0x148>)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d120      	bne.n	8008392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008350:	4b48      	ldr	r3, [pc, #288]	; (8008474 <xTaskIncrementTick+0x14c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <xTaskIncrementTick+0x48>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <xTaskIncrementTick+0x46>
 8008370:	4b40      	ldr	r3, [pc, #256]	; (8008474 <xTaskIncrementTick+0x14c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	4b40      	ldr	r3, [pc, #256]	; (8008478 <xTaskIncrementTick+0x150>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3e      	ldr	r2, [pc, #248]	; (8008474 <xTaskIncrementTick+0x14c>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	4a3e      	ldr	r2, [pc, #248]	; (8008478 <xTaskIncrementTick+0x150>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	4b3d      	ldr	r3, [pc, #244]	; (800847c <xTaskIncrementTick+0x154>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	4a3c      	ldr	r2, [pc, #240]	; (800847c <xTaskIncrementTick+0x154>)
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	f000 f99f 	bl	80086d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008392:	4b3b      	ldr	r3, [pc, #236]	; (8008480 <xTaskIncrementTick+0x158>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	429a      	cmp	r2, r3
 800839a:	d348      	bcc.n	800842e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839c:	4b35      	ldr	r3, [pc, #212]	; (8008474 <xTaskIncrementTick+0x14c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	4b36      	ldr	r3, [pc, #216]	; (8008480 <xTaskIncrementTick+0x158>)
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	601a      	str	r2, [r3, #0]
					break;
 80083ae:	e03e      	b.n	800842e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b0:	4b30      	ldr	r3, [pc, #192]	; (8008474 <xTaskIncrementTick+0x14c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d203      	bcs.n	80083d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083c8:	4a2d      	ldr	r2, [pc, #180]	; (8008480 <xTaskIncrementTick+0x158>)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083ce:	e02e      	b.n	800842e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff fc8a 	bl	8007cee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	3318      	adds	r3, #24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fc81 	bl	8007cee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	2201      	movs	r2, #1
 80083f2:	409a      	lsls	r2, r3
 80083f4:	4b23      	ldr	r3, [pc, #140]	; (8008484 <xTaskIncrementTick+0x15c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	4a22      	ldr	r2, [pc, #136]	; (8008484 <xTaskIncrementTick+0x15c>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <xTaskIncrementTick+0x160>)
 800840c:	441a      	add	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7ff fc0d 	bl	8007c34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841e:	4b1b      	ldr	r3, [pc, #108]	; (800848c <xTaskIncrementTick+0x164>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	429a      	cmp	r2, r3
 8008426:	d3b9      	bcc.n	800839c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842c:	e7b6      	b.n	800839c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800842e:	4b17      	ldr	r3, [pc, #92]	; (800848c <xTaskIncrementTick+0x164>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	4914      	ldr	r1, [pc, #80]	; (8008488 <xTaskIncrementTick+0x160>)
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d901      	bls.n	800844a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008446:	2301      	movs	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <xTaskIncrementTick+0x168>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	e004      	b.n	8008462 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008458:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <xTaskIncrementTick+0x16c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <xTaskIncrementTick+0x16c>)
 8008460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008462:	697b      	ldr	r3, [r7, #20]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	200012b0 	.word	0x200012b0
 8008470:	2000128c 	.word	0x2000128c
 8008474:	20001240 	.word	0x20001240
 8008478:	20001244 	.word	0x20001244
 800847c:	200012a0 	.word	0x200012a0
 8008480:	200012a8 	.word	0x200012a8
 8008484:	20001290 	.word	0x20001290
 8008488:	2000118c 	.word	0x2000118c
 800848c:	20001188 	.word	0x20001188
 8008490:	2000129c 	.word	0x2000129c
 8008494:	20001298 	.word	0x20001298

08008498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800849e:	4b29      	ldr	r3, [pc, #164]	; (8008544 <vTaskSwitchContext+0xac>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084a6:	4b28      	ldr	r3, [pc, #160]	; (8008548 <vTaskSwitchContext+0xb0>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084ac:	e044      	b.n	8008538 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80084ae:	4b26      	ldr	r3, [pc, #152]	; (8008548 <vTaskSwitchContext+0xb0>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <vTaskSwitchContext+0xb4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	fab3 f383 	clz	r3, r3
 80084c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	f1c3 031f 	rsb	r3, r3, #31
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	4921      	ldr	r1, [pc, #132]	; (8008550 <vTaskSwitchContext+0xb8>)
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vTaskSwitchContext+0x5a>
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4a14      	ldr	r2, [pc, #80]	; (8008550 <vTaskSwitchContext+0xb8>)
 8008500:	4413      	add	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	605a      	str	r2, [r3, #4]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3308      	adds	r3, #8
 8008516:	429a      	cmp	r2, r3
 8008518:	d104      	bne.n	8008524 <vTaskSwitchContext+0x8c>
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	605a      	str	r2, [r3, #4]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <vTaskSwitchContext+0xbc>)
 800852c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <vTaskSwitchContext+0xbc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	334c      	adds	r3, #76	; 0x4c
 8008534:	4a08      	ldr	r2, [pc, #32]	; (8008558 <vTaskSwitchContext+0xc0>)
 8008536:	6013      	str	r3, [r2, #0]
}
 8008538:	bf00      	nop
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	200012b0 	.word	0x200012b0
 8008548:	2000129c 	.word	0x2000129c
 800854c:	20001290 	.word	0x20001290
 8008550:	2000118c 	.word	0x2000118c
 8008554:	20001188 	.word	0x20001188
 8008558:	20000104 	.word	0x20000104

0800855c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008564:	f000 f852 	bl	800860c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <prvIdleTask+0x28>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d9f9      	bls.n	8008564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <prvIdleTask+0x2c>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008580:	e7f0      	b.n	8008564 <prvIdleTask+0x8>
 8008582:	bf00      	nop
 8008584:	2000118c 	.word	0x2000118c
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008592:	2300      	movs	r3, #0
 8008594:	607b      	str	r3, [r7, #4]
 8008596:	e00c      	b.n	80085b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4a12      	ldr	r2, [pc, #72]	; (80085ec <prvInitialiseTaskLists+0x60>)
 80085a4:	4413      	add	r3, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fb17 	bl	8007bda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3301      	adds	r3, #1
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b06      	cmp	r3, #6
 80085b6:	d9ef      	bls.n	8008598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085b8:	480d      	ldr	r0, [pc, #52]	; (80085f0 <prvInitialiseTaskLists+0x64>)
 80085ba:	f7ff fb0e 	bl	8007bda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085be:	480d      	ldr	r0, [pc, #52]	; (80085f4 <prvInitialiseTaskLists+0x68>)
 80085c0:	f7ff fb0b 	bl	8007bda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085c4:	480c      	ldr	r0, [pc, #48]	; (80085f8 <prvInitialiseTaskLists+0x6c>)
 80085c6:	f7ff fb08 	bl	8007bda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085ca:	480c      	ldr	r0, [pc, #48]	; (80085fc <prvInitialiseTaskLists+0x70>)
 80085cc:	f7ff fb05 	bl	8007bda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085d0:	480b      	ldr	r0, [pc, #44]	; (8008600 <prvInitialiseTaskLists+0x74>)
 80085d2:	f7ff fb02 	bl	8007bda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <prvInitialiseTaskLists+0x78>)
 80085d8:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <prvInitialiseTaskLists+0x64>)
 80085da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <prvInitialiseTaskLists+0x7c>)
 80085de:	4a05      	ldr	r2, [pc, #20]	; (80085f4 <prvInitialiseTaskLists+0x68>)
 80085e0:	601a      	str	r2, [r3, #0]
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	2000118c 	.word	0x2000118c
 80085f0:	20001218 	.word	0x20001218
 80085f4:	2000122c 	.word	0x2000122c
 80085f8:	20001248 	.word	0x20001248
 80085fc:	2000125c 	.word	0x2000125c
 8008600:	20001274 	.word	0x20001274
 8008604:	20001240 	.word	0x20001240
 8008608:	20001244 	.word	0x20001244

0800860c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008612:	e019      	b.n	8008648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008614:	f000 fa0e 	bl	8008a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <prvCheckTasksWaitingTermination+0x50>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff fb62 	bl	8007cee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800862a:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <prvCheckTasksWaitingTermination+0x54>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3b01      	subs	r3, #1
 8008630:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <prvCheckTasksWaitingTermination+0x54>)
 8008632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008634:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <prvCheckTasksWaitingTermination+0x58>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3b01      	subs	r3, #1
 800863a:	4a0a      	ldr	r2, [pc, #40]	; (8008664 <prvCheckTasksWaitingTermination+0x58>)
 800863c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800863e:	f000 fa29 	bl	8008a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f810 	bl	8008668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <prvCheckTasksWaitingTermination+0x58>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e1      	bne.n	8008614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	2000125c 	.word	0x2000125c
 8008660:	20001288 	.word	0x20001288
 8008664:	20001270 	.word	0x20001270

08008668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	334c      	adds	r3, #76	; 0x4c
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fce5 	bl	8009044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008680:	2b00      	cmp	r3, #0
 8008682:	d108      	bne.n	8008696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fb81 	bl	8008d90 <vPortFree>
				vPortFree( pxTCB );
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb7e 	bl	8008d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008694:	e018      	b.n	80086c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800869c:	2b01      	cmp	r3, #1
 800869e:	d103      	bne.n	80086a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fb75 	bl	8008d90 <vPortFree>
	}
 80086a6:	e00f      	b.n	80086c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d00a      	beq.n	80086c8 <prvDeleteTCB+0x60>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	60fb      	str	r3, [r7, #12]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <prvDeleteTCB+0x5e>
	}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <prvResetNextTaskUnblockTime+0x38>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <prvResetNextTaskUnblockTime+0x3c>)
 80086e2:	f04f 32ff 	mov.w	r2, #4294967295
 80086e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086e8:	e008      	b.n	80086fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <prvResetNextTaskUnblockTime+0x38>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a04      	ldr	r2, [pc, #16]	; (800870c <prvResetNextTaskUnblockTime+0x3c>)
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	20001240 	.word	0x20001240
 800870c:	200012a8 	.word	0x200012a8

08008710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800871a:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008720:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3304      	adds	r3, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fae1 	bl	8007cee <uxListRemove>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	2201      	movs	r2, #1
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	43da      	mvns	r2, r3
 8008740:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4013      	ands	r3, r2
 8008746:	4a20      	ldr	r2, [pc, #128]	; (80087c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008748:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d10a      	bne.n	8008768 <prvAddCurrentTaskToDelayedList+0x58>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	481a      	ldr	r0, [pc, #104]	; (80087cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008762:	f7ff fa67 	bl	8007c34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008766:	e026      	b.n	80087b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4413      	add	r3, r2
 800876e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d209      	bcs.n	8008794 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008780:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3304      	adds	r3, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7ff fa75 	bl	8007c7c <vListInsert>
}
 8008792:	e010      	b.n	80087b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008794:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3304      	adds	r3, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7ff fa6b 	bl	8007c7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d202      	bcs.n	80087b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087b0:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6013      	str	r3, [r2, #0]
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000128c 	.word	0x2000128c
 80087c4:	20001188 	.word	0x20001188
 80087c8:	20001290 	.word	0x20001290
 80087cc:	20001274 	.word	0x20001274
 80087d0:	20001244 	.word	0x20001244
 80087d4:	20001240 	.word	0x20001240
 80087d8:	200012a8 	.word	0x200012a8

080087dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f023 0201 	bic.w	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800880c:	4a0c      	ldr	r2, [pc, #48]	; (8008840 <pxPortInitialiseStack+0x64>)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3b14      	subs	r3, #20
 8008816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3b04      	subs	r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f06f 0202 	mvn.w	r2, #2
 800882a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3b20      	subs	r3, #32
 8008830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008832:	68fb      	ldr	r3, [r7, #12]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	08008845 	.word	0x08008845

08008844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <prvTaskExitError+0x54>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008856:	d00a      	beq.n	800886e <prvTaskExitError+0x2a>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	60fb      	str	r3, [r7, #12]
}
 800886a:	bf00      	nop
 800886c:	e7fe      	b.n	800886c <prvTaskExitError+0x28>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60bb      	str	r3, [r7, #8]
}
 8008880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008882:	bf00      	nop
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0fc      	beq.n	8008884 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	200000b4 	.word	0x200000b4
 800889c:	00000000 	.word	0x00000000

080088a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <pxCurrentTCBConst2>)
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	6808      	ldr	r0, [r1, #0]
 80088a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	f380 8809 	msr	PSP, r0
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	4770      	bx	lr
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst2>:
 80088c0:	20001188 	.word	0x20001188
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088c8:	4808      	ldr	r0, [pc, #32]	; (80088ec <prvPortStartFirstTask+0x24>)
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f380 8808 	msr	MSP, r0
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8814 	msr	CONTROL, r0
 80088da:	b662      	cpsie	i
 80088dc:	b661      	cpsie	f
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	df00      	svc	0
 80088e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ea:	bf00      	nop
 80088ec:	e000ed08 	.word	0xe000ed08

080088f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088f6:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <xPortStartScheduler+0x120>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a46      	ldr	r2, [pc, #280]	; (8008a14 <xPortStartScheduler+0x124>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10a      	bne.n	8008916 <xPortStartScheduler+0x26>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008916:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <xPortStartScheduler+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3f      	ldr	r2, [pc, #252]	; (8008a18 <xPortStartScheduler+0x128>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10a      	bne.n	8008936 <xPortStartScheduler+0x46>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	60fb      	str	r3, [r7, #12]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008936:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <xPortStartScheduler+0x12c>)
 8008938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <xPortStartScheduler+0x130>)
 800895c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800895e:	4b31      	ldr	r3, [pc, #196]	; (8008a24 <xPortStartScheduler+0x134>)
 8008960:	2207      	movs	r2, #7
 8008962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008964:	e009      	b.n	800897a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008966:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <xPortStartScheduler+0x134>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <xPortStartScheduler+0x134>)
 800896e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d0ef      	beq.n	8008966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <xPortStartScheduler+0x134>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1c3 0307 	rsb	r3, r3, #7
 800898e:	2b04      	cmp	r3, #4
 8008990:	d00a      	beq.n	80089a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60bb      	str	r3, [r7, #8]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089a8:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <xPortStartScheduler+0x134>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <xPortStartScheduler+0x134>)
 80089bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <xPortStartScheduler+0x138>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <xPortStartScheduler+0x138>)
 80089cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089de:	f000 f8dd 	bl	8008b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089e2:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <xPortStartScheduler+0x13c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089e8:	f000 f8fc 	bl	8008be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <xPortStartScheduler+0x140>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0f      	ldr	r2, [pc, #60]	; (8008a30 <xPortStartScheduler+0x140>)
 80089f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089f8:	f7ff ff66 	bl	80088c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089fc:	f7ff fd4c 	bl	8008498 <vTaskSwitchContext>
	prvTaskExitError();
 8008a00:	f7ff ff20 	bl	8008844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed00 	.word	0xe000ed00
 8008a14:	410fc271 	.word	0x410fc271
 8008a18:	410fc270 	.word	0x410fc270
 8008a1c:	e000e400 	.word	0xe000e400
 8008a20:	200012b4 	.word	0x200012b4
 8008a24:	200012b8 	.word	0x200012b8
 8008a28:	e000ed20 	.word	0xe000ed20
 8008a2c:	200000b4 	.word	0x200000b4
 8008a30:	e000ef34 	.word	0xe000ef34

08008a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d10f      	bne.n	8008a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <vPortEnterCritical+0x5c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <vPortEnterCritical+0x4a>
	}
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	200000b4 	.word	0x200000b4
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a9a:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <vPortExitCritical+0x50>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <vPortExitCritical+0x24>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	607b      	str	r3, [r7, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <vPortExitCritical+0x50>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ac2:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <vPortExitCritical+0x42>
 8008aca:	2300      	movs	r3, #0
 8008acc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	200000b4 	.word	0x200000b4
	...

08008af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008af0:	f3ef 8009 	mrs	r0, PSP
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <pxCurrentTCBConst>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	f01e 0f10 	tst.w	lr, #16
 8008b00:	bf08      	it	eq
 8008b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0a:	6010      	str	r0, [r2, #0]
 8008b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b14:	f380 8811 	msr	BASEPRI, r0
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f7ff fcba 	bl	8008498 <vTaskSwitchContext>
 8008b24:	f04f 0000 	mov.w	r0, #0
 8008b28:	f380 8811 	msr	BASEPRI, r0
 8008b2c:	bc09      	pop	{r0, r3}
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	6808      	ldr	r0, [r1, #0]
 8008b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b36:	f01e 0f10 	tst.w	lr, #16
 8008b3a:	bf08      	it	eq
 8008b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b40:	f380 8809 	msr	PSP, r0
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst>:
 8008b50:	20001188 	.word	0x20001188
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b72:	f7ff fbd9 	bl	8008328 <xTaskIncrementTick>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <SysTick_Handler+0x40>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <vPortSetupTimerInterrupt+0x38>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <vPortSetupTimerInterrupt+0x3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <vPortSetupTimerInterrupt+0x40>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <vPortSetupTimerInterrupt+0x44>)
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	e000e010 	.word	0xe000e010
 8008bd4:	e000e018 	.word	0xe000e018
 8008bd8:	20000000 	.word	0x20000000
 8008bdc:	10624dd3 	.word	0x10624dd3
 8008be0:	e000e014 	.word	0xe000e014

08008be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bf4 <vPortEnableVFP+0x10>
 8008be8:	6801      	ldr	r1, [r0, #0]
 8008bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bee:	6001      	str	r1, [r0, #0]
 8008bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bf2:	bf00      	nop
 8008bf4:	e000ed88 	.word	0xe000ed88

08008bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c04:	f7ff fae6 	bl	80081d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c08:	4b5b      	ldr	r3, [pc, #364]	; (8008d78 <pvPortMalloc+0x180>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c10:	f000 f920 	bl	8008e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c14:	4b59      	ldr	r3, [pc, #356]	; (8008d7c <pvPortMalloc+0x184>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f040 8093 	bne.w	8008d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01d      	beq.n	8008c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c28:	2208      	movs	r2, #8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d014      	beq.n	8008c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f023 0307 	bic.w	r3, r3, #7
 8008c40:	3308      	adds	r3, #8
 8008c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <pvPortMalloc+0x6c>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	617b      	str	r3, [r7, #20]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d06e      	beq.n	8008d48 <pvPortMalloc+0x150>
 8008c6a:	4b45      	ldr	r3, [pc, #276]	; (8008d80 <pvPortMalloc+0x188>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d869      	bhi.n	8008d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c74:	4b43      	ldr	r3, [pc, #268]	; (8008d84 <pvPortMalloc+0x18c>)
 8008c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c78:	4b42      	ldr	r3, [pc, #264]	; (8008d84 <pvPortMalloc+0x18c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c7e:	e004      	b.n	8008c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d903      	bls.n	8008c9c <pvPortMalloc+0xa4>
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f1      	bne.n	8008c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c9c:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <pvPortMalloc+0x180>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d050      	beq.n	8008d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2208      	movs	r2, #8
 8008cac:	4413      	add	r3, r2
 8008cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d91f      	bls.n	8008d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	613b      	str	r3, [r7, #16]
}
 8008cec:	bf00      	nop
 8008cee:	e7fe      	b.n	8008cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d02:	69b8      	ldr	r0, [r7, #24]
 8008d04:	f000 f908 	bl	8008f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d08:	4b1d      	ldr	r3, [pc, #116]	; (8008d80 <pvPortMalloc+0x188>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	4a1b      	ldr	r2, [pc, #108]	; (8008d80 <pvPortMalloc+0x188>)
 8008d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d16:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <pvPortMalloc+0x188>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <pvPortMalloc+0x190>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d203      	bcs.n	8008d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d22:	4b17      	ldr	r3, [pc, #92]	; (8008d80 <pvPortMalloc+0x188>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <pvPortMalloc+0x190>)
 8008d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <pvPortMalloc+0x184>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <pvPortMalloc+0x194>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	4a11      	ldr	r2, [pc, #68]	; (8008d8c <pvPortMalloc+0x194>)
 8008d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d48:	f7ff fa52 	bl	80081f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <pvPortMalloc+0x174>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60fb      	str	r3, [r7, #12]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <pvPortMalloc+0x172>
	return pvReturn;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3728      	adds	r7, #40	; 0x28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20001e7c 	.word	0x20001e7c
 8008d7c:	20001e90 	.word	0x20001e90
 8008d80:	20001e80 	.word	0x20001e80
 8008d84:	20001e74 	.word	0x20001e74
 8008d88:	20001e84 	.word	0x20001e84
 8008d8c:	20001e88 	.word	0x20001e88

08008d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d04d      	beq.n	8008e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008da2:	2308      	movs	r3, #8
 8008da4:	425b      	negs	r3, r3
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <vPortFree+0xb8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4013      	ands	r3, r2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <vPortFree+0x44>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <vPortFree+0x62>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60bb      	str	r3, [r7, #8]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <vPortFree+0xb8>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d01e      	beq.n	8008e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11a      	bne.n	8008e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <vPortFree+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	401a      	ands	r2, r3
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e18:	f7ff f9dc 	bl	80081d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <vPortFree+0xbc>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	4a09      	ldr	r2, [pc, #36]	; (8008e4c <vPortFree+0xbc>)
 8008e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f000 f874 	bl	8008f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <vPortFree+0xc0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	4a06      	ldr	r2, [pc, #24]	; (8008e50 <vPortFree+0xc0>)
 8008e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e3a:	f7ff f9d9 	bl	80081f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e3e:	bf00      	nop
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20001e90 	.word	0x20001e90
 8008e4c:	20001e80 	.word	0x20001e80
 8008e50:	20001e8c 	.word	0x20001e8c

08008e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e60:	4b27      	ldr	r3, [pc, #156]	; (8008f00 <prvHeapInit+0xac>)
 8008e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0307 	bic.w	r3, r3, #7
 8008e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	4a1f      	ldr	r2, [pc, #124]	; (8008f00 <prvHeapInit+0xac>)
 8008e84:	4413      	add	r3, r2
 8008e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e8c:	4a1d      	ldr	r2, [pc, #116]	; (8008f04 <prvHeapInit+0xb0>)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <prvHeapInit+0xb0>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0307 	bic.w	r3, r3, #7
 8008eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4a15      	ldr	r2, [pc, #84]	; (8008f08 <prvHeapInit+0xb4>)
 8008eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <prvHeapInit+0xb4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <prvHeapInit+0xb4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <prvHeapInit+0xb4>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <prvHeapInit+0xb8>)
 8008ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <prvHeapInit+0xbc>)
 8008eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <prvHeapInit+0xc0>)
 8008eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	200012bc 	.word	0x200012bc
 8008f04:	20001e74 	.word	0x20001e74
 8008f08:	20001e7c 	.word	0x20001e7c
 8008f0c:	20001e84 	.word	0x20001e84
 8008f10:	20001e80 	.word	0x20001e80
 8008f14:	20001e90 	.word	0x20001e90

08008f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f20:	4b28      	ldr	r3, [pc, #160]	; (8008fc4 <prvInsertBlockIntoFreeList+0xac>)
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	e002      	b.n	8008f2c <prvInsertBlockIntoFreeList+0x14>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d8f7      	bhi.n	8008f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d108      	bne.n	8008f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	441a      	add	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	441a      	add	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d118      	bne.n	8008fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d00d      	beq.n	8008f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	441a      	add	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	e008      	b.n	8008fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f96:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e003      	b.n	8008fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d002      	beq.n	8008fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20001e74 	.word	0x20001e74
 8008fc8:	20001e7c 	.word	0x20001e7c

08008fcc <sniprintf>:
 8008fcc:	b40c      	push	{r2, r3}
 8008fce:	b530      	push	{r4, r5, lr}
 8008fd0:	4b17      	ldr	r3, [pc, #92]	; (8009030 <sniprintf+0x64>)
 8008fd2:	1e0c      	subs	r4, r1, #0
 8008fd4:	681d      	ldr	r5, [r3, #0]
 8008fd6:	b09d      	sub	sp, #116	; 0x74
 8008fd8:	da08      	bge.n	8008fec <sniprintf+0x20>
 8008fda:	238b      	movs	r3, #139	; 0x8b
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe2:	b01d      	add	sp, #116	; 0x74
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	b002      	add	sp, #8
 8008fea:	4770      	bx	lr
 8008fec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ff4:	bf14      	ite	ne
 8008ff6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ffa:	4623      	moveq	r3, r4
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009004:	9002      	str	r0, [sp, #8]
 8009006:	9006      	str	r0, [sp, #24]
 8009008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800900c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800900e:	ab21      	add	r3, sp, #132	; 0x84
 8009010:	a902      	add	r1, sp, #8
 8009012:	4628      	mov	r0, r5
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	f000 f9f7 	bl	8009408 <_svfiprintf_r>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	bfbc      	itt	lt
 800901e:	238b      	movlt	r3, #139	; 0x8b
 8009020:	602b      	strlt	r3, [r5, #0]
 8009022:	2c00      	cmp	r4, #0
 8009024:	d0dd      	beq.n	8008fe2 <sniprintf+0x16>
 8009026:	9b02      	ldr	r3, [sp, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e7d9      	b.n	8008fe2 <sniprintf+0x16>
 800902e:	bf00      	nop
 8009030:	20000104 	.word	0x20000104

08009034 <memset>:
 8009034:	4402      	add	r2, r0
 8009036:	4603      	mov	r3, r0
 8009038:	4293      	cmp	r3, r2
 800903a:	d100      	bne.n	800903e <memset+0xa>
 800903c:	4770      	bx	lr
 800903e:	f803 1b01 	strb.w	r1, [r3], #1
 8009042:	e7f9      	b.n	8009038 <memset+0x4>

08009044 <_reclaim_reent>:
 8009044:	4b29      	ldr	r3, [pc, #164]	; (80090ec <_reclaim_reent+0xa8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4283      	cmp	r3, r0
 800904a:	b570      	push	{r4, r5, r6, lr}
 800904c:	4604      	mov	r4, r0
 800904e:	d04b      	beq.n	80090e8 <_reclaim_reent+0xa4>
 8009050:	69c3      	ldr	r3, [r0, #28]
 8009052:	b143      	cbz	r3, 8009066 <_reclaim_reent+0x22>
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d144      	bne.n	80090e4 <_reclaim_reent+0xa0>
 800905a:	69e3      	ldr	r3, [r4, #28]
 800905c:	6819      	ldr	r1, [r3, #0]
 800905e:	b111      	cbz	r1, 8009066 <_reclaim_reent+0x22>
 8009060:	4620      	mov	r0, r4
 8009062:	f000 f87f 	bl	8009164 <_free_r>
 8009066:	6961      	ldr	r1, [r4, #20]
 8009068:	b111      	cbz	r1, 8009070 <_reclaim_reent+0x2c>
 800906a:	4620      	mov	r0, r4
 800906c:	f000 f87a 	bl	8009164 <_free_r>
 8009070:	69e1      	ldr	r1, [r4, #28]
 8009072:	b111      	cbz	r1, 800907a <_reclaim_reent+0x36>
 8009074:	4620      	mov	r0, r4
 8009076:	f000 f875 	bl	8009164 <_free_r>
 800907a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800907c:	b111      	cbz	r1, 8009084 <_reclaim_reent+0x40>
 800907e:	4620      	mov	r0, r4
 8009080:	f000 f870 	bl	8009164 <_free_r>
 8009084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009086:	b111      	cbz	r1, 800908e <_reclaim_reent+0x4a>
 8009088:	4620      	mov	r0, r4
 800908a:	f000 f86b 	bl	8009164 <_free_r>
 800908e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009090:	b111      	cbz	r1, 8009098 <_reclaim_reent+0x54>
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f866 	bl	8009164 <_free_r>
 8009098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800909a:	b111      	cbz	r1, 80090a2 <_reclaim_reent+0x5e>
 800909c:	4620      	mov	r0, r4
 800909e:	f000 f861 	bl	8009164 <_free_r>
 80090a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80090a4:	b111      	cbz	r1, 80090ac <_reclaim_reent+0x68>
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 f85c 	bl	8009164 <_free_r>
 80090ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090ae:	b111      	cbz	r1, 80090b6 <_reclaim_reent+0x72>
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 f857 	bl	8009164 <_free_r>
 80090b6:	6a23      	ldr	r3, [r4, #32]
 80090b8:	b1b3      	cbz	r3, 80090e8 <_reclaim_reent+0xa4>
 80090ba:	4620      	mov	r0, r4
 80090bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090c0:	4718      	bx	r3
 80090c2:	5949      	ldr	r1, [r1, r5]
 80090c4:	b941      	cbnz	r1, 80090d8 <_reclaim_reent+0x94>
 80090c6:	3504      	adds	r5, #4
 80090c8:	69e3      	ldr	r3, [r4, #28]
 80090ca:	2d80      	cmp	r5, #128	; 0x80
 80090cc:	68d9      	ldr	r1, [r3, #12]
 80090ce:	d1f8      	bne.n	80090c2 <_reclaim_reent+0x7e>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f847 	bl	8009164 <_free_r>
 80090d6:	e7c0      	b.n	800905a <_reclaim_reent+0x16>
 80090d8:	680e      	ldr	r6, [r1, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 f842 	bl	8009164 <_free_r>
 80090e0:	4631      	mov	r1, r6
 80090e2:	e7ef      	b.n	80090c4 <_reclaim_reent+0x80>
 80090e4:	2500      	movs	r5, #0
 80090e6:	e7ef      	b.n	80090c8 <_reclaim_reent+0x84>
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	bf00      	nop
 80090ec:	20000104 	.word	0x20000104

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	; (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20000104 	.word	0x20000104

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	4d0d      	ldr	r5, [pc, #52]	; (8009134 <__libc_init_array+0x38>)
 8009100:	4c0d      	ldr	r4, [pc, #52]	; (8009138 <__libc_init_array+0x3c>)
 8009102:	1b64      	subs	r4, r4, r5
 8009104:	10a4      	asrs	r4, r4, #2
 8009106:	2600      	movs	r6, #0
 8009108:	42a6      	cmp	r6, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	4d0b      	ldr	r5, [pc, #44]	; (800913c <__libc_init_array+0x40>)
 800910e:	4c0c      	ldr	r4, [pc, #48]	; (8009140 <__libc_init_array+0x44>)
 8009110:	f000 fc6a 	bl	80099e8 <_init>
 8009114:	1b64      	subs	r4, r4, r5
 8009116:	10a4      	asrs	r4, r4, #2
 8009118:	2600      	movs	r6, #0
 800911a:	42a6      	cmp	r6, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f855 3b04 	ldr.w	r3, [r5], #4
 8009124:	4798      	blx	r3
 8009126:	3601      	adds	r6, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f855 3b04 	ldr.w	r3, [r5], #4
 800912e:	4798      	blx	r3
 8009130:	3601      	adds	r6, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	08009bec 	.word	0x08009bec
 8009138:	08009bec 	.word	0x08009bec
 800913c:	08009bec 	.word	0x08009bec
 8009140:	08009bf0 	.word	0x08009bf0

08009144 <__retarget_lock_acquire_recursive>:
 8009144:	4770      	bx	lr

08009146 <__retarget_lock_release_recursive>:
 8009146:	4770      	bx	lr

08009148 <memcpy>:
 8009148:	440a      	add	r2, r1
 800914a:	4291      	cmp	r1, r2
 800914c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009150:	d100      	bne.n	8009154 <memcpy+0xc>
 8009152:	4770      	bx	lr
 8009154:	b510      	push	{r4, lr}
 8009156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800915e:	4291      	cmp	r1, r2
 8009160:	d1f9      	bne.n	8009156 <memcpy+0xe>
 8009162:	bd10      	pop	{r4, pc}

08009164 <_free_r>:
 8009164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009166:	2900      	cmp	r1, #0
 8009168:	d044      	beq.n	80091f4 <_free_r+0x90>
 800916a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916e:	9001      	str	r0, [sp, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f1a1 0404 	sub.w	r4, r1, #4
 8009176:	bfb8      	it	lt
 8009178:	18e4      	addlt	r4, r4, r3
 800917a:	f000 f8df 	bl	800933c <__malloc_lock>
 800917e:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <_free_r+0x94>)
 8009180:	9801      	ldr	r0, [sp, #4]
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	b933      	cbnz	r3, 8009194 <_free_r+0x30>
 8009186:	6063      	str	r3, [r4, #4]
 8009188:	6014      	str	r4, [r2, #0]
 800918a:	b003      	add	sp, #12
 800918c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009190:	f000 b8da 	b.w	8009348 <__malloc_unlock>
 8009194:	42a3      	cmp	r3, r4
 8009196:	d908      	bls.n	80091aa <_free_r+0x46>
 8009198:	6825      	ldr	r5, [r4, #0]
 800919a:	1961      	adds	r1, r4, r5
 800919c:	428b      	cmp	r3, r1
 800919e:	bf01      	itttt	eq
 80091a0:	6819      	ldreq	r1, [r3, #0]
 80091a2:	685b      	ldreq	r3, [r3, #4]
 80091a4:	1949      	addeq	r1, r1, r5
 80091a6:	6021      	streq	r1, [r4, #0]
 80091a8:	e7ed      	b.n	8009186 <_free_r+0x22>
 80091aa:	461a      	mov	r2, r3
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	b10b      	cbz	r3, 80091b4 <_free_r+0x50>
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	d9fa      	bls.n	80091aa <_free_r+0x46>
 80091b4:	6811      	ldr	r1, [r2, #0]
 80091b6:	1855      	adds	r5, r2, r1
 80091b8:	42a5      	cmp	r5, r4
 80091ba:	d10b      	bne.n	80091d4 <_free_r+0x70>
 80091bc:	6824      	ldr	r4, [r4, #0]
 80091be:	4421      	add	r1, r4
 80091c0:	1854      	adds	r4, r2, r1
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	6011      	str	r1, [r2, #0]
 80091c6:	d1e0      	bne.n	800918a <_free_r+0x26>
 80091c8:	681c      	ldr	r4, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	6053      	str	r3, [r2, #4]
 80091ce:	440c      	add	r4, r1
 80091d0:	6014      	str	r4, [r2, #0]
 80091d2:	e7da      	b.n	800918a <_free_r+0x26>
 80091d4:	d902      	bls.n	80091dc <_free_r+0x78>
 80091d6:	230c      	movs	r3, #12
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	e7d6      	b.n	800918a <_free_r+0x26>
 80091dc:	6825      	ldr	r5, [r4, #0]
 80091de:	1961      	adds	r1, r4, r5
 80091e0:	428b      	cmp	r3, r1
 80091e2:	bf04      	itt	eq
 80091e4:	6819      	ldreq	r1, [r3, #0]
 80091e6:	685b      	ldreq	r3, [r3, #4]
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	bf04      	itt	eq
 80091ec:	1949      	addeq	r1, r1, r5
 80091ee:	6021      	streq	r1, [r4, #0]
 80091f0:	6054      	str	r4, [r2, #4]
 80091f2:	e7ca      	b.n	800918a <_free_r+0x26>
 80091f4:	b003      	add	sp, #12
 80091f6:	bd30      	pop	{r4, r5, pc}
 80091f8:	20001fd4 	.word	0x20001fd4

080091fc <sbrk_aligned>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4e0e      	ldr	r6, [pc, #56]	; (8009238 <sbrk_aligned+0x3c>)
 8009200:	460c      	mov	r4, r1
 8009202:	6831      	ldr	r1, [r6, #0]
 8009204:	4605      	mov	r5, r0
 8009206:	b911      	cbnz	r1, 800920e <sbrk_aligned+0x12>
 8009208:	f000 fba6 	bl	8009958 <_sbrk_r>
 800920c:	6030      	str	r0, [r6, #0]
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 fba1 	bl	8009958 <_sbrk_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <sbrk_aligned+0x34>
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d007      	beq.n	8009234 <sbrk_aligned+0x38>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4628      	mov	r0, r5
 8009228:	f000 fb96 	bl	8009958 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d101      	bne.n	8009234 <sbrk_aligned+0x38>
 8009230:	f04f 34ff 	mov.w	r4, #4294967295
 8009234:	4620      	mov	r0, r4
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	20001fd8 	.word	0x20001fd8

0800923c <_malloc_r>:
 800923c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009240:	1ccd      	adds	r5, r1, #3
 8009242:	f025 0503 	bic.w	r5, r5, #3
 8009246:	3508      	adds	r5, #8
 8009248:	2d0c      	cmp	r5, #12
 800924a:	bf38      	it	cc
 800924c:	250c      	movcc	r5, #12
 800924e:	2d00      	cmp	r5, #0
 8009250:	4607      	mov	r7, r0
 8009252:	db01      	blt.n	8009258 <_malloc_r+0x1c>
 8009254:	42a9      	cmp	r1, r5
 8009256:	d905      	bls.n	8009264 <_malloc_r+0x28>
 8009258:	230c      	movs	r3, #12
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	2600      	movs	r6, #0
 800925e:	4630      	mov	r0, r6
 8009260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009338 <_malloc_r+0xfc>
 8009268:	f000 f868 	bl	800933c <__malloc_lock>
 800926c:	f8d8 3000 	ldr.w	r3, [r8]
 8009270:	461c      	mov	r4, r3
 8009272:	bb5c      	cbnz	r4, 80092cc <_malloc_r+0x90>
 8009274:	4629      	mov	r1, r5
 8009276:	4638      	mov	r0, r7
 8009278:	f7ff ffc0 	bl	80091fc <sbrk_aligned>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	4604      	mov	r4, r0
 8009280:	d155      	bne.n	800932e <_malloc_r+0xf2>
 8009282:	f8d8 4000 	ldr.w	r4, [r8]
 8009286:	4626      	mov	r6, r4
 8009288:	2e00      	cmp	r6, #0
 800928a:	d145      	bne.n	8009318 <_malloc_r+0xdc>
 800928c:	2c00      	cmp	r4, #0
 800928e:	d048      	beq.n	8009322 <_malloc_r+0xe6>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	4631      	mov	r1, r6
 8009294:	4638      	mov	r0, r7
 8009296:	eb04 0903 	add.w	r9, r4, r3
 800929a:	f000 fb5d 	bl	8009958 <_sbrk_r>
 800929e:	4581      	cmp	r9, r0
 80092a0:	d13f      	bne.n	8009322 <_malloc_r+0xe6>
 80092a2:	6821      	ldr	r1, [r4, #0]
 80092a4:	1a6d      	subs	r5, r5, r1
 80092a6:	4629      	mov	r1, r5
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ffa7 	bl	80091fc <sbrk_aligned>
 80092ae:	3001      	adds	r0, #1
 80092b0:	d037      	beq.n	8009322 <_malloc_r+0xe6>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	442b      	add	r3, r5
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	f8d8 3000 	ldr.w	r3, [r8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d038      	beq.n	8009332 <_malloc_r+0xf6>
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	42a2      	cmp	r2, r4
 80092c4:	d12b      	bne.n	800931e <_malloc_r+0xe2>
 80092c6:	2200      	movs	r2, #0
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	e00f      	b.n	80092ec <_malloc_r+0xb0>
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	1b52      	subs	r2, r2, r5
 80092d0:	d41f      	bmi.n	8009312 <_malloc_r+0xd6>
 80092d2:	2a0b      	cmp	r2, #11
 80092d4:	d917      	bls.n	8009306 <_malloc_r+0xca>
 80092d6:	1961      	adds	r1, r4, r5
 80092d8:	42a3      	cmp	r3, r4
 80092da:	6025      	str	r5, [r4, #0]
 80092dc:	bf18      	it	ne
 80092de:	6059      	strne	r1, [r3, #4]
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	bf08      	it	eq
 80092e4:	f8c8 1000 	streq.w	r1, [r8]
 80092e8:	5162      	str	r2, [r4, r5]
 80092ea:	604b      	str	r3, [r1, #4]
 80092ec:	4638      	mov	r0, r7
 80092ee:	f104 060b 	add.w	r6, r4, #11
 80092f2:	f000 f829 	bl	8009348 <__malloc_unlock>
 80092f6:	f026 0607 	bic.w	r6, r6, #7
 80092fa:	1d23      	adds	r3, r4, #4
 80092fc:	1af2      	subs	r2, r6, r3
 80092fe:	d0ae      	beq.n	800925e <_malloc_r+0x22>
 8009300:	1b9b      	subs	r3, r3, r6
 8009302:	50a3      	str	r3, [r4, r2]
 8009304:	e7ab      	b.n	800925e <_malloc_r+0x22>
 8009306:	42a3      	cmp	r3, r4
 8009308:	6862      	ldr	r2, [r4, #4]
 800930a:	d1dd      	bne.n	80092c8 <_malloc_r+0x8c>
 800930c:	f8c8 2000 	str.w	r2, [r8]
 8009310:	e7ec      	b.n	80092ec <_malloc_r+0xb0>
 8009312:	4623      	mov	r3, r4
 8009314:	6864      	ldr	r4, [r4, #4]
 8009316:	e7ac      	b.n	8009272 <_malloc_r+0x36>
 8009318:	4634      	mov	r4, r6
 800931a:	6876      	ldr	r6, [r6, #4]
 800931c:	e7b4      	b.n	8009288 <_malloc_r+0x4c>
 800931e:	4613      	mov	r3, r2
 8009320:	e7cc      	b.n	80092bc <_malloc_r+0x80>
 8009322:	230c      	movs	r3, #12
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4638      	mov	r0, r7
 8009328:	f000 f80e 	bl	8009348 <__malloc_unlock>
 800932c:	e797      	b.n	800925e <_malloc_r+0x22>
 800932e:	6025      	str	r5, [r4, #0]
 8009330:	e7dc      	b.n	80092ec <_malloc_r+0xb0>
 8009332:	605b      	str	r3, [r3, #4]
 8009334:	deff      	udf	#255	; 0xff
 8009336:	bf00      	nop
 8009338:	20001fd4 	.word	0x20001fd4

0800933c <__malloc_lock>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__malloc_lock+0x8>)
 800933e:	f7ff bf01 	b.w	8009144 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	20001fd0 	.word	0x20001fd0

08009348 <__malloc_unlock>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__malloc_unlock+0x8>)
 800934a:	f7ff befc 	b.w	8009146 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	20001fd0 	.word	0x20001fd0

08009354 <__ssputs_r>:
 8009354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	688e      	ldr	r6, [r1, #8]
 800935a:	461f      	mov	r7, r3
 800935c:	42be      	cmp	r6, r7
 800935e:	680b      	ldr	r3, [r1, #0]
 8009360:	4682      	mov	sl, r0
 8009362:	460c      	mov	r4, r1
 8009364:	4690      	mov	r8, r2
 8009366:	d82c      	bhi.n	80093c2 <__ssputs_r+0x6e>
 8009368:	898a      	ldrh	r2, [r1, #12]
 800936a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800936e:	d026      	beq.n	80093be <__ssputs_r+0x6a>
 8009370:	6965      	ldr	r5, [r4, #20]
 8009372:	6909      	ldr	r1, [r1, #16]
 8009374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009378:	eba3 0901 	sub.w	r9, r3, r1
 800937c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009380:	1c7b      	adds	r3, r7, #1
 8009382:	444b      	add	r3, r9
 8009384:	106d      	asrs	r5, r5, #1
 8009386:	429d      	cmp	r5, r3
 8009388:	bf38      	it	cc
 800938a:	461d      	movcc	r5, r3
 800938c:	0553      	lsls	r3, r2, #21
 800938e:	d527      	bpl.n	80093e0 <__ssputs_r+0x8c>
 8009390:	4629      	mov	r1, r5
 8009392:	f7ff ff53 	bl	800923c <_malloc_r>
 8009396:	4606      	mov	r6, r0
 8009398:	b360      	cbz	r0, 80093f4 <__ssputs_r+0xa0>
 800939a:	6921      	ldr	r1, [r4, #16]
 800939c:	464a      	mov	r2, r9
 800939e:	f7ff fed3 	bl	8009148 <memcpy>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	6126      	str	r6, [r4, #16]
 80093b0:	6165      	str	r5, [r4, #20]
 80093b2:	444e      	add	r6, r9
 80093b4:	eba5 0509 	sub.w	r5, r5, r9
 80093b8:	6026      	str	r6, [r4, #0]
 80093ba:	60a5      	str	r5, [r4, #8]
 80093bc:	463e      	mov	r6, r7
 80093be:	42be      	cmp	r6, r7
 80093c0:	d900      	bls.n	80093c4 <__ssputs_r+0x70>
 80093c2:	463e      	mov	r6, r7
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	4632      	mov	r2, r6
 80093c8:	4641      	mov	r1, r8
 80093ca:	f000 faab 	bl	8009924 <memmove>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	1b9b      	subs	r3, r3, r6
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	4433      	add	r3, r6
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	2000      	movs	r0, #0
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	462a      	mov	r2, r5
 80093e2:	f000 fac9 	bl	8009978 <_realloc_r>
 80093e6:	4606      	mov	r6, r0
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d1e0      	bne.n	80093ae <__ssputs_r+0x5a>
 80093ec:	6921      	ldr	r1, [r4, #16]
 80093ee:	4650      	mov	r0, sl
 80093f0:	f7ff feb8 	bl	8009164 <_free_r>
 80093f4:	230c      	movs	r3, #12
 80093f6:	f8ca 3000 	str.w	r3, [sl]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	f04f 30ff 	mov.w	r0, #4294967295
 8009406:	e7e9      	b.n	80093dc <__ssputs_r+0x88>

08009408 <_svfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4698      	mov	r8, r3
 800940e:	898b      	ldrh	r3, [r1, #12]
 8009410:	061b      	lsls	r3, r3, #24
 8009412:	b09d      	sub	sp, #116	; 0x74
 8009414:	4607      	mov	r7, r0
 8009416:	460d      	mov	r5, r1
 8009418:	4614      	mov	r4, r2
 800941a:	d50e      	bpl.n	800943a <_svfiprintf_r+0x32>
 800941c:	690b      	ldr	r3, [r1, #16]
 800941e:	b963      	cbnz	r3, 800943a <_svfiprintf_r+0x32>
 8009420:	2140      	movs	r1, #64	; 0x40
 8009422:	f7ff ff0b 	bl	800923c <_malloc_r>
 8009426:	6028      	str	r0, [r5, #0]
 8009428:	6128      	str	r0, [r5, #16]
 800942a:	b920      	cbnz	r0, 8009436 <_svfiprintf_r+0x2e>
 800942c:	230c      	movs	r3, #12
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	e0d0      	b.n	80095d8 <_svfiprintf_r+0x1d0>
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	616b      	str	r3, [r5, #20]
 800943a:	2300      	movs	r3, #0
 800943c:	9309      	str	r3, [sp, #36]	; 0x24
 800943e:	2320      	movs	r3, #32
 8009440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009444:	f8cd 800c 	str.w	r8, [sp, #12]
 8009448:	2330      	movs	r3, #48	; 0x30
 800944a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095f0 <_svfiprintf_r+0x1e8>
 800944e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009452:	f04f 0901 	mov.w	r9, #1
 8009456:	4623      	mov	r3, r4
 8009458:	469a      	mov	sl, r3
 800945a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800945e:	b10a      	cbz	r2, 8009464 <_svfiprintf_r+0x5c>
 8009460:	2a25      	cmp	r2, #37	; 0x25
 8009462:	d1f9      	bne.n	8009458 <_svfiprintf_r+0x50>
 8009464:	ebba 0b04 	subs.w	fp, sl, r4
 8009468:	d00b      	beq.n	8009482 <_svfiprintf_r+0x7a>
 800946a:	465b      	mov	r3, fp
 800946c:	4622      	mov	r2, r4
 800946e:	4629      	mov	r1, r5
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ff6f 	bl	8009354 <__ssputs_r>
 8009476:	3001      	adds	r0, #1
 8009478:	f000 80a9 	beq.w	80095ce <_svfiprintf_r+0x1c6>
 800947c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800947e:	445a      	add	r2, fp
 8009480:	9209      	str	r2, [sp, #36]	; 0x24
 8009482:	f89a 3000 	ldrb.w	r3, [sl]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 80a1 	beq.w	80095ce <_svfiprintf_r+0x1c6>
 800948c:	2300      	movs	r3, #0
 800948e:	f04f 32ff 	mov.w	r2, #4294967295
 8009492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009496:	f10a 0a01 	add.w	sl, sl, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	9307      	str	r3, [sp, #28]
 800949e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094a2:	931a      	str	r3, [sp, #104]	; 0x68
 80094a4:	4654      	mov	r4, sl
 80094a6:	2205      	movs	r2, #5
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	4850      	ldr	r0, [pc, #320]	; (80095f0 <_svfiprintf_r+0x1e8>)
 80094ae:	f7f6 fea7 	bl	8000200 <memchr>
 80094b2:	9a04      	ldr	r2, [sp, #16]
 80094b4:	b9d8      	cbnz	r0, 80094ee <_svfiprintf_r+0xe6>
 80094b6:	06d0      	lsls	r0, r2, #27
 80094b8:	bf44      	itt	mi
 80094ba:	2320      	movmi	r3, #32
 80094bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c0:	0711      	lsls	r1, r2, #28
 80094c2:	bf44      	itt	mi
 80094c4:	232b      	movmi	r3, #43	; 0x2b
 80094c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ca:	f89a 3000 	ldrb.w	r3, [sl]
 80094ce:	2b2a      	cmp	r3, #42	; 0x2a
 80094d0:	d015      	beq.n	80094fe <_svfiprintf_r+0xf6>
 80094d2:	9a07      	ldr	r2, [sp, #28]
 80094d4:	4654      	mov	r4, sl
 80094d6:	2000      	movs	r0, #0
 80094d8:	f04f 0c0a 	mov.w	ip, #10
 80094dc:	4621      	mov	r1, r4
 80094de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094e2:	3b30      	subs	r3, #48	; 0x30
 80094e4:	2b09      	cmp	r3, #9
 80094e6:	d94d      	bls.n	8009584 <_svfiprintf_r+0x17c>
 80094e8:	b1b0      	cbz	r0, 8009518 <_svfiprintf_r+0x110>
 80094ea:	9207      	str	r2, [sp, #28]
 80094ec:	e014      	b.n	8009518 <_svfiprintf_r+0x110>
 80094ee:	eba0 0308 	sub.w	r3, r0, r8
 80094f2:	fa09 f303 	lsl.w	r3, r9, r3
 80094f6:	4313      	orrs	r3, r2
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	46a2      	mov	sl, r4
 80094fc:	e7d2      	b.n	80094a4 <_svfiprintf_r+0x9c>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	1d19      	adds	r1, r3, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	9103      	str	r1, [sp, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfbb      	ittet	lt
 800950a:	425b      	neglt	r3, r3
 800950c:	f042 0202 	orrlt.w	r2, r2, #2
 8009510:	9307      	strge	r3, [sp, #28]
 8009512:	9307      	strlt	r3, [sp, #28]
 8009514:	bfb8      	it	lt
 8009516:	9204      	strlt	r2, [sp, #16]
 8009518:	7823      	ldrb	r3, [r4, #0]
 800951a:	2b2e      	cmp	r3, #46	; 0x2e
 800951c:	d10c      	bne.n	8009538 <_svfiprintf_r+0x130>
 800951e:	7863      	ldrb	r3, [r4, #1]
 8009520:	2b2a      	cmp	r3, #42	; 0x2a
 8009522:	d134      	bne.n	800958e <_svfiprintf_r+0x186>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	1d1a      	adds	r2, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	9203      	str	r2, [sp, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfb8      	it	lt
 8009530:	f04f 33ff 	movlt.w	r3, #4294967295
 8009534:	3402      	adds	r4, #2
 8009536:	9305      	str	r3, [sp, #20]
 8009538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009600 <_svfiprintf_r+0x1f8>
 800953c:	7821      	ldrb	r1, [r4, #0]
 800953e:	2203      	movs	r2, #3
 8009540:	4650      	mov	r0, sl
 8009542:	f7f6 fe5d 	bl	8000200 <memchr>
 8009546:	b138      	cbz	r0, 8009558 <_svfiprintf_r+0x150>
 8009548:	9b04      	ldr	r3, [sp, #16]
 800954a:	eba0 000a 	sub.w	r0, r0, sl
 800954e:	2240      	movs	r2, #64	; 0x40
 8009550:	4082      	lsls	r2, r0
 8009552:	4313      	orrs	r3, r2
 8009554:	3401      	adds	r4, #1
 8009556:	9304      	str	r3, [sp, #16]
 8009558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955c:	4825      	ldr	r0, [pc, #148]	; (80095f4 <_svfiprintf_r+0x1ec>)
 800955e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009562:	2206      	movs	r2, #6
 8009564:	f7f6 fe4c 	bl	8000200 <memchr>
 8009568:	2800      	cmp	r0, #0
 800956a:	d038      	beq.n	80095de <_svfiprintf_r+0x1d6>
 800956c:	4b22      	ldr	r3, [pc, #136]	; (80095f8 <_svfiprintf_r+0x1f0>)
 800956e:	bb1b      	cbnz	r3, 80095b8 <_svfiprintf_r+0x1b0>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	3307      	adds	r3, #7
 8009574:	f023 0307 	bic.w	r3, r3, #7
 8009578:	3308      	adds	r3, #8
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957e:	4433      	add	r3, r6
 8009580:	9309      	str	r3, [sp, #36]	; 0x24
 8009582:	e768      	b.n	8009456 <_svfiprintf_r+0x4e>
 8009584:	fb0c 3202 	mla	r2, ip, r2, r3
 8009588:	460c      	mov	r4, r1
 800958a:	2001      	movs	r0, #1
 800958c:	e7a6      	b.n	80094dc <_svfiprintf_r+0xd4>
 800958e:	2300      	movs	r3, #0
 8009590:	3401      	adds	r4, #1
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	4619      	mov	r1, r3
 8009596:	f04f 0c0a 	mov.w	ip, #10
 800959a:	4620      	mov	r0, r4
 800959c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a0:	3a30      	subs	r2, #48	; 0x30
 80095a2:	2a09      	cmp	r2, #9
 80095a4:	d903      	bls.n	80095ae <_svfiprintf_r+0x1a6>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0c6      	beq.n	8009538 <_svfiprintf_r+0x130>
 80095aa:	9105      	str	r1, [sp, #20]
 80095ac:	e7c4      	b.n	8009538 <_svfiprintf_r+0x130>
 80095ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80095b2:	4604      	mov	r4, r0
 80095b4:	2301      	movs	r3, #1
 80095b6:	e7f0      	b.n	800959a <_svfiprintf_r+0x192>
 80095b8:	ab03      	add	r3, sp, #12
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	462a      	mov	r2, r5
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <_svfiprintf_r+0x1f4>)
 80095c0:	a904      	add	r1, sp, #16
 80095c2:	4638      	mov	r0, r7
 80095c4:	f3af 8000 	nop.w
 80095c8:	1c42      	adds	r2, r0, #1
 80095ca:	4606      	mov	r6, r0
 80095cc:	d1d6      	bne.n	800957c <_svfiprintf_r+0x174>
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	065b      	lsls	r3, r3, #25
 80095d2:	f53f af2d 	bmi.w	8009430 <_svfiprintf_r+0x28>
 80095d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095d8:	b01d      	add	sp, #116	; 0x74
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	ab03      	add	r3, sp, #12
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	462a      	mov	r2, r5
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <_svfiprintf_r+0x1f4>)
 80095e6:	a904      	add	r1, sp, #16
 80095e8:	4638      	mov	r0, r7
 80095ea:	f000 f879 	bl	80096e0 <_printf_i>
 80095ee:	e7eb      	b.n	80095c8 <_svfiprintf_r+0x1c0>
 80095f0:	08009bb0 	.word	0x08009bb0
 80095f4:	08009bba 	.word	0x08009bba
 80095f8:	00000000 	.word	0x00000000
 80095fc:	08009355 	.word	0x08009355
 8009600:	08009bb6 	.word	0x08009bb6

08009604 <_printf_common>:
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009608:	4616      	mov	r6, r2
 800960a:	4699      	mov	r9, r3
 800960c:	688a      	ldr	r2, [r1, #8]
 800960e:	690b      	ldr	r3, [r1, #16]
 8009610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009614:	4293      	cmp	r3, r2
 8009616:	bfb8      	it	lt
 8009618:	4613      	movlt	r3, r2
 800961a:	6033      	str	r3, [r6, #0]
 800961c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009620:	4607      	mov	r7, r0
 8009622:	460c      	mov	r4, r1
 8009624:	b10a      	cbz	r2, 800962a <_printf_common+0x26>
 8009626:	3301      	adds	r3, #1
 8009628:	6033      	str	r3, [r6, #0]
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	0699      	lsls	r1, r3, #26
 800962e:	bf42      	ittt	mi
 8009630:	6833      	ldrmi	r3, [r6, #0]
 8009632:	3302      	addmi	r3, #2
 8009634:	6033      	strmi	r3, [r6, #0]
 8009636:	6825      	ldr	r5, [r4, #0]
 8009638:	f015 0506 	ands.w	r5, r5, #6
 800963c:	d106      	bne.n	800964c <_printf_common+0x48>
 800963e:	f104 0a19 	add.w	sl, r4, #25
 8009642:	68e3      	ldr	r3, [r4, #12]
 8009644:	6832      	ldr	r2, [r6, #0]
 8009646:	1a9b      	subs	r3, r3, r2
 8009648:	42ab      	cmp	r3, r5
 800964a:	dc26      	bgt.n	800969a <_printf_common+0x96>
 800964c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009650:	1e13      	subs	r3, r2, #0
 8009652:	6822      	ldr	r2, [r4, #0]
 8009654:	bf18      	it	ne
 8009656:	2301      	movne	r3, #1
 8009658:	0692      	lsls	r2, r2, #26
 800965a:	d42b      	bmi.n	80096b4 <_printf_common+0xb0>
 800965c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009660:	4649      	mov	r1, r9
 8009662:	4638      	mov	r0, r7
 8009664:	47c0      	blx	r8
 8009666:	3001      	adds	r0, #1
 8009668:	d01e      	beq.n	80096a8 <_printf_common+0xa4>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	f003 0306 	and.w	r3, r3, #6
 8009672:	2b04      	cmp	r3, #4
 8009674:	bf02      	ittt	eq
 8009676:	68e5      	ldreq	r5, [r4, #12]
 8009678:	6833      	ldreq	r3, [r6, #0]
 800967a:	1aed      	subeq	r5, r5, r3
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	bf0c      	ite	eq
 8009680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009684:	2500      	movne	r5, #0
 8009686:	4293      	cmp	r3, r2
 8009688:	bfc4      	itt	gt
 800968a:	1a9b      	subgt	r3, r3, r2
 800968c:	18ed      	addgt	r5, r5, r3
 800968e:	2600      	movs	r6, #0
 8009690:	341a      	adds	r4, #26
 8009692:	42b5      	cmp	r5, r6
 8009694:	d11a      	bne.n	80096cc <_printf_common+0xc8>
 8009696:	2000      	movs	r0, #0
 8009698:	e008      	b.n	80096ac <_printf_common+0xa8>
 800969a:	2301      	movs	r3, #1
 800969c:	4652      	mov	r2, sl
 800969e:	4649      	mov	r1, r9
 80096a0:	4638      	mov	r0, r7
 80096a2:	47c0      	blx	r8
 80096a4:	3001      	adds	r0, #1
 80096a6:	d103      	bne.n	80096b0 <_printf_common+0xac>
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b0:	3501      	adds	r5, #1
 80096b2:	e7c6      	b.n	8009642 <_printf_common+0x3e>
 80096b4:	18e1      	adds	r1, r4, r3
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	2030      	movs	r0, #48	; 0x30
 80096ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096be:	4422      	add	r2, r4
 80096c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096c8:	3302      	adds	r3, #2
 80096ca:	e7c7      	b.n	800965c <_printf_common+0x58>
 80096cc:	2301      	movs	r3, #1
 80096ce:	4622      	mov	r2, r4
 80096d0:	4649      	mov	r1, r9
 80096d2:	4638      	mov	r0, r7
 80096d4:	47c0      	blx	r8
 80096d6:	3001      	adds	r0, #1
 80096d8:	d0e6      	beq.n	80096a8 <_printf_common+0xa4>
 80096da:	3601      	adds	r6, #1
 80096dc:	e7d9      	b.n	8009692 <_printf_common+0x8e>
	...

080096e0 <_printf_i>:
 80096e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096e4:	7e0f      	ldrb	r7, [r1, #24]
 80096e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096e8:	2f78      	cmp	r7, #120	; 0x78
 80096ea:	4691      	mov	r9, r2
 80096ec:	4680      	mov	r8, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	469a      	mov	sl, r3
 80096f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096f6:	d807      	bhi.n	8009708 <_printf_i+0x28>
 80096f8:	2f62      	cmp	r7, #98	; 0x62
 80096fa:	d80a      	bhi.n	8009712 <_printf_i+0x32>
 80096fc:	2f00      	cmp	r7, #0
 80096fe:	f000 80d4 	beq.w	80098aa <_printf_i+0x1ca>
 8009702:	2f58      	cmp	r7, #88	; 0x58
 8009704:	f000 80c0 	beq.w	8009888 <_printf_i+0x1a8>
 8009708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800970c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009710:	e03a      	b.n	8009788 <_printf_i+0xa8>
 8009712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009716:	2b15      	cmp	r3, #21
 8009718:	d8f6      	bhi.n	8009708 <_printf_i+0x28>
 800971a:	a101      	add	r1, pc, #4	; (adr r1, 8009720 <_printf_i+0x40>)
 800971c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009720:	08009779 	.word	0x08009779
 8009724:	0800978d 	.word	0x0800978d
 8009728:	08009709 	.word	0x08009709
 800972c:	08009709 	.word	0x08009709
 8009730:	08009709 	.word	0x08009709
 8009734:	08009709 	.word	0x08009709
 8009738:	0800978d 	.word	0x0800978d
 800973c:	08009709 	.word	0x08009709
 8009740:	08009709 	.word	0x08009709
 8009744:	08009709 	.word	0x08009709
 8009748:	08009709 	.word	0x08009709
 800974c:	08009891 	.word	0x08009891
 8009750:	080097b9 	.word	0x080097b9
 8009754:	0800984b 	.word	0x0800984b
 8009758:	08009709 	.word	0x08009709
 800975c:	08009709 	.word	0x08009709
 8009760:	080098b3 	.word	0x080098b3
 8009764:	08009709 	.word	0x08009709
 8009768:	080097b9 	.word	0x080097b9
 800976c:	08009709 	.word	0x08009709
 8009770:	08009709 	.word	0x08009709
 8009774:	08009853 	.word	0x08009853
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	602a      	str	r2, [r5, #0]
 8009780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009788:	2301      	movs	r3, #1
 800978a:	e09f      	b.n	80098cc <_printf_i+0x1ec>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	682b      	ldr	r3, [r5, #0]
 8009790:	0607      	lsls	r7, r0, #24
 8009792:	f103 0104 	add.w	r1, r3, #4
 8009796:	6029      	str	r1, [r5, #0]
 8009798:	d501      	bpl.n	800979e <_printf_i+0xbe>
 800979a:	681e      	ldr	r6, [r3, #0]
 800979c:	e003      	b.n	80097a6 <_printf_i+0xc6>
 800979e:	0646      	lsls	r6, r0, #25
 80097a0:	d5fb      	bpl.n	800979a <_printf_i+0xba>
 80097a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	da03      	bge.n	80097b2 <_printf_i+0xd2>
 80097aa:	232d      	movs	r3, #45	; 0x2d
 80097ac:	4276      	negs	r6, r6
 80097ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b2:	485a      	ldr	r0, [pc, #360]	; (800991c <_printf_i+0x23c>)
 80097b4:	230a      	movs	r3, #10
 80097b6:	e012      	b.n	80097de <_printf_i+0xfe>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	1d19      	adds	r1, r3, #4
 80097be:	6029      	str	r1, [r5, #0]
 80097c0:	0605      	lsls	r5, r0, #24
 80097c2:	d501      	bpl.n	80097c8 <_printf_i+0xe8>
 80097c4:	681e      	ldr	r6, [r3, #0]
 80097c6:	e002      	b.n	80097ce <_printf_i+0xee>
 80097c8:	0641      	lsls	r1, r0, #25
 80097ca:	d5fb      	bpl.n	80097c4 <_printf_i+0xe4>
 80097cc:	881e      	ldrh	r6, [r3, #0]
 80097ce:	4853      	ldr	r0, [pc, #332]	; (800991c <_printf_i+0x23c>)
 80097d0:	2f6f      	cmp	r7, #111	; 0x6f
 80097d2:	bf0c      	ite	eq
 80097d4:	2308      	moveq	r3, #8
 80097d6:	230a      	movne	r3, #10
 80097d8:	2100      	movs	r1, #0
 80097da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097de:	6865      	ldr	r5, [r4, #4]
 80097e0:	60a5      	str	r5, [r4, #8]
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	bfa2      	ittt	ge
 80097e6:	6821      	ldrge	r1, [r4, #0]
 80097e8:	f021 0104 	bicge.w	r1, r1, #4
 80097ec:	6021      	strge	r1, [r4, #0]
 80097ee:	b90e      	cbnz	r6, 80097f4 <_printf_i+0x114>
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	d04b      	beq.n	800988c <_printf_i+0x1ac>
 80097f4:	4615      	mov	r5, r2
 80097f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80097fa:	fb03 6711 	mls	r7, r3, r1, r6
 80097fe:	5dc7      	ldrb	r7, [r0, r7]
 8009800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009804:	4637      	mov	r7, r6
 8009806:	42bb      	cmp	r3, r7
 8009808:	460e      	mov	r6, r1
 800980a:	d9f4      	bls.n	80097f6 <_printf_i+0x116>
 800980c:	2b08      	cmp	r3, #8
 800980e:	d10b      	bne.n	8009828 <_printf_i+0x148>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	07de      	lsls	r6, r3, #31
 8009814:	d508      	bpl.n	8009828 <_printf_i+0x148>
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	6861      	ldr	r1, [r4, #4]
 800981a:	4299      	cmp	r1, r3
 800981c:	bfde      	ittt	le
 800981e:	2330      	movle	r3, #48	; 0x30
 8009820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009828:	1b52      	subs	r2, r2, r5
 800982a:	6122      	str	r2, [r4, #16]
 800982c:	f8cd a000 	str.w	sl, [sp]
 8009830:	464b      	mov	r3, r9
 8009832:	aa03      	add	r2, sp, #12
 8009834:	4621      	mov	r1, r4
 8009836:	4640      	mov	r0, r8
 8009838:	f7ff fee4 	bl	8009604 <_printf_common>
 800983c:	3001      	adds	r0, #1
 800983e:	d14a      	bne.n	80098d6 <_printf_i+0x1f6>
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	b004      	add	sp, #16
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f043 0320 	orr.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	4833      	ldr	r0, [pc, #204]	; (8009920 <_printf_i+0x240>)
 8009854:	2778      	movs	r7, #120	; 0x78
 8009856:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	6829      	ldr	r1, [r5, #0]
 800985e:	061f      	lsls	r7, r3, #24
 8009860:	f851 6b04 	ldr.w	r6, [r1], #4
 8009864:	d402      	bmi.n	800986c <_printf_i+0x18c>
 8009866:	065f      	lsls	r7, r3, #25
 8009868:	bf48      	it	mi
 800986a:	b2b6      	uxthmi	r6, r6
 800986c:	07df      	lsls	r7, r3, #31
 800986e:	bf48      	it	mi
 8009870:	f043 0320 	orrmi.w	r3, r3, #32
 8009874:	6029      	str	r1, [r5, #0]
 8009876:	bf48      	it	mi
 8009878:	6023      	strmi	r3, [r4, #0]
 800987a:	b91e      	cbnz	r6, 8009884 <_printf_i+0x1a4>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	f023 0320 	bic.w	r3, r3, #32
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	2310      	movs	r3, #16
 8009886:	e7a7      	b.n	80097d8 <_printf_i+0xf8>
 8009888:	4824      	ldr	r0, [pc, #144]	; (800991c <_printf_i+0x23c>)
 800988a:	e7e4      	b.n	8009856 <_printf_i+0x176>
 800988c:	4615      	mov	r5, r2
 800988e:	e7bd      	b.n	800980c <_printf_i+0x12c>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	6826      	ldr	r6, [r4, #0]
 8009894:	6961      	ldr	r1, [r4, #20]
 8009896:	1d18      	adds	r0, r3, #4
 8009898:	6028      	str	r0, [r5, #0]
 800989a:	0635      	lsls	r5, r6, #24
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	d501      	bpl.n	80098a4 <_printf_i+0x1c4>
 80098a0:	6019      	str	r1, [r3, #0]
 80098a2:	e002      	b.n	80098aa <_printf_i+0x1ca>
 80098a4:	0670      	lsls	r0, r6, #25
 80098a6:	d5fb      	bpl.n	80098a0 <_printf_i+0x1c0>
 80098a8:	8019      	strh	r1, [r3, #0]
 80098aa:	2300      	movs	r3, #0
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	4615      	mov	r5, r2
 80098b0:	e7bc      	b.n	800982c <_printf_i+0x14c>
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	602a      	str	r2, [r5, #0]
 80098b8:	681d      	ldr	r5, [r3, #0]
 80098ba:	6862      	ldr	r2, [r4, #4]
 80098bc:	2100      	movs	r1, #0
 80098be:	4628      	mov	r0, r5
 80098c0:	f7f6 fc9e 	bl	8000200 <memchr>
 80098c4:	b108      	cbz	r0, 80098ca <_printf_i+0x1ea>
 80098c6:	1b40      	subs	r0, r0, r5
 80098c8:	6060      	str	r0, [r4, #4]
 80098ca:	6863      	ldr	r3, [r4, #4]
 80098cc:	6123      	str	r3, [r4, #16]
 80098ce:	2300      	movs	r3, #0
 80098d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098d4:	e7aa      	b.n	800982c <_printf_i+0x14c>
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	462a      	mov	r2, r5
 80098da:	4649      	mov	r1, r9
 80098dc:	4640      	mov	r0, r8
 80098de:	47d0      	blx	sl
 80098e0:	3001      	adds	r0, #1
 80098e2:	d0ad      	beq.n	8009840 <_printf_i+0x160>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	079b      	lsls	r3, r3, #30
 80098e8:	d413      	bmi.n	8009912 <_printf_i+0x232>
 80098ea:	68e0      	ldr	r0, [r4, #12]
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	4298      	cmp	r0, r3
 80098f0:	bfb8      	it	lt
 80098f2:	4618      	movlt	r0, r3
 80098f4:	e7a6      	b.n	8009844 <_printf_i+0x164>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4632      	mov	r2, r6
 80098fa:	4649      	mov	r1, r9
 80098fc:	4640      	mov	r0, r8
 80098fe:	47d0      	blx	sl
 8009900:	3001      	adds	r0, #1
 8009902:	d09d      	beq.n	8009840 <_printf_i+0x160>
 8009904:	3501      	adds	r5, #1
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	9903      	ldr	r1, [sp, #12]
 800990a:	1a5b      	subs	r3, r3, r1
 800990c:	42ab      	cmp	r3, r5
 800990e:	dcf2      	bgt.n	80098f6 <_printf_i+0x216>
 8009910:	e7eb      	b.n	80098ea <_printf_i+0x20a>
 8009912:	2500      	movs	r5, #0
 8009914:	f104 0619 	add.w	r6, r4, #25
 8009918:	e7f5      	b.n	8009906 <_printf_i+0x226>
 800991a:	bf00      	nop
 800991c:	08009bc1 	.word	0x08009bc1
 8009920:	08009bd2 	.word	0x08009bd2

08009924 <memmove>:
 8009924:	4288      	cmp	r0, r1
 8009926:	b510      	push	{r4, lr}
 8009928:	eb01 0402 	add.w	r4, r1, r2
 800992c:	d902      	bls.n	8009934 <memmove+0x10>
 800992e:	4284      	cmp	r4, r0
 8009930:	4623      	mov	r3, r4
 8009932:	d807      	bhi.n	8009944 <memmove+0x20>
 8009934:	1e43      	subs	r3, r0, #1
 8009936:	42a1      	cmp	r1, r4
 8009938:	d008      	beq.n	800994c <memmove+0x28>
 800993a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800993e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009942:	e7f8      	b.n	8009936 <memmove+0x12>
 8009944:	4402      	add	r2, r0
 8009946:	4601      	mov	r1, r0
 8009948:	428a      	cmp	r2, r1
 800994a:	d100      	bne.n	800994e <memmove+0x2a>
 800994c:	bd10      	pop	{r4, pc}
 800994e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009956:	e7f7      	b.n	8009948 <memmove+0x24>

08009958 <_sbrk_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d06      	ldr	r5, [pc, #24]	; (8009974 <_sbrk_r+0x1c>)
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	f7f7 fc66 	bl	8001234 <_sbrk>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_sbrk_r+0x1a>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_sbrk_r+0x1a>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20001fcc 	.word	0x20001fcc

08009978 <_realloc_r>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	4680      	mov	r8, r0
 800997e:	4614      	mov	r4, r2
 8009980:	460e      	mov	r6, r1
 8009982:	b921      	cbnz	r1, 800998e <_realloc_r+0x16>
 8009984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	4611      	mov	r1, r2
 800998a:	f7ff bc57 	b.w	800923c <_malloc_r>
 800998e:	b92a      	cbnz	r2, 800999c <_realloc_r+0x24>
 8009990:	f7ff fbe8 	bl	8009164 <_free_r>
 8009994:	4625      	mov	r5, r4
 8009996:	4628      	mov	r0, r5
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	f000 f81b 	bl	80099d6 <_malloc_usable_size_r>
 80099a0:	4284      	cmp	r4, r0
 80099a2:	4607      	mov	r7, r0
 80099a4:	d802      	bhi.n	80099ac <_realloc_r+0x34>
 80099a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099aa:	d812      	bhi.n	80099d2 <_realloc_r+0x5a>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4640      	mov	r0, r8
 80099b0:	f7ff fc44 	bl	800923c <_malloc_r>
 80099b4:	4605      	mov	r5, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0ed      	beq.n	8009996 <_realloc_r+0x1e>
 80099ba:	42bc      	cmp	r4, r7
 80099bc:	4622      	mov	r2, r4
 80099be:	4631      	mov	r1, r6
 80099c0:	bf28      	it	cs
 80099c2:	463a      	movcs	r2, r7
 80099c4:	f7ff fbc0 	bl	8009148 <memcpy>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4640      	mov	r0, r8
 80099cc:	f7ff fbca 	bl	8009164 <_free_r>
 80099d0:	e7e1      	b.n	8009996 <_realloc_r+0x1e>
 80099d2:	4635      	mov	r5, r6
 80099d4:	e7df      	b.n	8009996 <_realloc_r+0x1e>

080099d6 <_malloc_usable_size_r>:
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	1f18      	subs	r0, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	bfbc      	itt	lt
 80099e0:	580b      	ldrlt	r3, [r1, r0]
 80099e2:	18c0      	addlt	r0, r0, r3
 80099e4:	4770      	bx	lr
	...

080099e8 <_init>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr

080099f4 <_fini>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr
