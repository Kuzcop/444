
Lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003008  08003008  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003008  08003008  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  0800301c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800301c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093eb  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001823  00000000  00000000  000294df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  0002ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e2  00000000  00000000  0002b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029186  00000000  00000000  0002b8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000074d4  00000000  00000000  00054a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbc3a  00000000  00000000  0005bf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a4c  00000000  00000000  00157b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  001595ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001595e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001596e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080027ac 	.word	0x080027ac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080027ac 	.word	0x080027ac

080001fc <__aeabi_dmul>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020a:	bf1d      	ittte	ne
 800020c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000210:	ea94 0f0c 	teqne	r4, ip
 8000214:	ea95 0f0c 	teqne	r5, ip
 8000218:	f000 f8de 	bleq	80003d8 <__aeabi_dmul+0x1dc>
 800021c:	442c      	add	r4, r5
 800021e:	ea81 0603 	eor.w	r6, r1, r3
 8000222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800022e:	bf18      	it	ne
 8000230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023c:	d038      	beq.n	80002b0 <__aeabi_dmul+0xb4>
 800023e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000242:	f04f 0500 	mov.w	r5, #0
 8000246:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800024e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000252:	f04f 0600 	mov.w	r6, #0
 8000256:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025a:	f09c 0f00 	teq	ip, #0
 800025e:	bf18      	it	ne
 8000260:	f04e 0e01 	orrne.w	lr, lr, #1
 8000264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800026c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000270:	d204      	bcs.n	800027c <__aeabi_dmul+0x80>
 8000272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000276:	416d      	adcs	r5, r5
 8000278:	eb46 0606 	adc.w	r6, r6, r6
 800027c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800028c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000294:	bf88      	it	hi
 8000296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029a:	d81e      	bhi.n	80002da <__aeabi_dmul+0xde>
 800029c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b4:	ea46 0101 	orr.w	r1, r6, r1
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	ea81 0103 	eor.w	r1, r1, r3
 80002c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c4:	bfc2      	ittt	gt
 80002c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ce:	bd70      	popgt	{r4, r5, r6, pc}
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d4:	f04f 0e00 	mov.w	lr, #0
 80002d8:	3c01      	subs	r4, #1
 80002da:	f300 80ab 	bgt.w	8000434 <__aeabi_dmul+0x238>
 80002de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e2:	bfde      	ittt	le
 80002e4:	2000      	movle	r0, #0
 80002e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ea:	bd70      	pople	{r4, r5, r6, pc}
 80002ec:	f1c4 0400 	rsb	r4, r4, #0
 80002f0:	3c20      	subs	r4, #32
 80002f2:	da35      	bge.n	8000360 <__aeabi_dmul+0x164>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc1b      	bgt.n	8000330 <__aeabi_dmul+0x134>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0520 	rsb	r5, r4, #32
 8000300:	fa00 f305 	lsl.w	r3, r0, r5
 8000304:	fa20 f004 	lsr.w	r0, r0, r4
 8000308:	fa01 f205 	lsl.w	r2, r1, r5
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	fa21 f604 	lsr.w	r6, r1, r4
 8000320:	eb42 0106 	adc.w	r1, r2, r6
 8000324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000328:	bf08      	it	eq
 800032a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f1c4 040c 	rsb	r4, r4, #12
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f304 	lsl.w	r3, r0, r4
 800033c:	fa20 f005 	lsr.w	r0, r0, r5
 8000340:	fa01 f204 	lsl.w	r2, r1, r4
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000358:	bf08      	it	eq
 800035a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f205 	lsl.w	r2, r0, r5
 8000368:	ea4e 0e02 	orr.w	lr, lr, r2
 800036c:	fa20 f304 	lsr.w	r3, r0, r4
 8000370:	fa01 f205 	lsl.w	r2, r1, r5
 8000374:	ea43 0302 	orr.w	r3, r3, r2
 8000378:	fa21 f004 	lsr.w	r0, r1, r4
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	fa21 f204 	lsr.w	r2, r1, r4
 8000384:	ea20 0002 	bic.w	r0, r0, r2
 8000388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f094 0f00 	teq	r4, #0
 800039c:	d10f      	bne.n	80003be <__aeabi_dmul+0x1c2>
 800039e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a2:	0040      	lsls	r0, r0, #1
 80003a4:	eb41 0101 	adc.w	r1, r1, r1
 80003a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ac:	bf08      	it	eq
 80003ae:	3c01      	subeq	r4, #1
 80003b0:	d0f7      	beq.n	80003a2 <__aeabi_dmul+0x1a6>
 80003b2:	ea41 0106 	orr.w	r1, r1, r6
 80003b6:	f095 0f00 	teq	r5, #0
 80003ba:	bf18      	it	ne
 80003bc:	4770      	bxne	lr
 80003be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	eb43 0303 	adc.w	r3, r3, r3
 80003c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003cc:	bf08      	it	eq
 80003ce:	3d01      	subeq	r5, #1
 80003d0:	d0f7      	beq.n	80003c2 <__aeabi_dmul+0x1c6>
 80003d2:	ea43 0306 	orr.w	r3, r3, r6
 80003d6:	4770      	bx	lr
 80003d8:	ea94 0f0c 	teq	r4, ip
 80003dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e0:	bf18      	it	ne
 80003e2:	ea95 0f0c 	teqne	r5, ip
 80003e6:	d00c      	beq.n	8000402 <__aeabi_dmul+0x206>
 80003e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ec:	bf18      	it	ne
 80003ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f2:	d1d1      	bne.n	8000398 <__aeabi_dmul+0x19c>
 80003f4:	ea81 0103 	eor.w	r1, r1, r3
 80003f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	f04f 0000 	mov.w	r0, #0
 8000400:	bd70      	pop	{r4, r5, r6, pc}
 8000402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000406:	bf06      	itte	eq
 8000408:	4610      	moveq	r0, r2
 800040a:	4619      	moveq	r1, r3
 800040c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000410:	d019      	beq.n	8000446 <__aeabi_dmul+0x24a>
 8000412:	ea94 0f0c 	teq	r4, ip
 8000416:	d102      	bne.n	800041e <__aeabi_dmul+0x222>
 8000418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800041c:	d113      	bne.n	8000446 <__aeabi_dmul+0x24a>
 800041e:	ea95 0f0c 	teq	r5, ip
 8000422:	d105      	bne.n	8000430 <__aeabi_dmul+0x234>
 8000424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000428:	bf1c      	itt	ne
 800042a:	4610      	movne	r0, r2
 800042c:	4619      	movne	r1, r3
 800042e:	d10a      	bne.n	8000446 <__aeabi_dmul+0x24a>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	; 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_d2uiz>:
 80007c8:	004a      	lsls	r2, r1, #1
 80007ca:	d211      	bcs.n	80007f0 <__aeabi_d2uiz+0x28>
 80007cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d0:	d211      	bcs.n	80007f6 <__aeabi_d2uiz+0x2e>
 80007d2:	d50d      	bpl.n	80007f0 <__aeabi_d2uiz+0x28>
 80007d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007dc:	d40e      	bmi.n	80007fc <__aeabi_d2uiz+0x34>
 80007de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ea:	fa23 f002 	lsr.w	r0, r3, r2
 80007ee:	4770      	bx	lr
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	4770      	bx	lr
 80007f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fa:	d102      	bne.n	8000802 <__aeabi_d2uiz+0x3a>
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	4770      	bx	lr
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	4770      	bx	lr

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fac6 	bl	8000d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f841 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 f8d1 	bl	80009bc <MX_GPIO_Init>
  MX_DAC1_Init();
 800081a:	f000 f88f 	bl	800093c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <main+0x8c>)
 8000822:	f000 fc5c 	bl	80010de <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000826:	2110      	movs	r1, #16
 8000828:	481a      	ldr	r0, [pc, #104]	; (8000894 <main+0x8c>)
 800082a:	f000 fc58 	bl	80010de <HAL_DAC_Start>

  uint8_t triangle = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	73bb      	strb	r3, [r7, #14]
  uint8_t saw = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	737b      	strb	r3, [r7, #13]
  uint8_t sine = (VALUE_LIMIT/2);
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	733b      	strb	r3, [r7, #12]
  float   theta = 0.0;
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  uint8_t delta = 40;
 8000840:	2328      	movs	r3, #40	; 0x28
 8000842:	71fb      	strb	r3, [r7, #7]
  uint8_t n_step = 10;
 8000844:	230a      	movs	r3, #10
 8000846:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 PB_LED();
 8000848:	f000 f914 	bl	8000a74 <PB_LED>
	 do_saw(&saw);
 800084c:	f107 030d 	add.w	r3, r7, #13
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f92d 	bl	8000ab0 <do_saw>
	 do_triangle(&triangle, &delta);
 8000856:	1dfa      	adds	r2, r7, #7
 8000858:	f107 030e 	add.w	r3, r7, #14
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f93e 	bl	8000ae0 <do_triangle>
	 do_sine(&sine, &theta);
 8000864:	f107 0208 	add.w	r2, r7, #8
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f958 	bl	8000b24 <do_sine>

	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, (uint32_t)(sine));
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	2208      	movs	r2, #8
 8000878:	2100      	movs	r1, #0
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <main+0x8c>)
 800087c:	f000 fc81 	bl	8001182 <HAL_DAC_SetValue>
	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint32_t)(saw));
 8000880:	7b7b      	ldrb	r3, [r7, #13]
 8000882:	2208      	movs	r2, #8
 8000884:	2110      	movs	r1, #16
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <main+0x8c>)
 8000888:	f000 fc7b 	bl	8001182 <HAL_DAC_SetValue>


	 //HAL_Delay(15/n_step);
	 HAL_Delay(100);
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	f000 fafb 	bl	8000e88 <HAL_Delay>
	 PB_LED();
 8000892:	e7d9      	b.n	8000848 <main+0x40>
 8000894:	20000028 	.word	0x20000028

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b096      	sub	sp, #88	; 0x58
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2244      	movs	r2, #68	; 0x44
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 ff54 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 ffb4 	bl	8001828 <HAL_PWREx_ControlVoltageScaling>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008c6:	f000 f99d 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ca:	2310      	movs	r3, #16
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d6:	2360      	movs	r3, #96	; 0x60
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008de:	2301      	movs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008e6:	233c      	movs	r3, #60	; 0x3c
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f838 	bl	8001970 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000906:	f000 f97d 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2303      	movs	r3, #3
 8000910:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	2105      	movs	r1, #5
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fc3e 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092e:	f000 f969 	bl	8000c04 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3758      	adds	r7, #88	; 0x58
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2228      	movs	r2, #40	; 0x28
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f001 ff03 	bl	8002754 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <MX_DAC1_Init+0x7c>)
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000956:	f000 fba0 	bl	800109a <HAL_DAC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000960:	f000 f950 	bl	8000c04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800096c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000986:	f000 fc21 	bl	80011cc <HAL_DAC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f938 	bl	8000c04 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	2210      	movs	r2, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_DAC1_Init+0x78>)
 800099c:	f000 fc16 	bl	80011cc <HAL_DAC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f92d 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000028 	.word	0x20000028
 80009b8:	40007400 	.word	0x40007400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xb0>)
 8000a22:	f000 fec9 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB_Pin */
  GPIO_InitStruct.Pin = PB_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_GPIO_Init+0xb4>)
 8000a3c:	f000 fd12 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0xb0>)
 8000a5a:	f000 fd03 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800

08000a74 <PB_LED>:

/* USER CODE BEGIN 4 */
void PB_LED(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	 if (HAL_GPIO_ReadPin(PB_GPIO_Port, PB_Pin) == GPIO_PIN_RESET)
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <PB_LED+0x34>)
 8000a7e:	f000 fe83 	bl	8001788 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d106      	bne.n	8000a96 <PB_LED+0x22>
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <PB_LED+0x38>)
 8000a90:	f000 fe92 	bl	80017b8 <HAL_GPIO_WritePin>
	 }
	 else
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	 }
}
 8000a94:	e005      	b.n	8000aa2 <PB_LED+0x2e>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <PB_LED+0x38>)
 8000a9e:	f000 fe8b 	bl	80017b8 <HAL_GPIO_WritePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	48000400 	.word	0x48000400

08000ab0 <do_saw>:

void do_saw(uint8_t *saw_value){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if((*saw_value) >= VALUE_LIMIT){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2bc7      	cmp	r3, #199	; 0xc7
 8000abe:	d903      	bls.n	8000ac8 <do_saw+0x18>
		(*saw_value) = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	}
	else{
		(*saw_value) += 20;
	}
}
 8000ac6:	e005      	b.n	8000ad4 <do_saw+0x24>
		(*saw_value) += 20;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3314      	adds	r3, #20
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	701a      	strb	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <do_triangle>:

void do_triangle(uint8_t *triangle_value, uint8_t *delta){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]

	(*triangle_value) += (*delta);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	701a      	strb	r2, [r3, #0]

	if( ((*triangle_value) == VALUE_LIMIT) || ((*triangle_value) == 0)) (*delta) *= -1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2bc8      	cmp	r3, #200	; 0xc8
 8000b00:	d003      	beq.n	8000b0a <do_triangle+0x2a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d105      	bne.n	8000b16 <do_triangle+0x36>
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	425b      	negs	r3, r3
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	701a      	strb	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <do_sine>:

void do_sine(uint8_t *sine_value, float *theta){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0; // TODO: Remove later
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]

	(*theta) += (2*PI)/(10);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000bf8 <do_sine+0xd4>
 8000b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	edc3 7a00 	vstr	s15, [r3]
	if( (*theta) >= 2*PI ) (*theta) = 0;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000bfc <do_sine+0xd8>
 8000b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	db03      	blt.n	8000b62 <do_sine+0x3e>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
	temp = ((VALUE_LIMIT/2.0)*arm_sin_f32((*theta)) + (VALUE_LIMIT/2.0));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6c:	f001 fdac 	bl	80026c8 <arm_sin_f32>
 8000b70:	ee10 3a10 	vmov	r3, s0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdcf 	bl	8000718 <__aeabi_f2d>
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <do_sine+0xdc>)
 8000b80:	f7ff fb3c 	bl	80001fc <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <do_sine+0xdc>)
 8000b92:	f7ff fc63 	bl	800045c <__adddf3>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f7ff fe13 	bl	80007c8 <__aeabi_d2uiz>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	60fb      	str	r3, [r7, #12]
	(*sine_value) = (uint8_t)((VALUE_LIMIT/2.0)*arm_sin_f32((*theta)) + (VALUE_LIMIT/2.0));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	edd3 7a00 	vldr	s15, [r3]
 8000bac:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb0:	f001 fd8a 	bl	80026c8 <arm_sin_f32>
 8000bb4:	ee10 3a10 	vmov	r3, s0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdad 	bl	8000718 <__aeabi_f2d>
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <do_sine+0xdc>)
 8000bc4:	f7ff fb1a 	bl	80001fc <__aeabi_dmul>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4610      	mov	r0, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <do_sine+0xdc>)
 8000bd6:	f7ff fc41 	bl	800045c <__adddf3>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fdf1 	bl	80007c8 <__aeabi_d2uiz>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	3f20d97c 	.word	0x3f20d97c
 8000bfc:	40c90fdb 	.word	0x40c90fdb
 8000c00:	40590000 	.word	0x40590000

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_DAC_MspInit+0x74>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d124      	bne.n	8000cc4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_DAC_MspInit+0x78>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000caa:	2330      	movs	r3, #48	; 0x30
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fbd0 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40007400 	.word	0x40007400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f892 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff ffea 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f001 fcf3 	bl	8002764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7e:	f7ff fd43 	bl	8000808 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	08003010 	.word	0x08003010
  ldr r2, =_sbss
 8000d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d98:	20000040 	.word	0x20000040

08000d9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_IRQHandler>

08000d9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f943 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f80e 	bl	8000dd0 <HAL_InitTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	e001      	b.n	8000dc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc0:	f7ff ff26 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_InitTick+0x6c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d023      	beq.n	8000e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_InitTick+0x70>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_InitTick+0x6c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f941 	bl	8001082 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10f      	bne.n	8000e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d809      	bhi.n	8000e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f919 	bl	800104a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_InitTick+0x74>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e004      	b.n	8000e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e001      	b.n	8000e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	2000003c 	.word	0x2000003c

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000003c 	.word	0x2000003c

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff47 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff5c 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffb0 	bl	8000ff0 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e014      	b.n	80010d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fdcb 	bl	8000c58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2202      	movs	r2, #2
 80010c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	795b      	ldrb	r3, [r3, #5]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_DAC_Start+0x16>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e040      	b.n	8001176 <HAL_DAC_Start+0x98>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2202      	movs	r2, #2
 80010fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2201      	movs	r2, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001128:	2b02      	cmp	r3, #2
 800112a:	d11d      	bne.n	8001168 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	e014      	b.n	8001168 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2102      	movs	r1, #2
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	429a      	cmp	r2, r3
 8001156:	d107      	bne.n	8001168 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0202 	orr.w	r2, r2, #2
 8001166:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	3308      	adds	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e004      	b.n	80011b6 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	3314      	adds	r3, #20
 80011b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	795b      	ldrb	r3, [r3, #5]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_DAC_ConfigChannel+0x1c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e137      	b.n	8001458 <HAL_DAC_ConfigChannel+0x28c>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2202      	movs	r2, #2
 80011f2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	f040 8081 	bne.w	8001300 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80011fe:	f7ff fe37 	bl	8000e70 <HAL_GetTick>
 8001202:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d140      	bne.n	800128c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800120a:	e018      	b.n	800123e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800120c:	f7ff fe30 	bl	8000e70 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d911      	bls.n	800123e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00a      	beq.n	800123e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f043 0208 	orr.w	r2, r3, #8
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2203      	movs	r2, #3
 8001238:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e10c      	b.n	8001458 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1df      	bne.n	800120c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fe1b 	bl	8000e88 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	69d2      	ldr	r2, [r2, #28]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
 800125c:	e023      	b.n	80012a6 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800125e:	f7ff fe07 	bl	8000e70 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d90f      	bls.n	800128c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	2b00      	cmp	r3, #0
 8001274:	da0a      	bge.n	800128c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	f043 0208 	orr.w	r2, r3, #8
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2203      	movs	r2, #3
 8001286:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0e5      	b.n	8001458 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001292:	2b00      	cmp	r3, #0
 8001294:	dbe3      	blt.n	800125e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fdf6 	bl	8000e88 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	69d2      	ldr	r2, [r2, #28]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	ea02 0103 	and.w	r1, r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	21ff      	movs	r1, #255	; 0xff
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	ea02 0103 	and.w	r1, r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11d      	bne.n	8001344 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	221f      	movs	r2, #31
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	4013      	ands	r3, r2
 8001322:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4313      	orrs	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2207      	movs	r2, #7
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4013      	ands	r3, r2
 800135e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4313      	orrs	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e8:	d104      	bne.n	80013f4 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e018      	b.n	8001426 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	e00f      	b.n	8001426 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001406:	f001 f893 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800140a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_DAC_ConfigChannel+0x294>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d904      	bls.n	800141e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	e003      	b.n	8001426 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001424:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	22c0      	movs	r2, #192	; 0xc0
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2201      	movs	r2, #1
 800144e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	04c4b400 	.word	0x04c4b400

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e166      	b.n	8001742 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8158 	beq.w	800173c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80b2 	beq.w	800173c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a60      	ldr	r2, [pc, #384]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f0:	4a5c      	ldr	r2, [pc, #368]	; (8001764 <HAL_GPIO_Init+0x300>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161a:	d02b      	beq.n	8001674 <HAL_GPIO_Init+0x210>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d025      	beq.n	8001670 <HAL_GPIO_Init+0x20c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x308>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d01f      	beq.n	800166c <HAL_GPIO_Init+0x208>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_GPIO_Init+0x30c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d019      	beq.n	8001668 <HAL_GPIO_Init+0x204>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_GPIO_Init+0x310>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_GPIO_Init+0x200>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_GPIO_Init+0x314>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x1fc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_GPIO_Init+0x318>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x1f8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_GPIO_Init+0x31c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x1f4>
 8001654:	2307      	movs	r3, #7
 8001656:	e00e      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001658:	2308      	movs	r3, #8
 800165a:	e00c      	b.n	8001676 <HAL_GPIO_Init+0x212>
 800165c:	2306      	movs	r3, #6
 800165e:	e00a      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001660:	2305      	movs	r3, #5
 8001662:	e008      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001664:	2304      	movs	r3, #4
 8001666:	e006      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001668:	2303      	movs	r3, #3
 800166a:	e004      	b.n	8001676 <HAL_GPIO_Init+0x212>
 800166c:	2302      	movs	r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_GPIO_Init+0x212>
 8001674:	2300      	movs	r3, #0
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	f002 0203 	and.w	r2, r2, #3
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	4093      	lsls	r3, r2
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001686:	4937      	ldr	r1, [pc, #220]	; (8001764 <HAL_GPIO_Init+0x300>)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_GPIO_Init+0x320>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016b8:	4a32      	ldr	r2, [pc, #200]	; (8001784 <HAL_GPIO_Init+0x320>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_GPIO_Init+0x320>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016e2:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_GPIO_Init+0x320>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_GPIO_Init+0x320>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_GPIO_Init+0x320>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_GPIO_Init+0x320>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_GPIO_Init+0x320>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f ae91 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000
 8001768:	48000400 	.word	0x48000400
 800176c:	48000800 	.word	0x48000800
 8001770:	48000c00 	.word	0x48000c00
 8001774:	48001000 	.word	0x48001000
 8001778:	48001400 	.word	0x48001400
 800177c:	48001800 	.word	0x48001800
 8001780:	48001c00 	.word	0x48001c00
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_PWREx_GetVoltageRange+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f8:	d102      	bne.n	8001800 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fe:	e00b      	b.n	8001818 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d102      	bne.n	8001816 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001814:	e000      	b.n	8001818 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001816:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40007000 	.word	0x40007000

08001828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d141      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001836:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	d131      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184a:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800185c:	4a41      	ldr	r2, [pc, #260]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2232      	movs	r2, #50	; 0x32
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187a:	e002      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3b01      	subs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d102      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001896:	4b33      	ldr	r3, [pc, #204]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d158      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e057      	b.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018b8:	e04d      	b.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c0:	d141      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ce:	d131      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018d6:	4a23      	ldr	r2, [pc, #140]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2232      	movs	r2, #50	; 0x32
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001906:	e002      	b.n	800190e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191a:	d102      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f2      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d112      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e011      	b.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001944:	e007      	b.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001954:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40007000 	.word	0x40007000
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83

08001970 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f000 bc08 	b.w	8002194 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001984:	4b96      	ldr	r3, [pc, #600]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198e:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80e4 	beq.w	8001b6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x4c>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f040 808b 	bne.w	8001aca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 8087 	bne.w	8001aca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x64>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e3df      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_RCC_OscConfig+0x7e>
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ec:	e005      	b.n	80019fa <HAL_RCC_OscConfig+0x8a>
 80019ee:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d223      	bcs.n	8001a46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fda0 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3c0      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a72      	ldr	r2, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	496d      	ldr	r1, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a30:	4b6b      	ldr	r3, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4968      	ldr	r1, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e025      	b.n	8001a92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4960      	ldr	r1, [pc, #384]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	495b      	ldr	r1, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fd60 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e380      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a92:	f000 fcc1 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	4950      	ldr	r1, [pc, #320]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f98a 	bl	8000dd0 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d052      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	e364      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9c7 	bl	8000e70 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f9c3 	bl	8000e70 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e34d      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4930      	ldr	r1, [pc, #192]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	492b      	ldr	r1, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
 8001b36:	e01a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f994 	bl	8000e70 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f990 	bl	8000e70 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e31a      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1dc>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d073      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x21c>
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d10e      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d063      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d15f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2f7      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x24c>
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e025      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d114      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x280>
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a02      	ldr	r2, [pc, #8]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	080027c4 	.word	0x080027c4
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	4ba0      	ldr	r3, [pc, #640]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a9f      	ldr	r2, [pc, #636]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b9d      	ldr	r3, [pc, #628]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a9c      	ldr	r2, [pc, #624]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f92e 	bl	8000e70 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff f92a 	bl	8000e70 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e2b4      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2a8>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f91a 	bl	8000e70 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f916 	bl	8000e70 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e2a0      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2d0>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d060      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x310>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d119      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d116      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	4b7c      	ldr	r3, [pc, #496]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x328>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e27d      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	4973      	ldr	r1, [pc, #460]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	e040      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d023      	beq.n	8001cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f8d5 	bl	8000e70 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f8d1 	bl	8000e70 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e25b      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	495f      	ldr	r1, [pc, #380]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	e018      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5c      	ldr	r2, [pc, #368]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff f8b1 	bl	8000e70 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7ff f8ad 	bl	8000e70 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e237      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d03c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f88c 	bl	8000e70 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f888 	bl	8000e70 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e212      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ef      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3ec>
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d84:	4a3b      	ldr	r2, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f86f 	bl	8000e70 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f86b 	bl	8000e70 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1f5      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ef      	bne.n	8001d96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80a6 	beq.w	8001f10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d118      	bne.n	8001e2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e08:	f7ff f832 	bl	8000e70 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7ff f82e 	bl	8000e70 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1b8      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4d8>
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e46:	e029      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_OscConfig+0x50c>
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a9c      	ldr	r2, [pc, #624]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	4b99      	ldr	r3, [pc, #612]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a98      	ldr	r2, [pc, #608]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7fe ffe4 	bl	8000e70 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe ffe0 	bl	8000e70 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e168      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ed      	beq.n	8001eac <HAL_RCC_OscConfig+0x53c>
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe ffcd 	bl	8000e70 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe ffc9 	bl	8000e70 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e151      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef0:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ed      	bne.n	8001eda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f24:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2a:	4a72      	ldr	r2, [pc, #456]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff9c 	bl	8000e70 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f3c:	f7fe ff98 	bl	8000e70 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e122      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f4e:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ef      	beq.n	8001f3c <HAL_RCC_OscConfig+0x5cc>
 8001f5c:	e01b      	b.n	8001f96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f64:	4a63      	ldr	r2, [pc, #396]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7fe ff7f 	bl	8000e70 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f76:	f7fe ff7b 	bl	8000e70 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e105      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f88:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ef      	bne.n	8001f76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80f9 	beq.w	8002192 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	f040 80cf 	bne.w	8002148 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001faa:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d12c      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d123      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d11b      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d113      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d109      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	3b01      	subs	r3, #1
 8002012:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d071      	beq.n	80020fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d068      	beq.n	80020f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0ac      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8002040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002044:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002046:	f7fe ff13 	bl	8000e70 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ff0f 	bl	8000e70 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e099      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x788>)
 8002072:	4013      	ands	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800207c:	3a01      	subs	r2, #1
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002086:	0212      	lsls	r2, r2, #8
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0552      	lsls	r2, r2, #21
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800209a:	0852      	lsrs	r2, r2, #1
 800209c:	3a01      	subs	r2, #1
 800209e:	0652      	lsls	r2, r2, #25
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020a6:	06d2      	lsls	r2, r2, #27
 80020a8:	430a      	orrs	r2, r1
 80020aa:	4912      	ldr	r1, [pc, #72]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c8:	f7fe fed2 	bl	8000e70 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe fece 	bl	8000e70 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e058      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <HAL_RCC_OscConfig+0x784>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ee:	e050      	b.n	8002192 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e04f      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
 80020f4:	40021000 	.word	0x40021000
 80020f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d144      	bne.n	8002192 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002120:	f7fe fea6 	bl	8000e70 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fea2 	bl	8000e70 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e02c      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x7b8>
 8002146:	e024      	b.n	8002192 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d01f      	beq.n	800218e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe fe89 	bl	8000e70 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fe85 	bl	8000e70 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e00f      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4905      	ldr	r1, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x82c>)
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x830>)
 8002188:	4013      	ands	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
 800218c:	e001      	b.n	8002192 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	feeefffc 	.word	0xfeeefffc

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e11d      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b90      	ldr	r3, [pc, #576]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b8d      	ldr	r3, [pc, #564]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 020f 	bic.w	r2, r3, #15
 80021d2:	498b      	ldr	r1, [pc, #556]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e105      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002204:	429a      	cmp	r2, r3
 8002206:	d908      	bls.n	800221a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	497b      	ldr	r1, [pc, #492]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d079      	beq.n	800231a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d11e      	bne.n	800226c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0dc      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800223e:	f000 f9dd 	bl	80025fc <RCC_GetSysClockFreqFromPLLSource>
 8002242:	4603      	mov	r3, r0
 8002244:	4a70      	ldr	r2, [pc, #448]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d946      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d140      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800225e:	4a69      	ldr	r2, [pc, #420]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e035      	b.n	80022d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002274:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d115      	bne.n	80022ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b9      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0ad      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0a5      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022ac:	f000 f8b4 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d90f      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c4:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 0203 	bic.w	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4947      	ldr	r1, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ea:	f7fe fdc1 	bl	8000e70 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7fe fdbd 	bl	8000e70 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e077      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002308:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 020c 	and.w	r2, r3, #12
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	429a      	cmp	r2, r3
 8002318:	d1eb      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b80      	cmp	r3, #128	; 0x80
 800231e:	d105      	bne.n	800232c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800232a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	429a      	cmp	r2, r3
 8002346:	d208      	bcs.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	492b      	ldr	r1, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d210      	bcs.n	800238a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 020f 	bic.w	r2, r3, #15
 8002370:	4923      	ldr	r1, [pc, #140]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCC_ClockConfig+0x25c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e036      	b.n	80023f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4918      	ldr	r1, [pc, #96]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4910      	ldr	r1, [pc, #64]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c8:	f000 f826 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <HAL_RCC_ClockConfig+0x268>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x26c>)
 80023e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fcef 	bl	8000dd0 <HAL_InitTick>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40022000 	.word	0x40022000
 8002404:	40021000 	.word	0x40021000
 8002408:	04c4b400 	.word	0x04c4b400
 800240c:	080027c4 	.word	0x080027c4
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d121      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d11e      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002474:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e004      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 800249e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d134      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0xa6>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0xac>
 80024bc:	e005      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c0:	617b      	str	r3, [r7, #20]
      break;
 80024c2:	e005      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	617b      	str	r3, [r7, #20]
      break;
 80024c8:	e002      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	617b      	str	r3, [r7, #20]
      break;
 80024ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	fb03 f202 	mul.w	r2, r3, r2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0e5b      	lsrs	r3, r3, #25
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	3301      	adds	r3, #1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002510:	69bb      	ldr	r3, [r7, #24]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	080027d4 	.word	0x080027d4
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_RCC_GetHCLKFreq+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000

08002548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002560:	f7ff f942 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 8002564:	6178      	str	r0, [r7, #20]
 8002566:	e014      	b.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002580:	f7ff f932 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 8002584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d10b      	bne.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d913      	bls.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2ba0      	cmp	r3, #160	; 0xa0
 80025a4:	d902      	bls.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a6:	2302      	movs	r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e00d      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e00a      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b7f      	cmp	r3, #127	; 0x7f
 80025b6:	d902      	bls.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025b8:	2302      	movs	r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e004      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d101      	bne.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c4:	2301      	movs	r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 020f 	bic.w	r2, r3, #15
 80025d0:	4909      	ldr	r1, [pc, #36]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40022000 	.word	0x40022000

080025fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d00b      	beq.n	800262a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d825      	bhi.n	8002664 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d008      	beq.n	8002630 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11f      	bne.n	8002664 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002626:	613b      	str	r3, [r7, #16]
    break;
 8002628:	e01f      	b.n	800266a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800262c:	613b      	str	r3, [r7, #16]
    break;
 800262e:	e01c      	b.n	800266a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e005      	b.n	8002658 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	613b      	str	r3, [r7, #16]
    break;
 8002662:	e002      	b.n	800266a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
    break;
 8002668:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	3301      	adds	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	fb03 f202 	mul.w	r2, r3, r2
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0e5b      	lsrs	r3, r3, #25
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026aa:	683b      	ldr	r3, [r7, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40021000 	.word	0x40021000
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	080027d4 	.word	0x080027d4

080026c8 <arm_sin_f32>:
 80026c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002748 <arm_sin_f32+0x80>
 80026cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80026d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80026dc:	d504      	bpl.n	80026e8 <arm_sin_f32+0x20>
 80026de:	ee17 3a90 	vmov	r3, s15
 80026e2:	3b01      	subs	r3, #1
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800274c <arm_sin_f32+0x84>
 80026f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80026f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80026f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	b29b      	uxth	r3, r3
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d21a      	bcs.n	800273e <arm_sin_f32+0x76>
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002710:	1c59      	adds	r1, r3, #1
 8002712:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <arm_sin_f32+0x88>)
 8002718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800271c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002720:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002724:	ed93 7a00 	vldr	s14, [r3]
 8002728:	edd2 6a00 	vldr	s13, [r2]
 800272c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002730:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002738:	ee37 0a80 	vadd.f32	s0, s15, s0
 800273c:	4770      	bx	lr
 800273e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002742:	2101      	movs	r1, #1
 8002744:	2300      	movs	r3, #0
 8002746:	e7e6      	b.n	8002716 <arm_sin_f32+0x4e>
 8002748:	3e22f983 	.word	0x3e22f983
 800274c:	44000000 	.word	0x44000000
 8002750:	08002804 	.word	0x08002804

08002754 <memset>:
 8002754:	4402      	add	r2, r0
 8002756:	4603      	mov	r3, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <__libc_init_array>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4d0d      	ldr	r5, [pc, #52]	; (800279c <__libc_init_array+0x38>)
 8002768:	4c0d      	ldr	r4, [pc, #52]	; (80027a0 <__libc_init_array+0x3c>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	2600      	movs	r6, #0
 8002770:	42a6      	cmp	r6, r4
 8002772:	d109      	bne.n	8002788 <__libc_init_array+0x24>
 8002774:	4d0b      	ldr	r5, [pc, #44]	; (80027a4 <__libc_init_array+0x40>)
 8002776:	4c0c      	ldr	r4, [pc, #48]	; (80027a8 <__libc_init_array+0x44>)
 8002778:	f000 f818 	bl	80027ac <_init>
 800277c:	1b64      	subs	r4, r4, r5
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	2600      	movs	r6, #0
 8002782:	42a6      	cmp	r6, r4
 8002784:	d105      	bne.n	8002792 <__libc_init_array+0x2e>
 8002786:	bd70      	pop	{r4, r5, r6, pc}
 8002788:	f855 3b04 	ldr.w	r3, [r5], #4
 800278c:	4798      	blx	r3
 800278e:	3601      	adds	r6, #1
 8002790:	e7ee      	b.n	8002770 <__libc_init_array+0xc>
 8002792:	f855 3b04 	ldr.w	r3, [r5], #4
 8002796:	4798      	blx	r3
 8002798:	3601      	adds	r6, #1
 800279a:	e7f2      	b.n	8002782 <__libc_init_array+0x1e>
 800279c:	08003008 	.word	0x08003008
 80027a0:	08003008 	.word	0x08003008
 80027a4:	08003008 	.word	0x08003008
 80027a8:	0800300c 	.word	0x0800300c

080027ac <_init>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr

080027b8 <_fini>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr
